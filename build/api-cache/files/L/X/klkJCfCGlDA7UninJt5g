1683893079
oo20z%2BoyWz%3Ad05697a7b949afbd9269ec07b091200a-1391aec5a6be414e653b9fec6e475072
s:137300:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MjM6IkdEIFN0YW5kYXJkIER1bW15IGRhdGEuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjI6e2k6MDtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xTaW5jZSI6Mzp7czo3OiIAKgBuYW1lIjtzOjU6InNpbmNlIjtzOjUzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcU2luY2UAdmVyc2lvbiI7czo1OiIyLjAuMCI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToxO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czo3OiJwYWNrYWdlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoxMjoiR2VvRGlyZWN0b3J5IjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBoYXNoIjtzOjMyOiIxMzkxYWVjNWE2YmU0MTRlNjUzYjlmZWM2ZTQ3NTA3MiI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjE5OiJzdGFuZGFyZF9wbGFjZXMucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTg6Imdlb2RpcmVjdG9yeS9pbmNsdWRlcy9hZG1pbi9kdW1teS1kYXRhL3N0YW5kYXJkX3BsYWNlcy5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjEwMDQ0NToiPD9waHAKLyoqCiAqIEdEIFN0YW5kYXJkIER1bW15IGRhdGEuCiAqCiAqIEBzaW5jZSAyLjAuMAogKiBAcGFja2FnZSBHZW9EaXJlY3RvcnkKICovCgoKLy8gU2V0IHRoZSBkdW1teSBpbWFnZSB1cmwKLy8kZHVtbXlfaW1hZ2VfdXJsID0gJ2h0dHA6Ly93cGdlb2RpcmVjdG9yeS5jb20vZHVtbXkvJzsKJGR1bW15X2ltYWdlX3VybCA9ICdodHRwczovL3dwZ2Qtanpnbmd6eW1tMXY1MHMzZTNmcW90d3RlbnBqeHVxc212a3VhLm5ldGRuYS1zc2wuY29tL2R1bW15Lyc7IC8vIENETiBVUkwgd2lsbCBiZSBmYXN0ZXIKCi8vIFNldCB0aGUgZHVtbXkgY2F0ZWdvcmllcwokZHVtbXlfY2F0ZWdvcmllcyAgPSBhcnJheSgpOwoKJGR1bW15X2NhdGVnb3JpZXNbJ2F0dHJhY3Rpb25zJ10gPSBhcnJheSgKCSduYW1lJyAgICAgICAgPT4gJ0F0dHJhY3Rpb25zJywKCSdpY29uJyAgICAgICAgPT4gJGR1bW15X2ltYWdlX3VybCAuICdjYXRfaWNvbi9BdHRyYWN0aW9ucy5wbmcnLAoJJ3NjaGVtYV90eXBlJyA9PiAnVG91cmlzdEF0dHJhY3Rpb24nLAoJJ2ZvbnRfaWNvbicgICA9PiAnZmFzIGZhLXN0YXInLAoJJ2NvbG9yJyAgICAgICA9PiAnIzYyYWI0MycsCik7CiRkdW1teV9jYXRlZ29yaWVzWydob3RlbHMnXSA9IGFycmF5KAoJJ25hbWUnICAgICAgICA9PiAnSG90ZWxzJywKCSdpY29uJyAgICAgICAgPT4gJGR1bW15X2ltYWdlX3VybCAuICdjYXRfaWNvbi9Ib3RlbHMucG5nJywKCSdzY2hlbWFfdHlwZScgPT4gJ0hvdGVsJywKCSdmb250X2ljb24nICAgPT4gJ2ZhcyBmYS1iZWQnLAoJJ2NvbG9yJyAgICAgICA9PiAnIzAwODk3MicsCik7CiRkdW1teV9jYXRlZ29yaWVzWydyZXN0YXVyYW50cyddID0gYXJyYXkoCgknbmFtZScgICAgICAgID0+ICdSZXN0YXVyYW50cycsCgknaWNvbicgICAgICAgID0+ICRkdW1teV9pbWFnZV91cmwgLiAnY2F0X2ljb24vUmVzdGF1cmFudHMucG5nJywKCSdzY2hlbWFfdHlwZScgPT4gJ1Jlc3RhdXJhbnQnLAoJJ2ZvbnRfaWNvbicgICA9PiAnZmFzIGZhLXV0ZW5zaWxzJywKCSdjb2xvcicgICAgICAgPT4gJyNiYzJiMTUnLAopOwokZHVtbXlfY2F0ZWdvcmllc1snZm9vZC1uaWdodGxpZmUnXSA9IGFycmF5KAoJJ25hbWUnICAgICAgICA9PiAnRm9vZCBOaWdodGxpZmUnLAoJJ2ljb24nICAgICAgICA9PiAkZHVtbXlfaW1hZ2VfdXJsIC4gJ2NhdF9pY29uL0Zvb2RfTmlnaHRsaWZlLnBuZycsCgknZm9udF9pY29uJyAgID0+ICdmYXMgZmEtZ2xhc3MtbWFydGluaScsCgknY29sb3InICAgICAgID0+ICcjODAzZmM3JywKKTsKJGR1bW15X2NhdGVnb3JpZXNbJ2Zlc3RpdmFsJ10gPSBhcnJheSgKCSduYW1lJyAgICAgICAgPT4gJ0Zlc3RpdmFsJywKCSdpY29uJyAgICAgICAgPT4gJGR1bW15X2ltYWdlX3VybCAuICdjYXRfaWNvbi9GZXN0aXZhbC5wbmcnLAoJJ3NjaGVtYV90eXBlJyA9PiAnRXZlbnQnLAoJJ2ZvbnRfaWNvbicgICA9PiAnZmFzIGZhLXRpY2tldC1hbHQnLAoJJ2NvbG9yJyAgICAgICA9PiAnIzIwYWJjZScsCik7CiRkdW1teV9jYXRlZ29yaWVzWyd2aWRlb3MnXSA9IGFycmF5KAoJJ25hbWUnICAgICAgICA9PiAnVmlkZW9zJywKCSdpY29uJyAgICAgICAgPT4gJGR1bW15X2ltYWdlX3VybCAuICdjYXRfaWNvbi9WaWRlb3MucG5nJywKCSdmb250X2ljb24nICAgPT4gJ2ZhcyBmYS12aWRlbycsCgknY29sb3InICAgICAgID0+ICcjZmYzZTI3JywKKTsKJGR1bW15X2NhdGVnb3JpZXNbJ2ZlYXR1cmUnXSA9IGFycmF5KAoJJ25hbWUnICAgICAgICA9PiAnRmVhdHVyZScsCgknaWNvbicgICAgICAgID0+ICRkdW1teV9pbWFnZV91cmwgLiAnY2F0X2ljb24vRmVhdHVyZS5wbmcnLAoJJ2ZvbnRfaWNvbicgICA9PiAnZmFzIGZhLWhlYXJ0JywKCSdjb2xvcicgICAgICAgPT4gJyNlZjczMzcnLAopOwoKCi8vIFNldCBhbnkgY3VzdG9tIGZpZWxkcwokZHVtbXlfY3VzdG9tX2ZpZWxkcyA9IGFycmF5KCk7CiRkdW1teV9jdXN0b21fZmllbGRzID0gR2VvRGlyX0FkbWluX0R1bW15X0RhdGE6OmV4dHJhX2N1c3RvbV9maWVsZHMoJHBvc3RfdHlwZSk7IC8vIHNldCBleHRyYSBkZWZhdWx0IGZpZWxkcwoKLy8gYWRkIGJ1c2luZXNzIGhvdXJzCiRkdW1teV9jdXN0b21fZmllbGRzW10gPSBhcnJheSgncG9zdF90eXBlJyA9PiAkcG9zdF90eXBlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFfdHlwZScgPT4gJ1RFWFQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpZWxkX3R5cGUnID0+ICdidXNpbmVzc19ob3VycycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRtaW5fdGl0bGUnID0+IF9fKCdCdXNpbmVzcyBIb3VycycsICdnZW9kaXJlY3RvcnknKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmcm9udGVuZF9kZXNjJyA9PiBfXygnU2VsZWN0IHlvdXIgYnVzaW5lc3Mgb3BlbmluZy9vcGVyYXRpbmcgaG91cnMuJywgJ2dlb2RpcmVjdG9yeScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zyb250ZW5kX3RpdGxlJyA9PiBfXygnQnVzaW5lc3MgSG91cnMnLCAnZ2VvZGlyZWN0b3J5JyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHRtbHZhcl9uYW1lJyA9PiAnYnVzaW5lc3NfaG91cnMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RlZmF1bHRfdmFsdWUnID0+ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzX2FjdGl2ZScgPT4gJzEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbl92YWx1ZXMnID0+ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzX2RlZmF1bHQnID0+ICcwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzaG93X2luJyA9PiAnW293bnRhYl0sW2RldGFpbF0nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Nob3dfb25fcGtnJyA9PiAnJywKCQkJCQkJCSAgICdmaWVsZF9pY29uJyA9PiAnZmFzIGZhLWNsb2NrJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFiZWxzJyA9PiBfXygnQnVzaW5lc3MgSG91cnMnLCAnZ2VvZGlyZWN0b3J5JykpOwoKCi8vIFNldCBhbnkgc29ydCBmaWVsZHMKJGR1bW15X3NvcnRfZmllbGRzID0gYXJyYXkoKTsKCi8vIGRhdGUgYWRkZWQKJGR1bW15X3NvcnRfZmllbGRzW10gPSBhcnJheSgKCSdwb3N0X3R5cGUnID0+ICRwb3N0X3R5cGUsCgknZGF0YV90eXBlJyA9PiAnJywKCSdmaWVsZF90eXBlJyA9PiAnZGF0ZXRpbWUnLAoJJ2Zyb250ZW5kX3RpdGxlJyA9PiBfXygnTmV3ZXN0JywnZ2VvZGlyZWN0b3J5JyksCgknaHRtbHZhcl9uYW1lJyA9PiAncG9zdF9kYXRlJywKCSdzb3J0JyA9PiAnZGVzYycsCgknaXNfYWN0aXZlJyA9PiAnMScsCgknaXNfZGVmYXVsdCcgPT4gJzEnLAopOwoKLy8gdGl0bGUKJGR1bW15X3NvcnRfZmllbGRzW10gPSBhcnJheSgKCSdwb3N0X3R5cGUnID0+ICRwb3N0X3R5cGUsCgknZGF0YV90eXBlJyA9PiAnVkFSQ0hBUicsCgknZmllbGRfdHlwZScgPT4gJ3RleHQnLAoJJ2Zyb250ZW5kX3RpdGxlJyA9PiBfXygnVGl0bGUnLCdnZW9kaXJlY3RvcnknKSwKCSdodG1sdmFyX25hbWUnID0+ICdwb3N0X3RpdGxlJywKCSdzb3J0JyA9PiAnYXNjJywKCSdpc19hY3RpdmUnID0+ICcxJywKCSdpc19kZWZhdWx0JyA9PiAnMCcsCik7CgovLyByYXRpbmcKJGR1bW15X3NvcnRfZmllbGRzW10gPSBhcnJheSgKCSdwb3N0X3R5cGUnID0+ICRwb3N0X3R5cGUsCgknZGF0YV90eXBlJyA9PiAnVkFSQ0hBUicsCgknZmllbGRfdHlwZScgPT4gJ2Zsb2F0JywKCSdmcm9udGVuZF90aXRsZScgPT4gX18oJ1JhdGluZycsJ2dlb2RpcmVjdG9yeScpLAoJJ2h0bWx2YXJfbmFtZScgPT4gJ292ZXJhbGxfcmF0aW5nJywKCSdzb3J0JyA9PiAnZGVzYycsCgknaXNfYWN0aXZlJyA9PiAnMScsCgknaXNfZGVmYXVsdCcgPT4gJzAnLAopOwoKLy8gU2V0IGR1bW15IHBvc3RzCiRkdW1teV9wb3N0cyA9IGFycmF5KCk7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ0ZyYW5rbGluIFNxdWFyZScsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJyA8aDM+IExvY2F0aW9uIDwvaDM+CgkJCgkJNnRoIGFuZCBSYWNlIFN0cmVldHMgaW4gSGlzdG9yaWMgUGhpbGFkZWxwaGlhCgkJPGgzPlRoZSBFeHBlcmllbmNlPC9oMz4KCQkKCQlPbmUgb2YgUGhpbGFkZWxwaGlhJmFjdXRlO3MgbmV3ZXN0IGhpc3RvcmljIGF0dHJhY3Rpb25zIGlzIGFsc28gb25lIG9mIGl0cyBvbGRlc3QuCgkJCgkJRnJhbmtsaW4gU3F1YXJlLCBvbmUgb2YgdGhlIGZpdmUgcHVibGljIHNxdWFyZXMgdGhhdCBXaWxsaWFtIFBlbm4gbGFpZCBvdXQgaW4gaGlzIG9yaWdpbmFsIHBsYW4gZm9yIHRoZSBjaXR5LCBoYXMgdW5kZXJnb25lIGEgZHJhbWF0aWMgcmVub3ZhdGlvbi4KCQkKCQlUaGUgcGFyayBub3cgYm9hc3RzIHNldmVyYWwgYWxsIG5ldywgZmFtaWx5LWZyaWVuZGx5IGF0dHJhY3Rpb25zLCBpbmNsdWRpbmcgYSBtaW5pYXR1cmUgZ29sZiBjb3Vyc2UsIGEgY2xhc3NpYyBjYXJvdXNlbCwgc3Rvcnl0ZWxsaW5nIGJlbmNoZXMsIGEgcGljbmljIGFyZWEgYW5kIG1vcmUuCgkJCgkJPGgzPk1pbmkgR29sZiA8L2gzPgoJCQoJCUF0IFBoaWxseSBNaW5pIEdvbGYsIGFuIDE4LWhvbGUgbWluaWF0dXJlIGdvbGYgY291cnNlIGRlY29yYXRlZCB3aXRoIHNvbWUgb2YgUGhpbGFkZWxwaGlhJmFjdXRlO3MgZmF2b3JpdGUgaWNvbnMsIHBsYXkgYSByb3VuZCBvZiBwdXR0LXB1dHQgYW5kIGxlYXJuIGEgbGl0dGxlIGhpc3RvcnkgYXQgdGhlIHNhbWUgdGltZS4KCQk8aDM+Q2Fyb3VzZWwgPC9oMz4KCQkKCQlDbG9zZSB5b3VyIGV5ZXMgYW5kIHRha2UgYSBub3N0YWxnaWMgcmlkZSBvbiB0aGUgUGhpbGFkZWxwaGlhIFBhcmsgTGliZXJ0eSBDYXJvdXNlbCwgYSBjbGFzc2ljIHRyaWJ1dGUgdG8gUGhpbGFkZWxwaGlhJmFjdXRlO3MgZ3JlYXQgaGVyaXRhZ2Ugb2YgY2Fyb3VzZWwtbWFraW5nLiBJdCZhY3V0ZTtzIHN1cmUgdG8gYmUgYSBpbnN0YW50IGtpZCBmYXZvcml0ZS4KCQlTdG9yeXRlbGxpbmcgQmVuY2hlcwoJCQoJCVRoZW4gY2F0Y2ggdXAgb24geW91ciBoaXN0b3J5IGF0IG9uZSBvZiB0aGUgc3Rvcnl0ZWxsaW5nIGJlbmNoZXMgbG9jYXRlZCB0aHJvdWdob3V0IHRoZSBwYXJrLCB3aGVyZSB5b3UgY2FuIGhlYXIgdGFsZXMgb2YgRnJhbmtsaW4gU3F1YXJlJmFjdXRlO3MgcGFzdCwgb3IgbGVhcm4gYWJvdXQgdGhlIG1hbnkgY29tbXVuaXRpZXMgdG91Y2hlZCBieSB0aGUgU3F1YXJlLCBjb3VydGVzeSBvZiB0aGUgZnJpZW5kbHkgc3Rvcnl0ZWxsZXJzIG9mIE9uY2UgVXBvbiBhIE5hdGlvbi4KCQk8aDM+Rm91bnRhaW48L2gzPgoJCQoJCUFuZCBlbWFuYXRpbmcgZnJvbSB0aGUgY29ybmVycyBvZiB0aGUgaGlzdG9yaWMgcGFyaywgZm91ciBuZXcgaGVycmluZ2JvbmUgYnJpY2sgd2Fsa2luZyBwYXRocyB3aXRoIG5pZ2h0dGltZSBsaWdodGluZyBicmluZyBldmVuIG1vcmUgY2hhcm0gdG8gdGhlIFNxdWFyZSBhZnRlciBkYXJrLiBUaGUgcGF0aHMgbGVhZCB0byB0aGUgY2VudGVycGllY2Ugb2YgdGhlIFNxdWFyZSwgdGhlIEZyYW5rbGluIFNxdWFyZSBGb3VudGFpbiwgYSBtYXJibGUgbWFzdGVycGllY2UgYnVpbHQgaW4gMTgzOCBzdXJyb3VuZGVkIGJ5IHdyb3VnaHQgaXJvbiBmZW5jZXMsIHdoaWNoIGlzIGN1cnJlbnRseSBzdGlsbCBnb2luZyB1bmRlciBjb3NtZXRpYyByZXN0b3JhdGlvbi4KCQk8aDM+VGhlIEhpc3RvcnkgPC9oMz4KCQkKCQlPcmlnaW5hbGx5IG5hbWVkIOKAnE5vcnRoIEVhc3QgUHVibGljayBTcXVhcmUs4oCdIHRoZSA3LjUtYWNyZSBncmVlbiBpcyBvbmUgb2YgZml2ZSBvcmlnaW5hbCBzcXVhcmVzIHRoYXQgV2lsbGlhbSBQZW5uIGxhaWQgb3V0IGluIGhpcyBvcmlnaW5hbCBwbGFuIG9mIHRoZSBjaXR5IGluIDE2ODIuIFRoZSBTcXVhcmUgd2FzIHJlbmFtZWQgaW4gaG9ub3Igb2YgQmVuamFtaW4gRnJhbmtsaW4gaW4gMTgyNS4KCQkKCQlPdmVyIHRoZSB5ZWFycywgdGhlIGFyZWEgaGFzIGJlZW4gdXNlZCBhcyBhIGNhdHRsZSBwYXN0dXJlLCBhIGhvcnNlIGFuZCBjYXR0bGUgbWFya2V0LCBhIGJ1cmlhbCBncm91bmQsIGEgZHJpbGwgYW5kIHBhcmFkZSBncm91bmQgZm9yIHRoZSBBbWVyaWNhbiBtaWxpdGFyeSBkdXJpbmcgdGhlIFdhciBvZiAxODEyIGFuZCwgZmluYWxseSwgYSBjaXR5IHBhcmsuCgkJCgkJSW4gMTgzNywgdGhlIGNpdHkgbWFkZSBGcmFua2xpbiBTcXVhcmUgaW50byBhIHB1YmxpYyBwYXJrIGFuZCBhbiBlbGVnYW50IGZvdW50YWluIHdhcyBjb25zdHJ1Y3RlZCBpbiBpdHMgY2VudGVyLCBhIGZvdW50YWluIHRob3VnaHQgdG8gYmUgdGhlIG9sZGVzdCBzdXJ2aXZpbmcgZm91bnRhaW4gaW4gV2lsbGlhbSBQZW5uJmFjdXRlO3MgZml2ZSBoaXN0b3JpYyBzcXVhcmVzLiBUaGUgb3RoZXJzIGFyZSBSaXR0ZW5ob3VzZSwgV2FzaGluZ3RvbiwgTG9nYW4gYW5kIENlbnRlciBTcXVhcmUsIHdoZXJlIENpdHkgSGFsbCBpcyBub3cgbG9jYXRlZC4KCQk8aDM+U3F1YXJlQnVyZ2VyIDwvaDM+CgkJCgkJSnVzdCBpbiB0aW1lIGZvciBzdW1tZXIsIEZyYW5rbGluIFNxdWFyZSBoYXMgb3BlbmVkIFNxdWFyZUJ1cmdlciwgYSBTdGVwaGVuIFN0YXJyLXJ1biDigJxidXJnZXIgc2hhY2vigJ0gc2VsbGluZyBzdW1tZXIgc3RhcGxlczogaG90IGRvZ3MsIGZyaWVzLCBtaWxrc2hha2VzIChtYWRlIHdpdGggVGFzdHkgS2FrZXMpIGFuZCwgb2YgY291cnNlLCBoYW1idXJnZXJzIGFuZCBjaGVlc2VidXJnZXJzLgoJCQoJCVNxdWFyZUJ1cmdlciBpcyBvcGVuIHVudGlsIE9jdG9iZXIgLSBwZXJmZWN0IGZvciBhIGNvdXBsZSBiaXRlcyBiZXR3ZWVuIHJvdW5kcyBvZiBtaW5pYXR1cmUgZ29sZiEnLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMS5qcGciCQkKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnQXR0cmFjdGlvbnMnLCAnRmVhdHVyZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICdUYWdzJywgJ1NhbXBsZSBUYWdzJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDExMSkgNjc3LTQ0NDQnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGZyYW5rbGluc3EuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL2ZyYW5rbGluc3F1YXJlLmNvbScsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9mcmFua2xpbnNxdWFyZScsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vZnJhbmtsaW5zcXVhcmUnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA5OjAwLTE3OjAwIiwiVHUgMDk6MDAtMTc6MDAiLCJXZSAwOTowMC0xNzowMCIsIlRoIDA5OjAwLTE3OjAwIiwiRnIgMDk6MDAtMTc6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICA9PiAnUGxlYXNlIFRvdWNoIE11c2V1bScsCgkicG9zdF9jb250ZW50IiAgICA9PiAnPGgzPk5ldyBMb2NhdGlvbiEgPC9oMz4KCQkKCQlXaG8gZG9lc24mYWN1dGU7dCBsb3ZlIHRoZSBQbGVhc2UgVG91Y2ggTXVzZXVtPyBBbmQgbm93LCB0YWtpbmcga2lkcyB0byB0aGUgTXVzZXVtIGlzIGJldHRlciB0aGFuIGV2ZXIuIFRoZSBuYXRpb24mYWN1dGU7cyBwcmVtaWVyIGNoaWxkcmVuJmFjdXRlO3MgbXVzZXVtIC0gd2hpY2ggaGFzIGJlZW4gYSBiZWxvdmVkIGxhbmRtYXJrIHNpbmNlIGl0IG9wZW5lZCBpbiAxOTc2IC0gaGFzIGEgbmV3IGhvbWUgaW4gRmFpcm1vdW50IFBhcmssIG9wZW5pbmcgaXRzIGRvb3JzIHRvIGEgd29ybGQgb2YgZWR1Y2F0aW9uYWwsIGhhbmRzLW9uIGZ1bi4KCQkKCQlUaGUgbmV3IGxvY2F0aW9uIGluIE1lbW9yaWFsIEhhbGwgLSBhIE5hdGlvbmFsIEhpc3RvcmljIExhbmRtYXJrIGJ1aWx0IGluIDE4NzYgZm9yIHRoZSBDZW50ZW5uaWFsIEV4aGliaXRpb24gY2VsZWJyYXRpbmcgdGhlIGNvdW50cnkmYWN1dGU7cyAxMDB0aCBiaXJ0aGRheSAtIHdpbGwgYm9hc3QgdGhyZWUgdGltZXMgbW9yZSBzcGFjZSBmb3IgZXhoaWJpdGlvbnMgYW5kIHByb2dyYW1zLgoJCQoJCUp1c3Qgb3V0c2lkZSB0aGUgbXVzZXVtLCBraWRzIGFuZCBhZHVsdHMgd2lsbCBhbHNvIGRlbGlnaHQgaW4gcmlkaW5nIHRoZSBtZXRpY3Vsb3VzbHkgcmVzdG9yZWQgMTkwOCBXb29kc2lkZSBQYXJrIERlbnR6ZWwgQ2Fyb3VzZWwsIGJ1aWx0IGluIFBoaWxhZGVscGhpYSBmb3IgYSBub3ctZGVmdW5jdCBhbXVzZW1lbnQgcGFyayAxMCBibG9ja3MgZnJvbSBNZW1vcmlhbCBIYWxsLgoJCQoJCVZpc2l0IFRoZSBQbGVhc2UgVG91Y2ggTXVzZXVtIGZvciBtb3JlIGluZm8hCgkJPGgzPlRoZSBFeHBlcmllbmNlIDwvaDM+CgkJCgkJVGhlIGNpdHkmYWN1dGU7cyBhd2FyZC13aW5uaW5nIGNoaWxkcmVuJmFjdXRlO3MgbXVzZXVtIGlzIGZ1bi1maWxsZWQsIHRvdGFsbHkgaGFuZHMtb24sIGFuZCBzbyBkZWxpZ2h0ZnVsIHRoYXQgYWR1bHRzIGFyZSBlbnRlcnRhaW5lZCwgdG9vLiBFYWNoIG5vb2sgYW5kIGNyYW5ueSBoYXMgYSBkaWZmZXJlbnQgdGhlbWUgLSBmcm9tIHRoZSBmYW50YXN0aWMgdG8gdGhlIHByYWN0aWNhbC4gSW4gQWxpY2UmYWN1dGU7cyBBZHZlbnR1cmVzIGluIFdvbmRlcmxhbmQsIGtpZHMgY2FuIHBsYXkgY3JvcXVldCB3aXRoIHRoZSBRdWVlbiBhbmQgc2lwIHRlYSB3aXRoIHRoZSBNYWQgSGF0dGVyOyBuZWFyYnksIG92ZXJzaXplZCBwcm9wcyBicmluZyBNYXVyaWNlIFNlbmRhayZhY3V0ZTtzIGNsYXNzaWNzIHRvIGxpZmUuCgkJCgkJS2lkcyBjYW4gdGFrZSB0aGUgd2hlZWwgb2YgYSByZWFsIGJ1cyBhbmQgc2FpbCBhIGJvYXQgb24gYSBtaW5pLURlbGF3YXJlIFJpdmVyOyBpbiDigJxOYXR1cmUmYWN1dGU7cyBQb25kLOKAnSB0aGUgeW91bmdlc3QgdmlzaXRvcnMgKGFnZSAzIGFuZCB1bmRlcikgY2FuIGRpc2NvdmVyIGFuaW1hbHMgbmVzdGxlZCBhbW9uZyBoaWdoIGdyYXNzIGFuZCBhIGxpbHkgcG9uZCwgb3IgZW5qb3kgc3RvcmllcyBhbmQgbnVyc2VyeSByaHltZXMgaW4g4oCcRmFpcnl0YWxlIEdhcmRlbi7igJ0gUGxlYXNlIFRvdWNoIGlzIGFsc28gYSBmaXJzdCBsaXZlIHRoZWF0ZXIgZXhwZXJpZW5jZSBmb3IgeW91bmcgY2hpbGRyZW4gLSBQbGVhc2UgVG91Y2ggUGxheWhvdXNlIHBlcmZvcm1hbmNlcyBhcmUgb3JpZ2luYWwgYW5kIGludGVyYWN0aXZlIGFuZCB0YWtlIHBsYWNlIGRhaWx5IQoJCQoJCVBsZWFzZSBUb3VjaCBNdXNldW0gdGVuZHMgdG8gYmUgYnVzaWVyIG9uIHJhaW55IGRheXMuIFlvdSBtYXkgd2FudCB0byBzY2hlZHVsZSB5b3VyIHZpc2l0IG9uIGZhaXIgd2VhdGhlciBkYXlzLiBNb3JuaW5ncyBhcmUgYWxzbyBhIGJ1c3kgdGltZSB3aXRoIG1vc3Qgc2Nob29sIGdyb3VwcyB2aXNpdGluZyBkdXJpbmcgdGhpcyB0aW1lLiBBZnRlcm5vb25zIGFyZSBhIGdyZWF0IHRpbWUgdG8gdmlzaXQgdGhlIG11c2V1bSBhcyB3ZWxsIGFzIE1vbmRheXMgd2hlbiBncm91cHMgYXJlIG5vdCBzY2hlZHVsZWQuCgkJPGgzPkhpc3RvcnkgPC9oMz4KCQkKCQlPbmUgb2YgdGhlIGxhc3RpbmcgbXVzZXVtcyBmcm9tIHRoZSB0b3VyaXN0IHVwZ3JhZGUgb2YgUGhpbGFkZWxwaGlhIHRoYXQgY29pbmNpZGVkIHdpdGggdGhlIDE5NzYgQmljZW50ZW5uaWFsIGNlbGVicmF0aW9uLCBQbGVhc2UgVG91Y2ggTXVzZXVtwq4gZmlsbGVkIGEgZ2FwIGluIHRoZSBjaXR5JmFjdXRlO3MgY3VsdHVyYWwgc2NlbmUuIE90aGVyIG11c2V1bXMgaW4gdGhlIGFyZWEgY2VydGFpbmx5IGhhdmUgc2VjdGlvbnMgZm9yIGNoaWxkcmVuLCBidXQgUGxlYXNlIFRvdWNoIE11c2V1bSZhY3V0ZTtzIG5ldyBob21lIG5vdCBvbmx5IG9mZmVycyB0aHJlZSB0b2RkbGVyIGFyZWFzLCBidXQgYWxzbyBleGNpdGluZyBleGhpYml0IGNvbXBvbmVudHMgZm9yIG9sZGVyIHNpYmxpbmdzIChmb3IgYWdlcyA3IGFuZCB1cCkuCgkJPGgzPlZpc2l0aW5nIFRpcHMgPC9oMz4KCQkKCQlQbGVhc2UgVG91Y2ggTXVzZXVtIHRlbmRzIHRvIGJlIGJ1c2llciBvbiByYWlueSBkYXlzLiBZb3UgbWF5IHdhbnQgdG8gc2NoZWR1bGUgeW91ciB2aXNpdCBvbiBmYWlyIHdlYXRoZXIgZGF5cy4gTW9ybmluZ3MgYXJlIGFsc28gYSBidXN5IHRpbWUgd2l0aCBtb3N0IHNjaG9vbCBncm91cHMgdmlzaXRpbmcgZHVyaW5nIHRoaXMgdGltZS4gQWZ0ZXJub29ucyBhcmUgYSBncmVhdCB0aW1lIHRvIHZpc2l0IHRoZSBtdXNldW0gYXMgd2VsbCBhcyBNb25kYXlzIHdoZW4gZ3JvdXBzIGFyZSBub3Qgc2NoZWR1bGVkLgoJCTxoMz5JbnNpZGVyIFRpcCA8L2gzPgoJCQoJCVRoZSBtdXNldW0gaGFzIGEgZnVsbCBzY2hlZHVsZSBvZiBjcmFmdCBhY3Rpdml0aWVzIGFuZCBtdXNpYywgZGFuY2UgYW5kIHN0b3J5dGVsbGluZyBwZXJmb3JtYW5jZXMsIHdoaWNoIGFyZSBlbnRlcnRhaW5pbmcgZm9yIGJvdGgga2lkcyBhbmQgYWR1bHRzLgoJCTxoMz5HcmVhdCBLaWRz4oCZIFN0dWZmIDwvaDM+CgkJCgkJSW4gVGhlIFN1cGVybWFya2V0LCBraWRzIHRha2UgY29udHJvbDogVGhleSBjYW4gc3RvY2sgdGhlIHNoZWx2ZXMsIGxvYWQgdGhlaXIgY2FydCBhbmQgcmluZyB1cCB0aGUgb3JkZXIuCgkJQnV5IFRpY2tldHMgT25saW5lIEluIEFkdmFuY2UKCQkKCQlZb3UgY2FuIGJ1eSBhZG1pc3Npb24gdGlja2V0cyB0byB0aGUgUGxlYXNlIFRvdWNoIE11c2V1bSBvbmxpbmUgdGhyb3VnaCBvdXIgcGFydG5lcnMgYXQgdGhlIEluZGVwZW5kZW5jZSBWaXNpdG9yIENlbnRlci4gSnVzdCBjbGljayB0aGUgYnV0dG9uIGJlbG93LicsCgoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0F0dHJhY3Rpb25zJywgJ0ZlYXR1cmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnVGFncycsICdTYW1wbGUgVGFncycgKSwKCSJ2aWRlbyIgICAgICAgICA9PiAnJywKCSJwaG9uZSIgICAgICAgPT4gJygyMjIpIDc3Ny0xMTExJywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0BwbGVhc2V0b3VjaG11c2V1bS5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vcGxlYXNldG91Y2htdXNldW0uY29tJywKCSJ0d2l0dGVyIiAgICAgICA9PiAnaHR0cDovL3R3aXR0ZXIuY29tL3BsZWFzZXRvdWNobXVzZXVtJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9wbGVhc2V0b3VjaG11c2V1bScsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDk6MDAtMTc6MDAiLCJUdSAwOTowMC0xNzowMCIsIldlIDA5OjAwLTE3OjAwIiwiVGggMDk6MDAtMTc6MDAiLCJGciAwOTowMC0xNzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkJCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJCQkicG9zdF90aXRsZSIgICAgPT4gJ0xvbmd3b29kIEdhcmRlbnMnLAoJCQkicG9zdF9jb250ZW50IiAgICAgPT4gJzxoMz5UaGUgRXhwZXJpZW5jZSA8L2gzPgoJCQoJCVdoZW4geW91JmFjdXRlO3JlIGF0IExvbmd3b29kIEdhcmRlbnMsIGl0JmFjdXRlO3MgZWFzeSB0byBpbWFnaW5lIHRoYXQgeW91JmFjdXRlO3JlIGF0IGEgZ2lhbnQsIHJveWFsIGdhcmRlbiBpbiBFdXJvcGUuIFN0cm9sbCBhbG9uZyB0aGUgbWFueSBwYXRocyB0aHJvdWdoIGFjcmVzIG9mIGV4cXVpc2l0ZWx5IG1haW50YWluZWQgZ3JvdW5kcyBmZWF0dXJpbmcgMTEsMDAwIGRpZmZlcmVudCB0eXBlcyBvZiBwbGFudHMuCgkJCgkJRW5jb3VudGVyIGEgbmV3IHZpc3RhIGF0IGVhY2ggdHVybjogdGhlIEl0YWxpYW4gV2F0ZXIgR2FyZGVuLCBGbG93ZXIgR2FyZGVuIFdhbGssIGFxdWF0aWMgZGlzcGxheSBnYXJkZW5zIGFuZCBtYW55IG90aGVycy4gQW1ibGUgdGhyb3VnaCBQZWlyY2UmYWN1dGU7cyBXb29kcywgZWlnaHQgb3V0ZG9vciDigJxyb29tc+KAnSBvZiBkaXN0aW5jdCB3b29kbGFuZCBoYWJpdGF0cy4KCQkKCQlJbnNpZGUgdGhlIENvbnNlcnZhdG9yeSBpcyBhIGx1c2ggd29ybGQgb2YgZXhvdGljIGZsb3dlcnMsIGNhY3RpLCBicm9tZWxpYWRzLCBmZXJucyBhbmQgYm9uc2FpLiBFYWNoIHNlYXNvbiBicmluZ3MgYSBkaWZmZXJlbnQgcGxlYXN1cmU6IHNwcmluZyBtYWdub2xpYXMgYW5kIGF6YWxlYXM7IHN1bW1lciByb3NlcyBhbmQgd2F0ZXIgbGlsaWVzOyBmYWxsIGZvbGlhZ2UgYW5kIGNocnlzYW50aGVtdW1zOyBhbmQgd2ludGVyIGNhbWVsbGlhcywgb3JjaGlkcyBhbmQgcGFsbXMuCgkJCgkJT24gbGFuZCBRdWFrZXIgc2V0dGxlciBHZW9yZ2UgUGVpcmNlIHB1cmNoYXNlZCBmcm9tIFdpbGxpYW0gUGVubiwgUGVpcmNlJmFjdXRlO3MgZ3JhbmRzb25zIHBsYW50ZWQgYW4gaW1wcmVzc2l2ZSBhcmJvcmV0dW0uIFRoZSBwcmVzZW5jZSBvZiBhIHNhd21pbGwgb24gdGhlIHByb3BlcnR5IHByb21wdGVkIGluZHVzdHJpYWxpc3QgUGllcnJlIFNhbXVlbCBkdSBQb250IHRvIGJ1eSB0aGUgbGFuZCBpbiAxOTA2IHRvIHNhdmUgdGhlIHRyZWVzLgoJCQoJCUNocmlzdG1hcyBpcyBzcGVjdGFjdWxhcmx5IGNlbGVicmF0ZWQgd2l0aCBjYXJpbGxvbiBjb25jZXJ0cywgcG9pbnNldHRpYXMgYW5kIHRob3VzYW5kcyBvZiBsaWdodHM7IHN1bW1lciBldmVuaW5ncyBhcmUgZW1iZWxsaXNoZWQgd2l0aCBjb25jZXJ0cywgaWxsdW1pbmF0ZWQgZm91bnRhaW4gZGlzcGxheXMgYW5kIG9jY2FzaW9uYWwgZmlyZXdvcmtzLgoJCTxoMz5Db21lIFByZXBhcmVkIDwvaDM+CgkJCgkJTG9uZ3dvb2QgR2FyZGVucyBpcyBvcGVuIGRhaWx5LCB5ZWFyLXJvdW5kLgoJCTxoMz5Eb24mYWN1dGU7dCBNaXNzIDwvaDM+CgkJCgkJSW5kb29yIENoaWxkcmVuJmFjdXRlO3MgR2FyZGVuIC0gU3Vycm91bmRlZCBieSB0cmVlLWNvdmVyZWQgc2VhdGluZyBhbmQgTG9uZ3dvb2QmYWN1dGU7cyBmYW1vdXMgZm91bnRhaW5zLCB0aGUgbmV3IEluZG9vciBDaGlsZHJlbiZhY3V0ZTtzIEdhcmRlbiBwcm92aWRlcyBhIHNhZmUgYW5kIGVuZ2FnaW5nIHNwYWNlIHdoZXJlIGNoaWxkcmVuIGNhbiBsZWFybiBhYm91dCBuYXR1cmUgd2l0aCBhbWF6aW5nIHBsYW50cyBhbmQgZnVuIGFjdGl2aXRpZXMgYXJvdW5kIGV2ZXJ5IGNvcm5lci4KCQkKCQlUaGUgR2FyZGVuIGZlYXR1cmVzIGEgQ2VudHJhbCBDb3ZlLCBhIFJhaW4gUGF2aWxpb24gYW5kIGEgQmFtYm9vIE1hemUsIGZpbGxlZCB3aXRoIGEganVuZ2xlIG9mIHRyZWUtc2l6ZWQgYmFtYm9vcyBmb3IgY2hpbGRyZW4gdG8gZXhwbG9yZS4KCQk8aDM+T3V0c2lkZXImYWN1dGU7cyBUaXAgPC9oMz4KCQkKCQlUaGVyZSBhcmUgMTcgZm91bnRhaW5zIGluIHRoZSBJbmRvb3IgQ2hpbGRyZW4mYWN1dGU7cyBHYXJkZW4gdG8gZW5qb3ksIHdoZXJlIGNoaWxkcmVuIHdpbGwgd2FudCB0byBzcGxhc2ggYW5kIHBsYXkuIEFuIGV4dHJhIHNoaXJ0IG9yIHNtYWxsIHRvd2VsIG1pZ2h0IGNvbWUgaW4gaGFuZHkhCgkJPGgzPkJ1eSBUaWNrZXRzIE9ubGluZSBJbiBBZHZhbmNlIDwvaDM+CgkJCgkJWW91IGNhbiBidXkgYWRtaXNzaW9uIHRpY2tldHMgdG8gTG9uZ3dvb2QgR2FyZGVucyBvbmxpbmUgdGhyb3VnaCBvdXIgcGFydG5lcnMgYXQgdGhlIEluZGVwZW5kZW5jZSBWaXNpdG9yIENlbnRlci4gSnVzdCBjbGljayB0aGUgYnV0dG9uIGJlbG93LicsCgkJCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkJCSIkZHVtbXlfaW1hZ2VfdXJsL2E5LmpwZyIsCgkJCQkiJGR1bW15X2ltYWdlX3VybC9hMTAuanBnIiwKCQkJCSIkZHVtbXlfaW1hZ2VfdXJsL2EzLmpwZyIsCgkJCQkiJGR1bW15X2ltYWdlX3VybC9hNC5qcGciLAoJCQkJIiRkdW1teV9pbWFnZV91cmwvYTUuanBnIiwKCQkJCSIkZHVtbXlfaW1hZ2VfdXJsL2EyLmpwZyIsCgkJCQkiJGR1bW15X2ltYWdlX3VybC9hNy5qcGciLAoJCQkJIiRkdW1teV9pbWFnZV91cmwvYTguanBnIiwKCQkJCSIkZHVtbXlfaW1hZ2VfdXJsL2E2LmpwZyIsCgkJCQkiJGR1bW15X2ltYWdlX3VybC9hMS5qcGciLAoJCQkJIiRkdW1teV9pbWFnZV91cmwvYTExLmpwZyIKCQkJKSwKCQkJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0F0dHJhY3Rpb25zJyApICwKCQkJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnd29vZCcsICdnYXJkZW4nICksCgkJCSJ2aWRlbyIgICAgICAgICA9PiAnJywKCQkJInBob25lIiAgICAgICA9PiAnKDExMSkgODg4LTExMTEnLAoJCQkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AbG9uZ3dvb2RnYXJkZW5zLmNvbScsCgkJCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL2xvbmd3b29kZ2FyZGVucy5jb20nLAoJCQkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9sb25nd29vZGdhcmRlbnMnLAoJCQkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vbG9uZ3dvb2RnYXJkZW5zJywKCQkJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA5OjAwLTE3OjAwIiwiVHUgMDk6MDAtMTc6MDAiLCJXZSAwOTowMC0xNzowMCIsIlRoIDA5OjAwLTE3OjAwIiwiRnIgMDk6MDAtMTc6MDAiXScsCgkJCSJwb3N0X2R1bW15IiAgICA9PiAnMScKCQkpOwoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgID0+ICdUaGUgUGhpbGFkZWxwaGlhIFpvbycsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJzxoMz5UaGUgWm9vIDE1MHRoIEJpcnRoZGF5PC9oMz4KCQkKCQlUaGUgUGhpbGFkZWxwaGlhIFpvbyBjZWxlYnJhdGVkIGl0cyAxNTB0aCBhbm5pdmVyc2FyeSBpbiAyMDA5LiBTbyBzdG9wIGJ5IGFuZCBjZWxlYnJhdGUgdGhpcyBtYWpvciBhY2hpZXZlbWVudCBhdCBBbWVyaWNhJmFjdXRlO3MgZmlyc3Qgem9vIQoJCQoJCTxoMz5NY05laWwgQXZpYW4gQ2VudGVyIDwvaDM+CgkJCgkJT24gTWF5IDMwLCAyMDA5IHRoZSAxNy41LW1pbGxpb24gTWNOZWlsIEF2aWFuIENlbnRlciBvcGVuZWQgdG8gdGhlIHB1YmxpYy4KCQkKCQlUaGlzIG5ldyBhdmlhcnkgaW5jb3Jwb3JhdGVzIGx1c2gsIHdhbGstdGhyb3VnaCBoYWJpdGF0cyB3aGVyZSB2aXNpdG9ycyBjYW4gZGlzY292ZXIgbW9yZSB0aGFuIDEwMCBzcGVjdGFjdWxhciBiaXJkcyBmcm9tIGFyb3VuZCB0aGUgd29ybGQsIG1hbnkgb2YgdGhlbSByYXJlIGFuZCBlbmRhbmdlcmVkLiBBbmQgaW4gdGhlIG11bHRpLXNlbnNvcnkgNC1EIE1pZ3JhdGlvbiBUaGVhdGVyLCB2aWV3ZXJzIGNhbiBmb2xsb3cgT3RpcyB0aGUgT3Jpb2xlIG9uIGhpcyBmaXJzdCBtaWdyYXRpb24gc291dGggZnJvbSB3aGVyZSBoZSBoYXRjaGVkIGluIEZhaXJtb3VudCBQYXJrLgoJCQoJCQoJCTxoMz5UaGUgRXhwZXJpZW5jZSBhdCB0aGUgWm9vPC9oMz4KCQkKCQlPbmUgb2YgdGhlIGJlc3QgbGFpZC1vdXQgYW5kIG1vc3QgYW5pbWFsLXBhY2tlZCB6b29zIGluIHRoZSBjb3VudHJ5IGlzIHNldCBhbW9uZyBhIGNoYXJtaW5nIDQyLWFjcmUgVmljdG9yaWFuIGdhcmRlbiB3aXRoIHRyZWUtbGluZWQgd2Fsa3MsIGZvcm1hbCBzaHJ1YmJlcnksIG9ybmF0ZSBpcm9uIGNhZ2VzIGFuZCBhbmltYWwgc2N1bHB0dXJlcy4gVGhlIHpvbyBoYXMgZ2FybmVyZWQgbWFueSDigJxmaXJzdHPigJ0gaW4gYWRkaXRpb24gdG8gYmVpbmcgdGhlIGZpcnN0IHpvbyBjaGFydGVkIGluIHRoZSBVbml0ZWQgU3RhdGVzICgxODU5KS4KCQkKCQlUaGUgZmlyc3Qgb3Jhbmd1dGFuIGFuZCBjaGltcCBiaXJ0aHMgaW4gYSBVLlMuIHpvbyAoMTkyOCksIHdvcmxkJmFjdXRlO3MgZmlyc3QgQ2hpbGRyZW4mYWN1dGU7cyBab28gKDE5NTcpLCBhbmQgdGhlIGZpcnN0IFUuUy4gZXhoaWJpdCBvZiB3aGl0ZSBsaW9ucyAoMTk5MyksIGFtb25nIG90aGVycy4KCQkKCQlJbiBhZGRpdGlvbiB0byBpdHMgYW5pbWFscywgdGhlIHpvbyBpcyBrbm93biBmb3IgaXRzIGhpc3RvcmljIGFyY2hpdGVjdHVyZSwgd2hpY2ggaW5jbHVkZXMgdGhlIGNvdW50cnkgaG9tZSBvZiBXaWxsaWFtIFBlbm4mYWN1dGU7cyBncmFuZHNvbiwgaXRzIGJvdGFuaWNhbCBjb2xsZWN0aW9ucyBvZiBvdmVyIDUwMCBwbGFudCBzcGVjaWVzLCBpdHMgZ3JvdW5kYnJlYWtpbmcgcmVzZWFyY2ggYW5kIGl0cyBmaW5lIHZldGVyaW5hcnkgZmFjaWxpdGllcy4KCQlCaWcgQ2F0IEZhbGxzCgkJCgkJVGhlIGhpZ2hseSBhbnRpY2lwYXRlZCBwcmlkZSBvZiB0aGUgUGhpbGFkZWxwaGlhIFpvbywgQmFuayBvZiBBbWVyaWNhIEJpZyBDYXQgRmFsbHMsIGhvbWUgdG8gZmVsaW5lcyBmcm9tIGFyb3VuZCB0aGUgd29ybGQsIG9wZW5lZCBpbiAyMDA2LiBUaGUgbHVzaCBuZXcgZXhoaWJpdGlvbiBmZWF0dXJlcyB3YXRlcmZhbGxzLCBwb29scywgYXV0aGVudGljIHBsYW50aW5ncyBhbmQgYSBzaW11bGF0ZWQgcmVzZWFyY2ggc3RhdGlvbiBmb3IgYXNwaXJpbmcgem9vbG9naXN0cy4KCQkKCQlMaW9ucywgbGVvcGFyZHMsIGphZ3VhcnMsIHB1bWFzLCB0aWdlcnMgYW5kIHNldmVuIG5ldyBjdWJzIGFyZSB0aGUgc3RhciBhdHRyYWN0aW9ucy4KCQk8aDM+VmlzaXRvciBEZXRhaWxzIDwvaDM+CgkJCgkJT3BlbiBkYWlseSwgeWVhci1yb3VuZC4gUGFya2luZyBjYW4gYmUgdGlnaHQgc28gcHVibGljIHRyYW5zaXQgaXMgYSBncmVhdCBvcHRpb24uCgkJCgkJQ2hlY2sgb3V0IHRoZSBab28mYWN1dGU7cyB0cm9sbGV5IHNodXR0bGUsIGF2YWlsYWJsZSB0aHJvdWdoIE9jdG9iZXIsIG1ha2luZyBob3VybHkgc3RvcHMgYXQgdGhlIEluZGVwZW5kZW5jZSBWaXNpdG9yIENlbnRlciBhbmQgMzB0aCBTdHJlZXQgU3RhdGlvbi4gU2VydmljZSBpcyBhdmFpbGFibGUgc3RhcnRpbmcgYXQgMTAgYS5tLiBzZXZlbiBkYXlzIGEgd2VlayB0aHJvdWdoIEF1Z3VzdCAzMSwgMjAwOCwgd2l0aCB3ZWVrZW5kcy1vbmx5IHNlcnZpY2UgaW4gU2VwdGVtYmVyIGFuZCBPY3RvYmVyLgoJCQoJCVNFUFRBIFJvdXRlcyAxNSBhbmQgMzIgQnVzZXMgc3RvcCB3aXRoaW4gYmxvY2tzIG9mIHRoZSB6b28uIEZpbmQgc3BlY2lmaWMgc3RvcHMgYW5kIHNjaGVkdWxlcyBoZXJlLgoJCTxoMz5IaXN0b3J5PC9oMz4KCQkKCQlUaGUgbmF0aW9uJmFjdXRlO3Mgb2xkZXN0IHpvbyB3YXMgY2hhcnRlcmVkIGluIDE4NTksIGJ1dCB0aGUgaW1wZW5kaW5nIENpdmlsIFdhciBkZWxheWVkIGl0cyBvcGVuaW5nIHVudGlsIDE4NzQuIEluIGFkZGl0aW9uIHRvIGl0cyBhbmltYWxzLCB0aGUgem9vIGlzIGtub3duIGZvciBpdHMgaGlzdG9yaWMgYXJjaGl0ZWN0dXJlLCB3aGljaCBpbmNsdWRlcyB0aGUgY291bnRyeSBob21lIG9mIFdpbGxpYW0gUGVubiZhY3V0ZTtzIGdyYW5kc29uOyBpdHMgYm90YW5pY2FsIGNvbGxlY3Rpb25zIG9mIG92ZXIgNTAwIHBsYW50IHNwZWNpZXM7IGl0cyBncm91bmRicmVha2luZyByZXNlYXJjaCBhbmQgaXRzIGZpbmUgdmV0ZXJpbmFyeSBmYWNpbGl0aWVzLgoJCQoJCVRoZSBQcmltYXRlIFJlc2VydmUsIENhcm5pdm9yZSBLaW5nZG9tLCBhbmQgUmFyZSBBbmltYWwgQ29uc2VydmF0aW9uIENlbnRlciwgd2l0aCBpdHMgdHJlZSBrYW5nYXJvb3MgYW5kIGJsdWUtZXllZCBsZW11cnMsIGFyZSBicmFuZCBuZXcsIGJ1dCB0aGVyZSZhY3V0ZTtzIHN0aWxsIGZ1biB0byBiZSBoYWQgaW4gdGhlIGhpc3RvcmljLCBvbGQtc3R5bGUgYmlyZCwgcGFjaHlkZXJtIGFuZCBjYXJuaXZvcmUgaG91c2VzLiBJbiB0aGUgVHJlZWhvdXNlLCBraWRzIGNhbiBpbnZlc3RpZ2F0ZSB0aGUgd29ybGQgZnJvbSBhbiBhbmltYWwmYWN1dGU7cyBwZXJzcGVjdGl2ZTsgb3V0ZG9vcnMsIHRoZSBab28gQmFsbG9vbiBsaWZ0cyBwYXNzZW5nZXJzIDQwMCBmZWV0IGludG8gdGhlIGFpciBmb3IgYSBiaXJkJmFjdXRlO3MtZXllIHZpZXcgb2YgdGhlIHpvby4nLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EzLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0F0dHJhY3Rpb25zJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ3dvb2QnLCAnZ2FyZGVuJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDIxMSkgMTQzLTE5MDAnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQHBoaWxhZGVscGhpYXpvby5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vcGhpbGFkZWxwaGlhem9vLmNvbScsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9waGlsYWRlbHBoaWF6b28nLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3BoaWxhZGVscGhpYXpvbycsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDk6MDAtMTc6MDAiLCJUdSAwOTowMC0xNzowMCIsIldlIDA5OjAwLTE3OjAwIiwiVGggMDk6MDAtMTc6MDAiLCJGciAwOTowMC0xNzowMCIsIlNhIDA5OjAwLTE5OjAwIiwiU3UgMDk6MDAtMTc6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ05hdGlvbmFsIENvbnN0aXR1dGlvbiBDZW50ZXInLAoJInBvc3RfY29udGVudCIgICAgID0+ICc8aDM+VGhlIEV4cGVyaWVuY2U8L2gzPgoJCglJdCBvbmx5IGZvdXIgcGFnZXMgbG9uZywgYnV0IHRoZSBVLlMuIENvbnN0aXR1dGlvbiBpcyBhbW9uZyB0aGUgbW9zdCBpbmZsdWVudGlhbCBhbmQgaW1wb3J0YW50IGRvY3VtZW50cyBpbiB0aGUgaGlzdG9yeSBvZiB0aGUgd29ybGQuCgkKCVRoZSAxNjAsMDAwLXNxdWFyZS1mb290IE5hdGlvbmFsIENvbnN0aXR1dGlvbiBDZW50ZXIgZXhwbG9yZXMgYW5kIGV4cGxhaW5zIHRoaXMgYW1hemluZyBkb2N1bWVudCB0aHJvdWdoIGhpZ2gtdGVjaCBleGhpYml0cywgYXJ0aWZhY3RzLCBhbmQgaW50ZXJhY3RpdmUgZGlzcGxheXMuIFRoZSBLaW1tZWwgVGhlYXRlciwgYSAzNTAtc2VhdCBzdGFyLXNoYXBlZCB0aGVhdGVyLCBmZWF0dXJlcyBGcmVlZG9tIFJpc2luZywgYSBtdWx0aW1lZGlhIHByb2R1Y3Rpb24gY29tYmluaW5nIGZpbG0sIGEgbGl2ZSBhY3RvciBhbmQgdmlkZW8gcHJvamVjdGlvbiBvbiBhIDM2MMKwIHNjcmVlbiB0byB0ZWxsIHRoZSBzdGlycmluZyBzdG9yeSBvZiBXZSB0aGUgcGVvcGxlLgoJCglUaGVuIGV4cGVyaWVuY2UgaXQgeW91cnNlbGY6IGRvbiBqdWRpY2lhbCByb2JlcyB0byByZW5kZXIgeW91ciBvcGluaW9uIG9uIGtleSBTdXByZW1lIENvdXJ0IGNhc2VzLCB0aGVuIHRha2UgdGhlIFByZXNpZGVudGlhbCBvYXRoIG9mIHRoZSBvZmZpY2UuCgkKCUluIFNpZ25lcnMgSGFsbCwgd2hlcmUgbGlmZS1zaXplIGJyb256ZSBmaWd1cmVzIG9mIHRoZSBDb25zdGl0dXRpb24mYWN1dGU7cyBzaWduZXJzIGFuZCBkaXNzZW50ZXJzIGFyZSBkaXNwbGF5ZWQsIHZpc2l0b3JzIGNhbiBjaG9vc2UgdG8gc2lnbiBvciBkaXNzZW50LgoJCglPbmUgb2YgdGhlIHJhcmUgb3JpZ2luYWwgcHVibGljIGNvcGllcyBvZiB0aGUgQ29uc3RpdHV0aW9uIGlzIG9uIGRpc3BsYXkuCgk8aDM+SGlzdG9yeSA8L2gzPgoJCglGcmVlZG9tIG9mIHNwZWVjaCwgcHJvdGVjdGlvbiBmcm9tIHVubGF3ZnVsIHNlYXJjaCBhbmQgc2VpenVyZSwgYW5kIG90aGVyIGluZGl2aWR1YWwgcmlnaHRzIHdlcmUgbm90IHBhcnQgb2YgdGhlIG9yaWdpbmFsIENvbnN0aXR1dGlvbi4gUmVjb2duaXppbmcgaXRzIGltcGVyZmVjdGlvbnMsIHRoZSBhdXRob3JzIGJ1aWx0IGluIGEgbWVjaGFuaXNtIHRvIGFtZW5kIHRoZSBDb25zdGl0dXRpb24sIG1ha2luZyBpdCBhZGFwdGFibGUgZm9yIHVua25vd24gZXZlbnR1YWxpdGllcy4KCQoJVGhlIGZpcnN0IHRlbiBhbWVuZG1lbnRzIGd1YXJhbnRlZWluZyBudW1lcm91cyBwZXJzb25hbCBmcmVlZG9tcyAtIFRoZSBCaWxsIG9mIFJpZ2h0cyAtIHdlcmUgbm90IHJhdGlmaWVkIHVudGlsIDE3OTEuCgk8aDM+SW5zaWRlciBUaXAgPC9oMz4KCQoJV2hpbGUgdGhlIENlbnRlciBob3N0cyBhbWF6aW5nIGV2ZXJncmVlbiBwcmVzZW50YXRpb25zLCB0YWtlIGEgbG9vayBhdCB0aGUgRXZlbnRzIENhbGVuZGFyIGZvciB0aGUgbGF0ZXN0IHByZW1pZXJlIG9yIHRyYXZlbGluZyBleGhpYml0LgoJPGgzPktpZHMgU3R1ZmYgPC9oMz4KCQoJVGhlIENlbnRlciBmcmVxdWVudGx5IGhvc3RzIHNwZWNpYWwgZXZlbnRzIHdpdGggYSBmb2N1cyBvbiBjaGlsZHJlbiB0aGF0IGluY2x1ZGUgaW5mb3JtYXRpdmUgYW5kIGVuZ2FnaW5nIGhhbmRzLW9uIGFjdGl2aXRpZXMuIEZvciBzcGVjaWZpYyBpbmZvcm1hdGlvbiwgY2hlY2sgb3V0IHRoZSBDZW50ZXIgd2Vic2l0ZS4nLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EzLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0F0dHJhY3Rpb25zJywgJ0ZlYXR1cmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnVGFnJywgJ0NlbnRlcicgKSwKCSJ2aWRlbyIgICAgICAgICA9PiAnJywKCSJwaG9uZSIgICAgICAgPT4gJygxMTEpIDExMS0xMTExJywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0BuY2MuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL25jYy5jb20nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vbmNjJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9uY2MnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA5OjAwLTE3OjAwIiwiVHUgMDk6MDAtMTc6MDAiLCJXZSAwOTowMC0xNzowMCIsIlRoIDA5OjAwLTE3OjAwIiwiRnIgMDk6MDAtMTc6MDAiLCJTYSAwOTowMC0xOTowMCIsIlN1IDA5OjAwLTE3OjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgID0+ICdTYWRzYnVyeSBXb29kcyBQcmVzZXJ2ZScsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJ0EgbW9yZSB0aGFuIDUwMC1hY3JlIG5hdHVyZSBwcmVzZXJ2ZSBpZGVhbCBmb3Igd2Fsa2luZyBhbmQgaGlraW5nLCBTYWRzYnVyeSBXb29kcyBpcyBhbHNvIGFuIGltcG9ydGFudCBoYWJpdGF0IGZvciBpbnRlcmlvciBuZXN0aW5nIGJpcmRzIGFuZCBzbWFsbCBtYW1tYWxzLiBBbiBpbmNyZWFzaW5nbHkgcmFyZSBhcmVhIG9mIGludGVyaW9yIHdvb2RsYW5kcywgZGVmaW5lZCBhcyBhbiBhcmVhIGF0IGxlYXN0IDMwMCBmZWV0IGZyb20gYW55IHJvYWQsIGxhd24gb3IgbWVhZG93LCBwcm92aWRlcyBhIGNyaXRpY2FsIGhhYml0YXQgZm9yIG1hbnkgc3BlY2llcyBvZiBiaXJkcywgZXNwZWNpYWxseSBuZW8tdHJvcGljYWwgbWlncmFudCBzb25nYmlyZHMuCgkKCVNpdHVhdGVkIG9uIHRoZSB3ZXN0ZXJuIGVkZ2Ugb2YgQ2hlc3RlciBDb3VudHksIHRoZSBsYW5kIHJlbWFpbnMgbXVjaCBhcyBpdCBkaWQgY2VudHVyaWVzIGFnbywgYW5kIG5vdyBzZXJ2ZXMgYXMgYSBwZXJtYW5lbnQgcmVmdWdlIGluIGFuIGFyZWEgZmFjaW5nIGRyYW1hdGljYWxseSBpbmNyZWFzaW5nIGRldmVsb3BtZW50IHByZXNzdXJlLgoJCglUaGUgY29sb3JmdWwgYmlyZHMgdGhhdCBicmVlZCBpbiB0aGUgZm9yZXN0IGR1cmluZyB0aGUgc3ByaW5nIGFuZCBzdW1tZXIgbW9udGhzIGZseSB0byBTb3V0aCBBbWVyaWNhIGZvciB0aGUgd2ludGVyLiBUbyBzdXJ2aXZlIGhlcmUsIHRoZXkgbmVlZCBhYnVuZGFudCBmb29kIGFuZCBwcm90ZWN0aW9uIGZyb20gdGhlIHdlYXRoZXIgYW5kIHByZWRhdG9ycywgc29tZXRoaW5nIHRoZXkmYWN1dGU7cmUgYWJsZSB0byBmaW5kIGluIFNhZHNidXJ5IFdvb2RzLiBBIHJlY2VudCBiaXJkIGNvdW50IGlkZW50aWZpZWQgbW9yZSB0aGFuIDQwIGRpZmZlcmVudCBzcGVjaWVzIGluIGp1c3Qgb25lIG1vcm5pbmcuCgkKCVRoZSBwcmVzZXJ2ZSBoYXMgYmVlbiBhc3NlbWJsZWQgZnJvbSBtb3JlIHRoYW4gb25lIGRvemVuIHBhcmNlbHMsIGFuIGVmZm9ydCB0aGF0IHdhcyBtYWRlIHBvc3NpYmxlIHRoYW5rcyB0byBsYW5kb3duZXJzIHdobyB3ZXJlIHdpbGxpbmcgdG8gc2VsbCB0aGVpciBsYW5kIGZvciBjb25zZXJ2YXRpb24gcHVycG9zZXMuIE9uZSBzdWNoIGxhbmRvd25lciByZWNhbGxlZCBleHBsb3JpbmcgdGhlc2Ugd29vZHMgYXMgYSBjaGlsZCBhbmQgd2FudGVkIHRvIGVuc3VyZSB0aGF0IGhpcyBncmFuZGNoaWxkcmVuIGFuZCBncmVhdC1ncmFuZGNoaWxkcmVuIHdvdWxkIGJlIGFibGUgdG8gZG8gdGhlIHNhbWUuIE5hdHVyYWwgTGFuZHMgVHJ1c3QgaXMgd29ya2luZyB0byBleHBhbmQgdGhlIHByZXNlcnZlLCBhbmQgaG9wZXMgdG8gZXZlbnR1YWxseSBwcm90ZWN0IGEgdG90YWwgb2YgNjAwIGFjcmVzLgoJU3VwcG9ydCB0aGUgTmF0dXJhbCBMYW5kcyBUcnVzdAoJCglUaGUgTmF0dXJhbCBMYW5kcyBUcnVzdCBzZWVrcyB2b2x1bnRlZXJzIGFuZCBtZW1iZXJzIHRvIGhlbHAgcHJvdGVjdCBhbmQgY2FyZSBmb3IgU2Fkc2J1cnkgV29vZHMgYW5kIGl0cyBtYW55IG90aGVyIG5hdHVyYWwgYXJlYXMuIE1lbWJlcnMgYXJlIGludml0ZWQgdG8gZG96ZW5zIG9mIG91dGluZ3MgZWFjaCB5ZWFyIGluY2x1ZGluZyBjYW5vZSB0cmlwcywgYmlyZCB3YWxrcywgaGlrZXMgYW5kIG11Y2ggbW9yZS4gCglDb21lIFByZXBhcmVkCgkKCVRoZSBwcmVzZXJ2ZSBpcyBvcGVuIGZyb20gc3VucmlzZSB0byBzdW5zZXQuIFBldHMgbXVzdCBiZSBsZWFzaGVkLiBBbGNvaG9saWMgYmV2ZXJhZ2VzLCBtb3Rvcml6ZWQgdmVoaWNsZXMgYW5kIG1vdW50YWluIGJpa2VzIGFyZSBub3QgcGVybWl0dGVkLiBIb3JzZWJhY2sgcmlkZXJzIGFyZSB3ZWxjb21lLCBidXQgeW91IG11c3QgcmlkZSBpbiwgYmVjYXVzZSB0aGVyZSBub3doZXJlIHRvIHBhcmsgYSB0cmFpbGVyLiBNYXBzIGFuZCBvdGhlciBtYXRlcmlhbCBhcmUgYXZhaWxhYmxlIGluIHRoZSBraW9zayBieSB0aGUgcGFya2luZyBhcmVhLgoJT3V0c2lkZXIgVGlwCgkKCVRoZSBkZWVwIGZvcmVzdCBpcyBhIGdyZWF0IHBsYWNlIGZvciBzcG90dGluZyBuZW8tdHJvcGljYWwgc29uZ2JpcmRzIGluIHRoZSBzcHJpbmcgYW5kIHN1bW1lciBtb250aHMnLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EzLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0F0dHJhY3Rpb25zJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ3NhbXBsZScsICd0YWdzJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDIyMikgOTk5LTk5OTknLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQHN3cC5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vc3dwLmNvbScsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9zd3AnLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3N3cCcsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDk6MDAtMTc6MDAiLCJUdSAwOTowMC0xNzowMCIsIldlIDA5OjAwLTE3OjAwIiwiVGggMDk6MDAtMTc6MDAiLCJGciAwOTowMC0xNzowMCIsIlNhIDA5OjAwLTE5OjAwIiwiU3UgMDk6MDAtMTc6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ011c2V1bSBXaXRob3V0IFdhbGxzJywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnPGgzPlRoZSBFeHBlcmllbmNlIDwvaDM+CgkKCU11c2V1bSBXaXRob3V0IFdhbGxzOiBBVURJTyBpcyBhIG11bHRpLXBsYXRmb3JtLCBpbnRlcmFjdGl2ZSBhdWRpbyB0b3VyLCBkZXNpZ25lZCB0byBhbGxvdyBsb2NhbHMgYW5kIHZpc2l0b3JzIGFsaWtlIHRvIGV4cGVyaWVuY2UgUGhpbGFkZWxwaGlhIGV4dGVuc2l2ZSBjb2xsZWN0aW9uIG9mIHB1YmxpYyBhcnQgYW5kIG91dGRvb3Igc2N1bHB0dXJlIGFsb25nIHRoZSBCZW5qYW1pbiBGcmFua2xpbiBQYXJrd2F5IGFuZCBLZWxseSBEcml2ZS4gVGhpcyBpbm5vdmF0aXZlIHByb2dyYW0gaW52aXRlcyBwYXNzZXJzYnkgdG8gc3RvcCwgbG9vaywgbGlzdGVuIGFuZCBzZWUgdGhpcyBjaXR5IHB1YmxpYyBhcnQgaW4gYSBuZXcgd2F5LiBEaXNjb3ZlciB0aGUgdW50b2xkIGhpc3RvcmllcyBvZiB0aGUgNTEgb3V0ZG9vciBzY3VscHR1cmVzIGF0IDM1IHN0b3BzIHRocm91Z2ggdGhlc2UgcHJvZmVzc2lvbmFsbHkgcHJvZHVjZWQgdGhyZWUtbWludXRlIGludGVycHJldGl2ZSBhdWRpbyBzZWdtZW50cy4gVGhlIG1hbnkgbmFycmF0aXZlcyBoYXZlIGJlZW4gc3Bva2VuIGJ5IG1vcmUgdGhhbiAxMDAgaW5kaXZpZHVhbHMsIGFsbCB3aXRoIHBlcnNvbmFsIGNvbm5lY3Rpb25zIHRvIHRoZSBwaWVjZXMgb2YgYXJ0LgoJCglXb3JrcyBpbiBNdXNldW0gV2l0aG91dCBXYWxsczogQVVESU8gaW5jbHVkZSB0aGUgc2N1bHB0dXJlIEplc3VzIEJyZWFraW5nIEJyZWFkLCB3aGljaCBpcyBsb2NhdGVkIGluIGZyb250IG9mIHRoZSBDYXRoZWRyYWwgQmFzaWxpY2Egb2YgU2FpbnRzIFBldGVyIGFuZCBQYXVsIGF0IDE4dGggYW5kIFJhY2UgU3RyZWV0cy4gVGhlIHNjdWxwdHVyZSZhY3V0ZTtzIGF1ZGlvIHByb2dyYW0gZmVhdHVyZXMgdGhlIHZvaWNlcyBvZiB0aHJlZSBwZW9wbGUgd2hvIGFyZSBlYWNoIGludGltYXRlbHksIHlldCBkaXN0aW5jdGx5LCBjb25uZWN0ZWQgdG8gdGhlIHBpZWNlLiBMaXN0ZW5lcnMgY2FuIGhlYXIgTWFydGhhIEVybGViYWNoZXIsIHRoZSB3aWZlIG9mIHRoZSBub3ctZGVjZWFzZWQgc2N1bHB0b3IgYW5kIGFuIGFydGlzdCBoZXJzZWxmLCByZWNhbGwgdGhlIHBlcnNvbmFsIGNoYWxsZW5nZSBXYWx0ZXIgRXJsZWJhY2hlciBzZXQgdG8gaHVtYW5pemUgdGhlIGZpZ3VyZS4gTW9uc2lnbm9yIEpvaG4gTWlsbGVyLCB3aG8gb3ZlcnNhdyB0aGUgY29tbWlzc2lvbiBvZiB0aGUgc2N1bHB0dXJlIGZvciB0aGUgQXJjaGRpb2Nlc2Ugb2YgUGhpbGFkZWxwaGlhLCBkaXNjdXNzZXMgdGhlIGFydGlzdCBjb25mcm9udGF0aW9uIHdpdGggaGlzdG9yaWMgaW50ZXJwcmV0YXRpb24sIGFuZCBTaXN0ZXIgTWFyeSBTY3VsbGlvbiwgd2hvIHJ1bnMgdGhlIHJlbm93bmVkIHByb2dyYW0gZm9yIHRoZSBob21lbGVzcyBpbiBQaGlsYWRlbHBoaWEsIFByb2plY3QgSC5PLk0uRS4sIGFuZCB3aG8gYWxzbyBhdHRlbmRlZCB0aGUgc2N1bHB0dXJlIGRlZGljYXRpb24gYXMgYSBzdHVkZW50LCB0YWxrcyBhYm91dCB0aGUgaW1wb3J0YW5jZSBvZiBwbGFjaW5nIHRoZSBmaWd1cmUgb3V0c2lkZSBvZiB0aGUgY2h1cmNoLgoJCglJbiB0aGUgYXVkaW8gcHJvZ3JhbSBmb3IgdGhlIHNjdWxwdHVyZSBJcm9xdW9pcywgbGlzdGVuZXJzIHdpbGwgaGVhciBhIGZpcnN0LXBlcnNvbiBhY2NvdW50IGZyb20gTWFyayBkaSBTdXZlcm8sIHRoZSBhcnRpc3QgaGltc2VsZiwgd2hvIGRpc2N1c3NlcyB0aGUgYWJzdHJhY3Qgc2N1bHB0dXJlIGFuZCBpdHMgb3BlbiBzaGFwZXMgdGhhdCBpbnZpdGUgcHVibGljIGludGVyYWN0aW9uIGFuZCB2aWV3aW5nIGZyb20gbXVsdGlwbGUgYW5nbGVzLiBJIHRoaW5rIHRoYXQgaW4gb3JkZXIgdG8gZXhwZXJpZW5jZSBbSXJvcXVvaXNdIOKApiB5b3UgaGF2ZSB0byB3YWxrIGluIHRocm91Z2ggdGhlIHBpZWNlLCB5b3UgaGF2ZSB0byBoYXZlIGl0IGFsbCB0aGUgd2F5IGFyb3VuZCB5b3UgYW5kIGF0IHRoYXQgbW9tZW50LCB5b3UgY2FuIGZlZWwgd2hhdCB0aGF0IHNjdWxwdHVyZSBjYW4gZG8sIHNheXMgZGkgU3V2ZXJvLiBMb3dlbGwgTWNLZWduZXksIGRpIFN1dmVybyBjb25zdHJ1Y3Rpb24gbWFuYWdlciBhbmQgbG9uZ3RpbWUgZnJpZW5kLCBjb21wYXJlcyB0aGUgc2N1bHB0dXJlIHRvIG11c2ljIGFuZCBlbmNvdXJhZ2VzIGxpc3RlbmVycyB0byBhcHByZWNpYXRlIGl0IGluIHRoZSBzYW1lIHdheS4KCTxoMz5IaXN0b3J5IDwvaDM+CgkKCVBoaWxhZGVscGhpYSBoYXMgbW9yZSBvdXRkb29yIHNjdWxwdHVyZSB0aGFuIGFueSBvdGhlciBBbWVyaWNhbiBjaXR5LCB5ZXQgdGhpcyBleHRlbnNpdmUgY29sbGVjdGlvbiBvZnRlbiBnb2VzIHVubm90aWNlZC4gVGhpcyBwcm9ncmFtIGlzIGludGVuZGVkIHRvIHJldmVhbCB0aGUgZGlzdGluY3Qgc3RvcmllcyBiZWhpbmQgZWFjaCBvZiB0aGVzZSB3b3JrcywgdGhhdCBoYXZlIGJlY29tZSB2aXN1YWwgd2hpdGUgbm9pc2UgZm9yIHNvIG1hbnkgb2YgdGhlIGNpdHkgcmVzaWRlbnRzIGFuZCB2aXNpdG9ycy4gJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9hMTUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMTcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E5LmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnQXR0cmFjdGlvbnMnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnTXVzZXVtJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDIyMikgOTk5LTk5OTknLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQG13d2FsbHMuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL211c2V1bXdpdGhvdXR3YWxsc2F1ZGlvLm9yZy8nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vbXd3YWxscycsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vbXd3YWxscycsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDk6MDAtMTc6MDAiLCJUdSAwOTowMC0xNzowMCIsIldlIDA5OjAwLTE3OjAwIiwiVGggMDk6MDAtMTc6MDAiLCJGciAwOTowMC0xNzowMCIsIlNhIDA5OjAwLTE5OjAwIiwiU3UgMDk6MDAtMTc6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkJCSJwb3N0X3RpdGxlIiAgICA9PiAnQXVkYWNpb3VzIEZyZWVkb20nLAoJCQkicG9zdF9jb250ZW50IiAgICAgPT4gJ0F1ZGFjaW91cyBGcmVlZG9tLCB0aGUgbWFqb3IsIG5ldyBleGhpYml0IGF0IHRoZSBBZnJpY2FuIEFtZXJpY2FuIE11c2V1bSBpbiBQaGlsYWRlbHBoaWEgLCBleHBsb3JlcyB0aGUgbGl2ZXMgb2YgcGVvcGxlIG9mIEFmcmljYW4gZGVzY2VudCBsaXZpbmcgaW4gUGhpbGFkZWxwaGlhIGJldHdlZW4gMTc3NiBhbmQgMTg3Ni4KCQoJRGlzY292ZXIgaG93IEFmcmljYW4gQW1lcmljYW5zIGluIFBoaWxhZGVscGhpYSBsaXZlZCBhbmQgd29ya2VkIHdoaWxlIGhlbHBpbmcgdG8gc2hhcGUgdGhlIHlvdW5nIG5hdGlvbiBpbiBpdHMgZm9ybWF0aXZlIHN0YWdlcy4KCQoJRXhoaWJpdCB0aGVtZXMgaW5jbHVkZSBlbnRyZXByZW5ldXJzaGlwLCBlbnZpcm9ubWVudCwgZWR1Y2F0aW9uLCByZWxpZ2lvbiBhbmQgZmFtaWx5IHRyYWRpdGlvbnMgb2YgdGhlIEFmcmljYW4gQW1lcmljYW4gcG9wdWxhdGlvbiwgcGxheWVkIG91dCB0aHJvdWdoIGludGVyYWN0aXZlIGRpc3BsYXlzLCB2aWRlbyBwcm9qZWN0aW9ucyBhbmQgdml2aWQgcGhvdG9ncmFwaHkuCgkKCVRoZSBncm91bmRicmVha2luZyBleGhpYml0IGFsbG93cyB2aXNpdG9ycyB0byDigJx3YWxrIHRoZSBzdHJlZXRz4oCdIG9mIEhpc3RvcmljIFBoaWxhZGVscGhpYSB1c2luZyBhIGxhcmdlLXNjYWxlIG1hcC4gWW91bmcgY2hpbGRyZW4gY2FuIGpvaW4gdGhlIGFjdGlvbiB3aXRoIENoaWxkcmVuJmFjdXRlO3MgQ29ybmVyLCB3aGljaCBoaWdobGlnaHRzIHRoZSBkYWlseSBsaXZlcyBvZiBjaGlsZHJlbiBkdXJpbmcgdGhhdCBwZXJpb2QuCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2ExMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EzLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2EyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hOS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0F0dHJhY3Rpb25zJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ1RhZzEnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoNzc3KSA3NzctNzc3NycsCgkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AYWFtcG11c2V1bS5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vd3d3LmFhbXBtdXNldW0ub3JnLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9hYW1wbXVzZXVtJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9hYW1wbXVzZXVtJywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAwOTowMC0xNzowMCIsIlR1IDA5OjAwLTE4OjAwIiwiV2UgMDk6MDAtMTc6MDAiLCJUaCAwOTowMC0xOTowMCIsIkZyIDA5OjAwLTE3OjAwIiwiU2EgMDk6MDAtMTk6MDAiLCJTdSAwOTowMC0xNzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ1RoZSBMaWJlcnR5IEJlbGwgQ2VudGVyJywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnPGgzPlRoZSBFeHBlcmllbmNlIDwvaDM+CgkKCVRoZSBMaWJlcnR5IEJlbGwgaGFzIGEgbmV3IGhvbWUsIGFuZCBpdCBpcyBhcyBwb3dlcmZ1bCBhbmQgZHJhbWF0aWMgYXMgdGhlIEJlbGwgaXRzZWxmLiBUaHJvdWdob3V0IHRoZSBleHBhbnNpdmUsIGxpZ2h0LWZpbGxlZCBDZW50ZXIsIGxhcmdlci10aGFuLWxpZmUgaGlzdG9yaWMgZG9jdW1lbnRzIGFuZCBncmFwaGljIGltYWdlcyBleHBsb3JlIHRoZSBmYWN0cyBhbmQgdGhlIG15dGhzIHN1cnJvdW5kaW5nIHRoZSBCZWxsLgoJCglYLXJheXMgZ2l2ZSBhbiBpbnNpZGVyJmFjdXRlO3MgdmlldywgbGl0ZXJhbGx5LCBvZiB0aGUgQmVsbCZhY3V0ZTtzIGNyYWNrIGFuZCBpbm5lci13b3JraW5ncy4gSW4gcXVpZXQgYWxjb3ZlcywgYSBzaG9ydCBIaXN0b3J5IENoYW5uZWwgZmlsbSwgYXZhaWxhYmxlIGluIEVuZ2xpc2ggYW5kIGVpZ2h0IG90aGVyIGxhbmd1YWdlcywgdHJhY2VzIGhvdyBhYm9saXRpb25pc3RzLCBzdWZmcmFnaXN0cyBhbmQgb3RoZXIgZ3JvdXBzIGFkb3B0ZWQgdGhlIEJlbGwgYXMgaXRzIHN5bWJvbCBvZiBmcmVlZG9tLgoJCglPdGhlciBleGhpYml0cyBzaG93IGhvdyB0aGUgQmVsbCZhY3V0ZTtzIGltYWdlIHdhcyB1c2VkIG9uIGV2ZXJ5dGhpbmcgZnJvbSBpY2UgY3JlYW0gbW9sZHMgdG8gd2luZCBjaGltZXMuIEtlZXAgeW91ciBjYW1lcmEgaGFuZHkuIFNvYXJpbmcgZ2xhc3Mgd2FsbHMgb2ZmZXIgZHJhbWF0aWMgYW5kIHBvd2VyZnVsIHZpZXdzIG9mIGJvdGggdGhlIExpYmVydHkgQmVsbCBhbmQgSW5kZXBlbmRlbmNlIEhhbGwsIGp1c3QgYSBmZXcgc3RlcHMgYXdheS4KCTxoMz5IaXN0b3J5PC9oMz4KCQoJVGhlIGJlbGwgbm93IGNhbGxlZCB0aGUgTGliZXJ0eSBCZWxsIHdhcyBjYXN0IGluIHRoZSBXaGl0ZWNoYXBlbCBGb3VuZHJ5IGluIHRoZSBFYXN0IEVuZCBvZiBMb25kb24gYW5kIHNlbnQgdG8gdGhlIGJ1aWxkaW5nIGN1cnJlbnRseSBrbm93biBhcyBJbmRlcGVuZGVuY2UgSGFsbCwgdGhlbiB0aGUgUGVubnN5bHZhbmlhIFN0YXRlIEhvdXNlLCBpbiAxNzUzLgoJCglJdCB3YXMgYW4gaW1wcmVzc2l2ZSBsb29raW5nIG9iamVjdCwgMTIgZmVldCBpbiBjaXJjdW1mZXJlbmNlIGFyb3VuZCB0aGUgbGlwIHdpdGggYSA0NC1wb3VuZCBjbGFwcGVyLiBJbnNjcmliZWQgYXQgdGhlIHRvcCB3YXMgcGFydCBvZiBhIEJpYmxpY2FsIHZlcnNlIGZyb20gTGV2aXRpY3VzLCDigJxQcm9jbGFpbSBMaWJlcnR5IHRocm91Z2hvdXQgYWxsIHRoZSBMYW5kIHVudG8gYWxsIHRoZSBJbmhhYml0YW50cyB0aGVyZW9mLuKAnQoJCglVbmZvcnR1bmF0ZWx5LCB0aGUgY2xhcHBlciBjcmFja2VkIHRoZSBiZWxsIG9uIGl0cyBmaXJzdCB1c2UuIEEgY291cGxlIG9mIGxvY2FsIGFydGlzYW5zLCBKb2huIFBhc3MgYW5kIEpvaG4gU3RvdywgcmVjYXN0IHRoZSBiZWxsIHR3aWNlLCBvbmNlIGFkZGluZyBtb3JlIGNvcHBlciB0byBtYWtlIGl0IGxlc3MgYnJpdHRsZSBhbmQgdGhlbiBhZGRpbmcgc2lsdmVyIHRvIHN3ZWV0ZW4gaXRzIHRvbmUuIE5vIG9uZSB3YXMgcXVpdGUgc2F0aXNmaWVkLCBidXQgaXQgd2FzIHB1dCBpbiB0aGUgdG93ZXIgb2YgdGhlIFN0YXRlIEhvdXNlIGFueXdheS4KCTxoMz5GYXN0IEZhY3RzIDwvaDM+CgkKCVRoZSBMaWJlcnR5IEJlbGwgaXMgY29tcG9zZWQgb2YgYXBwcm94aW1hdGVseSA3MCBwZXJjZW50IGNvcHBlciwgMjUgcGVyY2VudCB0aW4gYW5kIHRyYWNlcyBvZiBsZWFkLCB6aW5jLCBhcnNlbmljLCBnb2xkIGFuZCBzaWx2ZXIuCgkKCVRoZSBCZWxsIGlzIHN1c3BlbmRlZCBmcm9tIHdoYXQgaXMgYmVsaWV2ZWQgdG8gYmUgaXRzIG9yaWdpbmFsIHlva2UsIG1hZGUgb2YgQW1lcmljYW4gZWxtLgoJCglUaGUgTGliZXJ0eSBCZWxsIHdlaWdocyAyLDA4MCBwb3VuZHMuIFRoZSB5b2tlIHdlaWdocyBhYm91dCAxMDAgcG91bmRzLicsCgkicG9zdF9pbWFnZXMiICAgPT4gYXJyYXkoCgkJIiRkdW1teV9pbWFnZV91cmwvYTE5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTIwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E5LmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnQXR0cmFjdGlvbnMnLCAnRmVhdHVyZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICcnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoNzc3KSA2NjYtNjY2NicsCgkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AbnBzLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cubnBzLmdvdi9pbmRlJywKCSJ0d2l0dGVyIiAgICAgICA9PiAnaHR0cDovL3R3aXR0ZXIuY29tL25wcycsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vbnBzJywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAwOTowMC0xNzowMCIsIlR1IDA5OjAwLTE3OjAwIiwiV2UgMDk6MDAtMTc6MDAiLCJUaCAwOTowMC0xNzowMCIsIkZyIDA5OjAwLTE3OjAwIiwiU2EgMDk6MDAtMTk6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ1JpdHRlbmhvdXNlIFNxdWFyZScsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJCglVbmxpa2UgdGhlIG90aGVyIHNxdWFyZXMsIHRoZSBlYXJseSBTb3V0aHdlc3QgU3F1YXJlIHdhcyBuZXZlciB1c2VkIGFzIGEgYnVyaWFsIGdyb3VuZCwgYWx0aG91Z2ggaXQgb2ZmZXJlZCBwYXN0dXJhZ2UgZm9yIGxvY2FsIGxpdmVzdG9jayBhbmQgYSBjb252ZW5pZW50IGR1bXBpbmcgc3BvdCBmb3Ig4oCcbmlnaHQgc29pbOKAnS4KCTxoMz4gSGlzdG9yeSA8L2gzPgoJCglCeSB0aGUgbGF0ZSAxNzAwcyB0aGUgc3F1YXJlIHdhcyBzdXJyb3VuZGVkIGJ5IGJyaWNreWFyZHMgYXMgdGhlIGFyZWEmYWN1dGU7cyBjbGF5IHRlcnJhaW4gd2FzIGJldHRlciBzdWl0ZWQgZm9yIGtpbG5zIHRoYW4gY3JvcHMuIEluIDE4MjUgdGhlIHNxdWFyZSB3YXMgcmVuYW1lZCBpbiBob25vciBvZiBQaGlsYWRlbHBoaWFuIERhdmlkIFJpdHRlbmhvdXNlLCB0aGUgYnJpbGxpYW50IGFzdHJvbm9tZXIsIGluc3RydW1lbnQgbWFrZXIgYW5kIHBhdHJpb3RpYyBsZWFkZXIgb2YgdGhlIFJldm9sdXRpb25hcnkgZXJhLgoJCglBIGJ1aWxkaW5nIGJvb20gYmVnYW4gYnkgdGhlIDE4NTBzLCBhbmQgaW4gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSAxOXRoIGNlbnR1cnkgdGhlIFJpdHRlbmhvdXNlIFNxdWFyZSBuZWlnaGJvcmhvb2QgYmVjYW1lIHRoZSBtb3N0IGZhc2hpb25hYmxlIHJlc2lkZW50aWFsIHNlY3Rpb24gb2YgdGhlIGNpdHksIHRoZSBob21lIG9mIFBoaWxhZGVscGhpYSZhY3V0ZTtzIOKAnFZpY3RvcmlhbiBhcmlzdG9jcmFjeS7igJ0gU29tZSBtYW5zaW9ucyBmcm9tIHRoYXQgcGVyaW9kIHN0aWxsIHN1cnZpdmUgb24gdGhlIHN0cmVldHMgZmFjaW5nIHRoZSBzcXVhcmUsIGFsdGhvdWdoIG1vc3Qgb2YgdGhlIGdyYW5kIGhvbWVzIGdhdmUgd2F5IHRvIGFwYXJ0bWVudCBidWlsZGluZ3MgYWZ0ZXIgMTkxMy4KCQoJSW4gMTgxNiwgbG9jYWwgcmVzaWRlbnRzIGxvYW5lZCBmdW5kcyB0byB0aGUgY2l0eSB0byBidXkgYSBmZW5jZSB0byBlbmNsb3NlIFJpdHRlbmhvdXNlIFNxdWFyZS4gSW4gdGhlIGRlY2FkZSBiZWZvcmUgdGhlIENpdmlsIFdhciwgdGhlIFNxdWFyZSBib2FzdGVkIG5vdCBvbmx5IHRyZWVzIGFuZCB3YWxrd2F5cywgYnV0IGFsc28gZm91bnRhaW5zIGRvbmF0ZWQgYnkgbG9jYWwgYmVuZWZhY3RvcnMg4oCTIHByZW1hdHVyZWx5LCBpdCB0dXJuZWQgb3V0LCBmb3IgdGhlIGZvdW50YWlucyBjcmVhdGVkIHNvIG11Y2ggbXVkIHRoYXQgQ2l0eSBDb3VuY2lsIG9yZGVyZWQgdGhlbSByZW1vdmVkLiBUaGUgc3F1YXJlJmFjdXRlO3MgcHJlc2VudCBsYXlvdXQgZGF0ZXMgZnJvbSAxOTEzLCB3aGVuIHRoZSBuZXdseSBmb3JtZWQgUml0dGVuaG91c2UgU3F1YXJlIEltcHJvdmVtZW50IEFzc29jaWF0aW9uIGhlbHBlZCBmdW5kIGEgcmVkZXNpZ24gYnkgUGF1bCBQaGlsaXBwZSBDcmV0LCBhIEZyZW5jaC1ib3JuIGFyY2hpdGVjdCB3aG8gY29udHJpYnV0ZWQgdG8gdGhlIGRlc2lnbiBvZiB0aGUgQmVuamFtaW4gRnJhbmtsaW4gUGFya3dheSBhbmQgdGhlIFJvZGluIE11c2V1bS4gQWx0aG91Z2ggc29tZSBjaGFuZ2VzIGhhdmUgYmVlbiBtYWRlIHNpbmNlIHRoZW4sIHRoZSBzcXVhcmUgc3RpbGwgcmVmbGVjdHMgQ3JldCZhY3V0ZTtzIG9yaWdpbmFsIHBsYW4uCgkKCTxoMz5MYXlvdXQgPC9oMz4KCQoJVGhlIG1haW4gd2Fsa3dheXMgYXJlIGRpYWdvbmFsLCBiZWdpbm5pbmcgYXQgdGhlIGNvcm5lcnMgYW5kIG1lZXRpbmcgYXQgYSBjZW50cmFsIG92YWwuIFRoZSBwbGF6YSwgd2hpY2ggY29udGFpbnMgYSBsYXJnZSBwbGFudGVyIGJlZCBhbmQgYSByZWZsZWN0aW5nIHBvb2wsIGlzIHN1cnJvdW5kZWQgYnkgYSBiYWx1c3RyYWRlIGFuZCByaW5nZWQgYnkgYSBjaXJjdWxhciB3YWxrLiBDbGFzc2ljYWwgdXJucywgbWFueSBiZWFyaW5nIHJlbGllZiBmaWd1cmVzIG9mIGFuY2llbnQgR3JlZWtzLCByZXN0IG9uIHBlZGVzdGFscyBhdCB0aGUgZW50cmFuY2VzIGFuZCBlbHNld2hlcmUgdGhyb3VnaG91dCB0aGUgc3F1YXJlLiBPcm5hbWVudGFsIGxhbXBwb3N0cyBjb250cmlidXRlIHRvIGFuIGFpciBvZiBvbGQtZmFzaGlvbmVkIGdlbnRpbGl0eS4gQSBsb3cgZmVuY2Ugc3Vycm91bmRzIHRoZSBzcXVhcmUsIGFuZCBiYWx1c3RyYWRlcyBhZG9ybiB0aGUgY29ybmVyIGVudHJhbmNlcy4gT2FrcywgbWFwbGVzLCBsb2N1c3RzLCBwbGFuZSB0cmVlcywgYW5kIG90aGVycyBzdGFuZCB3aXRoaW4gYW5kIGFyb3VuZCB0aGUgZW5jbG9zdXJlLCBhbmQgdGhlIGZsb3dlcmJlZHMgYW5kIGJsb29taW5nIHNocnVicyBhZGQgYSBzcGxhc2ggb2YgY29sb3IgaW4gc2Vhc29uLgoJCglSaXR0ZW5ob3VzZSBTcXVhcmUgaXMgdGhlIHNpdGUgb2YgYW5udWFsIGZsb3dlciBtYXJrZXRzIGFuZCBvdXRkb29yIGFydCBleGhpYml0aW9ucy4gTW9yZSB0aGFuIGFueSBvZiB0aGUgb3RoZXIgc3F1YXJlcywgaXQgYWxzbyBmdW5jdGlvbnMgYXMgYSBuZWlnaGJvcmhvb2QgcGFyay4gT2ZmaWNlIHdvcmtlcnMgZWF0IHRoZWlyIGx1bmNoZXMgb24gdGhlIGJlbmNoZXM7IHBhcmVudHMgYnJpbmcgY2hpbGRyZW4gdG8gcGxheTsgYW5kIG1hbnkgcGVvcGxlIHN0cm9sbCB0aHJvdWdoIHRvIGFkbWlyZSB0aGUgcGxhbnRzLCBzY3VscHR1cmVzLCBvciB0aGUgZmF0IGFuZCBzYXVjeSBzcXVpcnJlbHMuCgkKCTxoMz5QdWJsaWMgQXJ0IDwvaDM+CgkKCUxpa2UgTG9nYW4gU3F1YXJlLCB5b3UgY2FuIHNlZSBzZXZlcmFsIG9mIHRoZSBjaXR5JmFjdXRlO3MgYmVzdC1sb3ZlZCBvdXRkb29yIHNjdWxwdHVyZXMgaW4gUml0dGVuaG91c2UgU3F1YXJlLiBUaGUgZHJhbWF0aWMgTGlvbiBDcnVzaGluZyBhIFNlcnBlbnQgYnkgdGhlIEZyZW5jaCBSb21hbnRpYyBzY3VscHRvciBBbnRvaW5lLUxvdWlzIEJhcnllIGlzIGluIHRoZSBjZW50cmFsIHBsYXphLiBPcmlnaW5hbGx5IGNyZWF0ZWQgaW4gMTgzMiwgdGhlIHdvcmsgaXMgQmFyeWUmYWN1dGU7cyBhbGxlZ29yeSBvZiB0aGUgRnJlbmNoIFJldm9sdXRpb24gb2YgMTgzMCwgc3ltYm9saXppbmcgdGhlIHBvd2VyIG9mIGdvb2QgKHRoZSBsaW9uKSBjb25xdWVyaW5nIGV2aWwgKHRoZSBzZXJwZW50KS4gVGhpcyBicm9uemUgY2FzdCB3YXMgbWFkZSBhYm91dCAxODkwLgoJCglBdCB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjZW50cmFsIHBsYXphLCB3aXRoaW4gdGhlIHJlZmxlY3RpbmcgcG9vbCwgaXMgUGF1bCBNYW5zaGlwJmFjdXRlO3MgRHVjayBHaXJsIG9mIDE5MTEsIGEgbHlyaWNhbCBicm9uemUgb2YgYSB5b3VuZyBnaXJsIGNhcnJ5aW5nIGEgZHVjayB1bmRlciBvbmUgYXJtIOKAkyBhbiBlYXJseSB3b3JrIGJ5IHRoZSBzYW1lIHNjdWxwdG9yIHdobyBkZXNpZ25lZCB0aGUgQWVybyBNZW1vcmlhbCBmb3IgTG9nYW4gU3F1YXJlLiBBIGZhdm9yaXRlIG9mIHRoZSBjaGlsZHJlbiBpcyBBbGJlcnQgTGFlc3NsZSZhY3V0ZTtzIEJpbGx5LCBhIHR3by1mb290LWhpZ2ggYnJvbnplIGJpbGx5IGdvYXQgaW4gYSBzbWFsbCBwbGF6YSBoYWxmd2F5IGRvd24gdGhlIHNvdXRod2VzdCB3YWxrLiBCaWxseSZhY3V0ZTtzIGhlYWQsIGhvcm5zLCBhbmQgc3BpbmUgaGF2ZSBiZWVuIHdvcm4gdG8gYSBzaGlueSBnb2xkIGNvbG9yIGJ5IGNvdW50bGVzcyBzbWFsbCBhZG1pcmVycy4KCQoJSW4gYSBzaW1pbGFyIHBsYXphIGluIHRoZSBub3J0aGVhc3Qgd2Fsa3dheSBzdGFuZHMgdGhlIEV2ZWx5biBUYXlsb3IgUHJpY2UgTWVtb3JpYWwgU3VuZGlhbCwgYSBzY3VscHR1cmUgb2YgdHdvIGNoZWVyZnVsLCBuYWtlZCBjaGlsZHJlbiB3aG8gaG9sZCBhbG9mdCBhIHN1bmRpYWwgaW4gdGhlIGZvcm0gb2YgYSBnaWFudCBzdW5mbG93ZXIgaGVhZC4gQ3JlYXRlZCBieSBQaGlsYWRlbHBoaWEgYXJ0aXN0IEJlYXRyaWNlIEZlbnRvbiwgdGhlIHN1bmRpYWwgbWVtb3JpYWxpemVzIGEgd29tYW4gd2hvIHNlcnZlZCBhcyB0aGUgcHJlc2lkZW50IG9mIHRoZSBSaXR0ZW5ob3VzZSBTcXVhcmUgSW1wcm92ZW1lbnQgQXNzb2NpYXRpb24gYW5kIFJpdHRlbmhvdXNlIFNxdWFyZSBGbG93ZXIgQXNzb2NpYXRpb24uIEluIHRoZSBmbG93ZXIgYmVkIGJldHdlZW4gdGhlIHN1bmRpYWwgYW5kIHRoZSBjZW50cmFsIHBsYXphIGlzIENvcm5lbGlhIFZhbiBBLiBDaGFwaW4mYWN1dGU7cyBHaWFudCBGcm9nLCBhIGxhcmdlIGFuZCBzbGVlayBncmFuaXRlIGFtcGhpYmlhbi4gQ29udGludWluZyB0aGUgYW5pbWFsIHRoZW1lLCB0d28gc21hbGwgc3RvbmUgZG9ncywgYWRkZWQgaW4gMTk4OCwgcGVyY2ggb24gdGhlIGJhbHVzdHJhZGVzIGF0IHRoZSBzb3V0aHdlc3QgY29ybmVyIGVudHJhbmNlLgoJCgk8aDM+QXQgTmlnaHQgPC9oMz4KCQoJT25jZSBwcmVkb21pbmFudGx5IGEgZGF5dGltZSBkZXN0aW5hdGlvbiwgUml0dGVuaG91c2UgU3F1YXJlIGlzIG5vdyBhIHBvcHVsYXIgbmlnaHRzcG90IGFzIHdlbGwsIHdpdGggYSBzdHJpbmcgb2YgcmVzdGF1cmFudHMgLSBpbmNsdWRpbmcgUm91Z2UsIERldm9uLCBQYXJjIGFuZCBCYXJjbGF5IFByaW1lIC0gdGhhdCBoYXZlIHNwcm91dGVkIHVwIGFsb25nIHRoZSBlYXN0IHNpZGUgb2YgdGhlIHBhcmsgb24gMTh0aCBTdHJlZXQuCgkKCVNvIHRoZXNlIGRheXMsIHlvdSBjYW4gdGFrZSBpbiB0aGUgc2VyZW5pdHkgb2YgdGhlIG5hdHVyYWwgbGFuZHNjYXBlIGZyb20gYSBwYXJrIGJlbmNoIGluIHRoZSBzdW5zaGluZSBhbmQgdGhlbiBzaXAgY29ja3RhaWxzIHVuZGVyIHRoZSBzdGFycyBhdCBvbmUgb2YgbWFueSBjYW5kbGVsaXQgb3V0ZG9vciB0YWJsZXMuCgkKCU1lYW53aGlsZSwgc2V2ZXJhbCBtb3JlIHJlc3RhdXJhbnRzLCBiYXJzIGFuZCBjbHVicyBoYXZlIG9wZW5lZCBhbG9uZyB0aGUgc3Vycm91bmRpbmcgYmxvY2tzIGluIHJlY2VudCB5ZWFycywgbGlrZSBQYXJjLCBUcmlhLCBDb250aW5lbnRhbCBNaWR0b3duLCBBbGZhLCBXYWxudXQgUm9vbSwgYW5kIFR3ZW50eSBNYW5uaW5nIGp1c3QgdG8gbmFtZSBhIGZldy4KCScsCgkicG9zdF9pbWFnZXMiICAgPT4gYXJyYXkoCgkJIiRkdW1teV9pbWFnZV91cmwvYTE5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTIwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvYTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9hMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2E5LmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnQXR0cmFjdGlvbnMnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnTXVzZXVtJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDc3NykgNjY2LTY2NjYnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGZhaXJtb3VudHBhcmsuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy5mYWlybW91bnRwYXJrLm9yZy9yaXR0ZW5ob3VzZXNxdWFyZS5hc3AnLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vZmFpcm1vdW50cGFyaycsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vZmFpcm1vdW50cGFyaycsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDk6MDAtMTc6MDAiLCJUdSAwOTowMC0xNzowMCIsIldlIDA5OjAwLTE3OjAwIiwiVGggMDk6MDAtMTc6MDAiLCJGciAwOTowMC0xNzowMCIsIlNhIDA5OjAwLTE5OjAwIiwiU3UgMDk6MDAtMTc6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ0xvZXdzIFBoaWxhZGVscGhpYSBIb3RlbCcsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJCgk8aDM+T1ZFUlZJRVcgPC9oMz4KCQoJT25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBhcmNoaXRlY3R1cmFsIHdvcmtzIG9mIHRoZSAyMHRoIENlbnR1cnksIHRoZSBQU0ZTIChQaGlsYWRlbHBoaWEgU2F2aW5ncyBGdW5kIFNvY2lldHkpIEJ1aWxkaW5nIGhhcyBiZWVuIGNvbnZlcnRlZCBpbnRvIHRoZSBuZXcgNTg1LXJvb20gTG9ld3MgUGhpbGFkZWxwaGlhIEhvdGVsLiBEZXNpZ25lZCBieSBHZW9yZ2UgSG93ZSBhbmQgV2lsbGlhbSBMZXNjYXplLCB0aGUgYnVpbGRpbmcgd2FzIGVyZWN0ZWQgaW4gMTkzMiBhbmQgd2FzIHRoZSBmaXJzdCBpbnRlcm5hdGlvbmFsIHN0eWxlLCBtb2Rlcm5pc3QgaGlnaC1yaXNlIGJ1aWxkaW5nLgoJCglUb2RheSwgdGhlIGJ1aWxkaW5nIHJldGFpbnMgcGVyaW9kIGRldGFpbHMsIHN1Y2ggYXMgQ2FydGllciBjbG9ja3MsIGJhbmsgdmF1bHQgZG9vcnMgYW5kIHBvbGlzaGVkIGdyYW5pdGUsIGFzIHdlbGwgYXMgbW9kZXJuIGFtZW5pdGllcyBzdWNoIGFzIGEgZnVsbCBzZXJ2aWNlIGhlYWx0aCBzcGEsIGJ1c2luZXNzIGNlbnRlciwgc3Bpbm5pbmcgcm9vbSwgbGFwIHBvb2wgYW5kIG92ZXIgNDAsMDAwIHNxdWFyZSBmZWV0IG9mIG11bHRpLXB1cnBvc2Ugc3BhY2UsIGluY2x1ZGluZyB0aHJlZSBiYWxscm9vbXMuCgkKCTxoMz5USEUgSE9URUwgPC9oMz4KCQoJTG9ld3MgSG90ZWxzIGlzIHByb3VkIHRvIGhhdmUgcmVzdG9yZWQgdGhlIGxhbmRtYXJrIFBTRlMgQnVpbGRpbmcgdG8gaXRzIG9yaWdpbmFsIGdyYW5kZXVyLCB3aGlsZSB0cmFuc2Zvcm1pbmcgaXQgaW50byBhIGhvdGVsIHRoYXQgcGVvcGxlIGZyb20gYWxsIG92ZXIgdGhlIHdvcmxkIGNhbiBleHBlcmllbmNlIGFuZCBlbmpveS4KCQoJVGhlIGhvdGVsIHRha2VzIGZ1bGwgYWR2YW50YWdlIG9mIHRoZSBidWlsZGluZyZhY3V0ZTtzIGhpc3RvcmljYWwgZmVhdHVyZXMuIFRoZSB0aHJlZS1zdG9yeSBmb3JtZXIgYmFua2luZyByb29tIGhhcyBiZWVuIHByZXNlcnZlZCBhcyBNaWxsZW5uaXVtIEhhbGwsIGEgZHJhbWF0aWMgYmFucXVldCBzcGFjZS4gVGhlIGhpc3RvcmljLCByb29mdG9wIGJvYXJkcm9vbSBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBzcGVjdGFjdWxhciBzZXR0aW5nIGZvciBjYXRlcmVkIGV2ZW50cy4KCQoJVGhlIGJ1aWxkaW5nIHJldGFpbnMgcGVyaW9kIGRldGFpbHMsIHN1Y2ggYXMgQ2FydGllciBjbG9ja3MsIGJhbmsgdmF1bHQgZG9vcnMgYW5kIHBvbGlzaGVkIGdyYW5pdGUsIGFzIHdlbGwgYXMgbW9kZXJuIGFtZW5pdGllcyBzdWNoIGFzIGEgZnVsbCBzZXJ2aWNlIGhlYWx0aCBzcGEsIGJ1c2luZXNzIGNlbnRlciwgc3Bpbm5pbmcgcm9vbSwgbGFwIHBvb2wgYW5kIG92ZXIgNDAsMDAwIHNxdWFyZSBmZWV0IG9mIG11bHRpLXB1cnBvc2Ugc3BhY2UsIGluY2x1ZGluZyB0aHJlZSBiYWxscm9vbXMuCgkKCUZlZWwgdGhlIGNvbWZvcnRzIG9mIGhvbWUgaW4gYWNjb21tb2RhdGlvbnMgdGhhdCBwZXJmZWN0bHkgYmFsYW5jZSB0aGUgY29udGVtcG9yYXJ5IHdpdGggdGhlIGVsZWdhbnQuIFdoZXJlIGV2ZXJ5IGRldGFpbCBmcm9tIHRoZSBsb2Z0eSB0ZW4tZm9vdCBjZWlsaW5ncyB0byB0aGUgbWlsZXMgb2Ygc3BlY3RhY3VsYXIgdmlld3MgaXMgZGVzaWduZWQgdG8gc2VydmUgb25lIHB1cnBvc2Ug4oCTIHlvdXJzLiBXaGV0aGVyIHlvdSZhY3V0ZTtyZSB3b3JraW5nIGhhcmQgb3IgcGxheWluZyBoYXJkLCB5b3UgY2FuIGFsd2F5cyByZXN0IGVhc3kuCgkKCVRoZSBMb2V3cyBpcyBwZXJmZWN0IGZvciBmYW1pbGllcy4gVGhlIGhvdGVsIG9mZmVycyBzcGVjaWFsIGtpZC1mcmllbmRseSBwcm9ncmFtcyBhbmQgZmVhdHVyZXMgZGVkaWNhdGVkIHRvIHRoZSBwcmluY2lwbGU6IOKAnHRoZSBmYW1pbHkgdGhhdCBzdGF5cyB0b2dldGhlciBwbGF5cyB0b2dldGhlcuKAnSAoYW5kIHRoYXQgaW5jbHVkZXMgZm91ci1sZWdnZWQgZmFtaWx5IG1lbWJlcnMgdG9vKS4KCQoJTGVhcm4gbW9yZSBhYm91dCBMb2V3cyBTaWduYXR1cmUgRmFtaWx5IFRyYXZlbCBCZW5lZml0cy4KCURJTklORyBBVCBUSEUgSE9URUwKCQoJPGgzPlNvbGVmb29kIDwvaDM+CgkKCVNvbGVGb29kIGlzIGEgZnVzaW9uIG9mIHNlYWZvb2QgYW5kIGN1dHRpbmcgZWRnZSBjdWxpbmFyeSBleHBlcnRpc2UsIG9mZmVyaW5nIHNlYWZvb2QgaW5zcGlyZWQgZGlzaGVzIGF0IGJyZWFrZmFzdCwgbHVuY2ggYW5kIGRpbm5lci4gR3Vlc3RzIGNhbiBlbmpveSBhIGNvenkgdGFibGUgZm9yIHR3byBvciBtYWtlIG5ldyBmcmllbmRzIGF0IG9uZSBvZiB0aGUgY29tbXVuYWwgdGFibGVzIGZlYXR1cmluZyBhIGNlbnRlciBkaXNwbGF5IG9mIHJpdmVyIHJvY2tzIGFuZCBjYW5kbGVzLgoJCglJbiBvcmRlciB0byBjcmVhdGUgYSBtZW1vcmFibGUgY3VsaW5hcnkgZXhwZXJpZW5jZSBpbiBhbiB1cHNjYWxlLCBoaXAgZW52aXJvbm1lbnQgd2hpY2ggbWl4ZXMgZWNsZWN0aWMgY29vbCB3aXRoIGNsYXNzaWMgc3R5bGUsIFNvbGVmb29kIFJlc3RhdXJhbnQgY29udGludWVzIHRvIGNyZWF0ZSBleGNpdGluZyBmb29kIGFuZCBkcmlua3MgdGhhdCBhcmUgbWl4ZWQgd2l0aCBqdXN0IHRoZSByaWdodCBhbW91bnQgb2YgYXR0aXR1ZGUuIFNvbGVGb29kIGhhcyByZWNlaXZlZCBsb2NhbCBhbmQgcmVnaW9uYWwgYWNjb2xhZGVzIGZyb20gdGhlIG1lZGlhIGluY2x1ZGluZyAyMDA4IEJlc3Qgb2YgUGhpbGFkZWxwaGlhIEF3YXJkLCBQaGlsYWRlbHBoaWEgQ2l0eSBQYXBlciBCZXN0IEJhciBhbmQgQmVzdCBTZWFmb29kIHJlc3RhdXJhbnQuCgkKCVNvbGVGb29kIGZlYXR1cmVzIGhhcmQgdG8gZmluZCB3aW5lcywgc2VydmVkIGJ5IHRoZSBnbGFzcywgYm90dGxlIGFuZCBoYWxmIGJvdHRsZSBmb3Igd2hlbiBhIGJvdHRsZSBpcyB0b28gbXVjaCBhbmQgYSBnbGFzcyBpcyB0b28gbGl0dGxlLgoJCglTcGVjaWFsIFByaXggRml4ZSBEaW5uZXIgT2ZmZXIKCQoJU29sZUZvb2QgaXMgb2ZmZXJpbmcgYSBzcGVjaWFsIOKAnERpdmVyc2lmeSB5b3VyIFBhbGF0ZeKAnSBwcml4LWZpeGUgZGlubmVyIG1lbnUgdGhyb3VnaCAyMDEwLiBGb3IgJDI5LCB5b3UgZ2V0IHRvIGNob29zZSBhbiBlbnRyZWUgYW5kIHR3byDigJxpbnZlc3RtZW50cyzigJ0gd2hpY2ggY2FuIGJlIGFuIGFwcGV0aXplciwgYSBnbGFzcyBvZiB3aW5lLCBhIGNvY2t0YWlsLCBhIGRlc3NlcnQgb3IgYSBkcmFmdCBiZWVyLgoJCglUbyBtYWtlIGEgcmVzZXJ2YXRpb24gYXQgU29sZUZvb2QgcmVzdGF1cmFudCBwbGVhc2UgY2FsbCAoMjE1KSAyMzEtNzMwMCBvciB2aXNpdCBvcGVudGFibGUuY29tCgkKCTxoMz5Ib3VyczogPC9oMz4KCQoJQnJlYWtmYXN0OiBEYWlseSwgNjozMCBhbSDigJMgMTE6MDAgYW0KCUJydW5jaDogU2F0dXJkYXkgJiBTdW5kYXksMTE6MzAgYW0g4oCTIDI6MDAgcG0LCglMdW5jaDogTW9uZGF5IOKAkyBGcmlkYXksIDExOjMwIGFtIOKAkyAyOjAwIHBtCwoJRGlubmVyOiBEYWlseSwgNTozMCBwbSDigJMgMTA6MDAgcG0KCQoJPGgzPlNvbGVGb29kIExvdW5nZSAmIEhhcHB5IEhvdXIgPC9oMz4KCQoJU29sZUZvb2QgTG91bmdlIHByb3ZpZGVzIG9uZSBvZiB0aGUgYmVzdCBoYXBweSBob3VyIG9wdGlvbnMgaW4gdGhlIGNpdHkuIEdhdGhlciB3aXRoIHlvdXIgZnJpZW5kcyBhbmQgdGFrZSBhZHZhbnRhZ2Ugb2Ygc29tZSBncmVhdCBzcGVjaWFscywgaW5jbHVkaW5nIGhvcnMgZOKAmW9ldXZyZXMsIHdpbmVzIGJ5IHRoZSBnbGFzcywgZHJhZnQgYmVlciwgYW5kIGEgd2lkZSBzZWxlY3Rpb24gb2YgbWFydGluaXMgZnJvbSA1IHRvIDcgcC5tLiBkYWlseS4gVGhlIGxvdW5nZSBpcyB0aGUgcGVyZmVjdCBwbGFjZSB0byBtZWV0IHVwIHdpdGggb2xkIGZyaWVuZHMgYW5kIG1ha2UgbmV3IG9uZXMuCgkKCVNvbGVGb29kIExvdW5nZSBoYXMgZWFybmVkIHJlY29nbml0aW9uIGZvciBpdHMgY3JlYXRpdmUgYmFyIG1lbnUgdGhhdCBpbmNsdWRlcyBhIHdpZGUgYXJyYXkgb2Ygc2lnbmF0dXJlIGRyaW5rcyBhbmQgb25lIG9mIHRoZSBiZXN0IG1hcnRpbmlzIGluIFBoaWxseS4KCQoJU29sZWZvb2QgTG91bmdlIEhvdXJzOiBEYWlseSwgMTE6MzAgYW0g4oCTIDI6MDAgYW0KCUxvdW5nZSBNZW51IGlzIG9mZmVyZWQgZGFpbHk6IDExOjAwIGFtIOKAkyAxMjowMCBhbQoJCglTb2xzdGljZSBhbmQgU29sZUZvb2QgU3BlY2lhbCBFdmVudHMgJiBQcml2YXRlIFBhcnRpZXMKCQoJU29sc3RpY2UgYW5kIFNvbGVGb29kIHByb3ZpZGUgZmFidWxvdXMgc2V0dGluZ3MgZm9yIHJlY2VwdGlvbnMsIHByaXZhdGUgcGFydGllcyBhbmQgbWVldGluZ3MuIFNvbHN0aWNlIFByaXZhdGUgRGluaW5nIFJvb20gaXMgYSBncmVhdCBwbGFjZSB0byBob3N0IGNvY2t0YWlscyByZWNlcHRpb25zLCBkaW5uZXJzIGFuZCBtZWV0aW5ncy4KCQoJU29sZUZvb2QgaXMgYXZhaWxhYmxlIGZvciBwcml2YXRlIHBhcnRpZXMgYW5kIGV2ZW50cy4gVGhlIG1haW4gZGluaW5nIHJvb20gY2FuIGFjY29tbW9kYXRlIHVwIHRvIDg1IHBlb3BsZTsgZWFjaCBvZiB0aGUgdHdvIGNvbW11bmFsIHRhYmxlcyBzZWF0cyAxNjsgVGhlIEJhciBhbmQgTG91bmdlIGF0IFNvbGVGb29kIHdpdGggaXRzIGx1eGUgZGVjb3IgYW5kIGludml0aW5nIGJhbnF1ZXR0ZXMgYW5kIHdoaXRlIGxlYXRoZXIgY2hhaXJzIGNhbiBhY2NvbW1vZGF0ZSAyMDAgZm9yIGNvY2t0YWlscy4KCQoJTWVudXMgY2FuIGJlIGN1c3RvbWl6ZWQgdG8gbWVldCB5b3VyIG5lZWRzLCBpbmNsdWRpbmcgZmFtaWx5LXN0eWxlLgoJCgk8aDM+U3RhcmJ1Y2tzIE1vcm5pbmcgQ29mZmVlIEJhciA8L2gzPgoJCglEYWlseSwgNjozMCBhbSDigJMgMTA6MzAgYW0KCQoJU29sZUZvb2QgUmVzdGF1cmFudCBpcyBwcm91ZCB0byBiZSBzZXJ2aW5nIFN0YXJidWNrcy4gQ29tZSBpbiBhbmQgZW5qb3kgYSBmcmVzaCBjdXAgb2YgY29mZmVlIGR1cmluZyB5b3VyIG1vcm5pbmcgcnVzaC4gVGhlIENvZmZlZSBCYXIgYWxzbyBvZmZlciBzbWFsbCBicmVha2Zhc3QgaXRlbXMgZm9yIHlvdXIgZW5qb3ltZW50LgoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczExLmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnSG90ZWxzJywgJ0ZlYXR1cmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDExMSkgMTExLTAwMDAnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGxvZXdzaG90ZWxzLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cubG9ld3Nob3RlbHMuY29tL2VuL2hvdGVscy9waGlsYWRlbHBoaWEtaG90ZWwvb3ZlcnZpZXcuYXNweCcsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9sb2V3c2hvdGVscycsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vbG9ld3Nob3RlbHMnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIzOjAwIiwiVHUgMDc6MDAtMjM6MDAiLCJXZSAwNzowMC0yMzowMCIsIlRoIDA3OjAwLTIzOjAwIiwiRnIgMDc6MDAtMjM6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgID0+ICdFbWJhc3N5IFN1aXRlcyBQaGlsYWRlbHBoaWEnLAoJInBvc3RfY29udGVudCIgICAgID0+ICcKCVRoZSBuZXdseSByZW5vdmF0ZWQgRW1iYXNzeSBTdWl0ZXMgUGhpbGFkZWxwaGlhIOKAkyBDZW50ZXIgQ2l0eSBob3RlbCBpcyBjb252ZW5pZW50bHkgc2l0dWF0ZWQgaW4gdGhlIGhlYXJ0IG9mIGRvd250b3duIFBoaWxhZGVscGhpYSwgUGVubnN5bHZhbmlhIGFuZCBQaGlsYWRlbHBoaWEmYWN1dGU7cyBDZW50ZXIgQ2l0eSBidXNpbmVzcyBkaXN0cmljdC4gVGhpcyBob3RlbCBpbiBQaGlsYWRlbHBoaWEgaXMgbG9jYXRlZCBvbmx5IGVpZ2h0IG1pbGVzIGZyb20gUGhpbGFkZWxwaGlhIEludGVybmF0aW9uYWwgQWlycG9ydCBhbmQganVzdCBtaW51dGVzIGZyb20gdG9wIFBoaWxhZGVscGhpYSBhdHRyYWN0aW9ucywgaW5jbHVkaW5nOgoJCglQaGlsYWRlbHBoaWEgTXVzZXVtIG9mIEFydAoJUGhpbGFkZWxwaGlhIENpdHkgSGFsbAoJUGhpbGFkZWxwaGlhIFpvbwoJRnJhbmtsaW4gSW5zdGl0dXRlCglIaXN0b3JpYyBsYW5kbWFya3Mgc3VjaCBhcyB0aGUgTGliZXJ0eSBCZWxsICYgSW5kZXBlbmRlbmNlIEhhbGwKCVBlbm5zeWx2YW5pYSBDb252ZW50aW9uIENlbnRlcgoJVW5pdmVyc2l0eSBvZiBQZW5uc3lsdmFuaWEKCVVwb24gZW50ZXJpbmcgdGhlc2Ugc3VpdGVzIGF0IHRoZSBFbWJhc3N5IFN1aXRlcyBQaGlsYWRlbHBoaWEg4oCTIENlbnRlciBDaXR5IGhvdGVsLCB0aGUgc3BhY2lvdXNuZXNzIG9mIHRoZSBsaXZpbmcgcm9vbSBnaXZlcyB3YXkgdG8gdGhlIHdhcm10aCBvZiBlYWNoIG9mIHRoZSBhcHBvaW50bWVudHMuIEFsbCBvZiB0aGUgbmV3bHkgcmVub3ZhdGVkIDI4OCB0d28tcm9vbSBhY2NvbW1vZGF0aW9ucyBmZWF0dXJlIGFuIGVudHJ5IGZveWVyLCBxdWVlbi1zaXplIHNvZmEgYmVkLCBhbmQgYSByYW5nZSBvZiBpbi1zdWl0ZSBhbWVuaXRpZXMsIGluY2x1ZGluZzogd2VsbC1saXQgd29yayBhcmVhLCBoaWdoLXNwZWVkIEludGVybmV0IGFjY2VzcywgZGluaW5nIGFyZWEgd2l0aCBiYWxjb255LCBraXRjaGVuIGFyZWEgd2l0aCBtaWNyb3dhdmUsIGNvZmZlZSBtYWtlciwgcmVmcmlnZXJhdG9yLCBhbmQgd2V0IGJhci4KCQoJR3Vlc3RzIG9mIHRoZSBFbWJhc3N5IFN1aXRlcyBQaGlsYWRlbHBoaWEg4oCTIENlbnRlciBDaXR5IGhvdGVsIGluIGRvd250b3duIFBoaWxhZGVscGhpYSBhcmUgYWxzbyB3ZWxjb21lIHRvIGVuam95IGEgcmFuZ2Ugb2YgaG90ZWwtd2lkZSBhbWVuaXRpZXMgYW5kIHNlcnZpY2VzLCBpbmNsdWRpbmc6IGZpdG5lc3MgY2VudGVyLCBob3RlbCBidXNpbmVzcyBjZW50ZXIsIGFuZCBtZWV0aW5nIHJvb21zLgoJCglBIGRlbGljaW91cywgY29tcGxpbWVudGFyeSBjb29rZWQtdG8tb3JkZXIgYnJlYWtmYXN0IGlzIG9mZmVyZWQgZWFjaCBtb3JuaW5nLCBhbmQgYSBob3RlbCBNYW5hZ2VyJmFjdXRlO3MgUmVjZXB0aW9uIGV2ZXJ5IG5pZ2h0IOKAkyBmZWF0dXJpbmcgY29tcGxpbWVudGFyeSByZWZyZXNobWVudHMgYW5kIGdyZWF0IGNvbXBhbnkuCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTEuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdIb3RlbHMnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDExMSkgMTExLTAwMDAnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGVtYmFzc3lzdWl0ZXMxLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly9lbWJhc3N5c3VpdGVzMS5oaWx0b24uY29tL2VuX1VTL2VzL2hvdGVsL1BITERURVMtRW1iYXNzeS1TdWl0ZXMtUGhpbGFkZWxwaGlhLUNlbnRlci1DaXR5LVBlbm5zeWx2YW5pYS9pbmRleC5kbycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9lbWJhc3N5c3VpdGVzMScsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vZW1iYXNzeXN1aXRlczEnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIzOjAwIiwiVHUgMDc6MDAtMjM6MDAiLCJXZSAwNzowMC0yMzowMCIsIlRoIDA3OjAwLTIzOjAwIiwiRnIgMDc6MDAtMjM6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgPT4gJ0RvdWJsZXRyZWUgSG90ZWwgUGhpbGFkZWxwaGlhJywKCSJwb3N0X2NvbnRlbnQiICAgID0+ICcKCVdpdGggNDM0IHJvb21zLCB0aGUgRG91YmxldHJlZSBIb3RlbCBpcyBhIGdyZWF0IG9wdGlvbiBmb3IgeW91ciB1cGNvbWluZyBzdGF5IGluIFBoaWxhZGVscGhpYS4KCQoJPGgzPkxvY2F0aW9uIDwvaDM+CgkKCUxvY2F0ZWQgcmlnaHQgb24gdGhlIEF2ZW51ZSBvZiB0aGUgQXJ0cyBhdCBCcm9hZCBhbmQgTG9jdXN0IFN0cmVldHMsIHRoaXMgaGlnaCByaXNlIG9jY3VwaWVzIG9uZSBvZiB0aGUgY2l0eSZhY3V0ZTtzIG1vc3QgaWRlYWwgbG9jYXRpb25zLiBUaGUgS2ltbWVsIENlbnRlciBmb3IgdGhlIFBlcmZvcm1pbmcgQXJ0cywgdGhlIEFjYWRlbXkgb2YgTXVzaWMsIGFuZCB0aGUgTWVycmlhbSBhbmQgV2lsbWEgVGhlYXRlcnMgYXJlIGFsbCB3aXRoaW4gYSBibG9jay4KCQoJVG8gdGhlIHdlc3QgeW91IGhhdmUgZ3JlYXQgc2hvcHBpbmcgYW5kIGRpbmluZyBpbiBSaXR0ZW5ob3VzZSBTcXVhcmUuIFRvIHRoZSBlYXN0IGFyZSBQaGlsYWRlbHBoaWEmYWN1dGU7cyBmYW1vdXMgaGlzdG9yaWMgYXR0cmFjdGlvbnMsIFNvdXRoIFN0cmVldCwgV2FzaGluZ3RvbiBTcXVhcmUgYW5kIE9sZCBDaXR5LgoJCgk8aDM+R3Vlc3QgUm9vbXMgPC9oMz4KCQoJU3BhY2lvdXMgYW5kIHdlbGwtYXBwb2ludGVkIGd1ZXN0IHJvb21zIG9mZmVyIHBhcm9yYW1pYyB2aWV3cyBvZiB0aGUgY2l0eSwgdHJhZGl0aW9uYWwgZMOpY29yLCBnZW5lcm91cyB3b3JrIGFyZWFzIGFuZCBoaWdoLXNwZWVkIGludGVybmV0IGFjY2Vzcy4gT3RoZXIgYW1lbml0aWVzIGluY2x1ZGUgYSByZXN0YXVyYW50LCBsb3VuZ2UgYW5kIGEgaGVhbHRoIGNsdWIgd2l0aCBhbiBpbmRvb3IgcG9vbC4KCQoJVGhlIERvdWJsZXRyZWUmYWN1dGU7cyBzcGFjaW91cyBndWVzdCByb29tcyBhcmUgZGVjb3JhdGVkIGluIGEgd2FybSBjb250ZW1wb3Jhcnkgc3R5bGUsIHdoaWNoIGluY2x1ZGVzIGEgSGVybWFuIE1pbGxlciBlcmdvbm9taWMgY2hhaXIgYXQgYW4gb3ZlcnNpemVkIGRlc2sgZmVhdHVyaW5nIHRhc2sgbGlnaHRpbmcgYW5kIGVhc3ktYWNjZXNzIHBvd2VyIHNvdXJjZS4gV29yayB3aXRoIGVhc2UgYW5kIGVmZmljaWVuY3kgZnJvbSB5b3VyIHJvb20sIHV0aWxpemluZyB0d28gZHVhbC1saW5lIHRlbGVwaG9uZXMgd2l0aCBkYXRhIHBvcnQsIHNwZWFrZXJwaG9uZSwgYW5kIHByaXZhdGUgdm9pY2VtYWlsLiBIaWdoLXNwZWVkIGludGVybmV0IGFjY2VzcyBlbnN1cmVzIHByb2R1Y3Rpdml0eSBieSBwcm92aWRpbmcgeW91IHdpdGggcXVpY2sgYW5kIGNvbnZlbmllbnQgYWNjZXNzIHRvIGVtYWlsIGFuZCB0aGUgSW50ZXJuZXQuCgkKCUFsbCByb29tcyBmZWF0dXJlIHRoZSBwb3B1bGFyIFN3ZWV0IERyZWFtcyBieSBEb3VibGV0cmVlIGJlZGRpbmcsIG9uZSBraW5nIG9yIHR3byBxdWVlbnMuCgkKCTxoMz5TdWl0ZXM8L2gzPgoJCglJZiB5b3UgcHJlZmVyIGFkZGl0aW9uYWwgc3BhY2UsIHRyeSBhIHN1aXRlLiBUaGUgSnVuaW9yIFN1aXRlIGlzIGFuIG92ZXJzaXplZCBndWVzdCByb29tIHdpdGggYSBzZWF0aW5nIGFyZWEgc2VwYXJhdGVkIGZyb20gdGhlIHNsZWVwaW5nIHNwYWNlIGJ5IGEgaGFsZiB3YWxsLiBGb3IgbW9yZSBwcml2YWN5LCByZXNlcnZlIGFuIGVsZWdhbnQgdHdvLXJvb20gc3VpdGUsIHdoaWNoIG9mZmVycyB0d2ljZSB0aGUgc3F1YXJlIGZvb3RhZ2Ugb2YgYSBzdGFuZGFyZCBndWVzdCByb29tLCB3aXRoIGEgZG9vciB0byBzZXBhcmF0ZSBiZWRyb29tIGFuZCBzaXR0aW5nIGFyZWFzLgoJCglUaGUgc3VpdGVzIGF0IHRoZSBEb3VibGV0cmVlIGFyZSBwZXJmZWN0IGZvciBidXNpbmVzcyBzdGF5cyB3aGVuIHlvdSBuZWVkIGNvbnZlbmllbnQgc3BhY2UgdG8gY29uZHVjdCBhIHNtYWxsIG1lZXRpbmcgb3IgdGhlIGFiaWxpdHkgdG8gc3ByZWFkIG91dCBhbmQgZ2V0IHRoZSBqb2IgZG9uZS4gR3Vlc3Qgc3VpdGUgbGl2aW5nIGFyZWFzIGFsc28gZmVhdHVyZSBhIHNsZWVwZXIgc29mYSwgZ3JlYXQgZm9yIHZhY2F0aW9uaW5nIGZhbWlsaWVzLiBBbmQgY2xvc2V0cyBpbiBib3RoIGFyZWFzIGVuc3VyZSB5b3UmYWN1dGU7bGwgaGF2ZSBwbGVudHkgb2Ygd2FyZHJvYmUgYW5kIGhhbmdpbmcgc3BhY2UgZm9yIHJlbG9jYXRpb24gb3IgZXh0ZW5kZWQgc3RheXMuCgkKCTxoMz5UaGUgU3RhbmRpbmcgTyBCaXN0cm8gYW5kIEJhciA8L2gzPgoJCglUaGUgRG91YmxldHJlZSBIb3RlbCBQaGlsYWRlbHBoaWEgYm9hc3RzIGEgZ3JlYXQgb3B0aW9uIGZvciBlbmpveWluZyBhIGJpdGUgYmVmb3JlIGhlYWRpbmcgb3V0IGludG8gdGhlIGNpdHk6IFRoZSBTdGFuZGluZyBPIEJpc3Ryby4KCQoJU3RvcCBpbiB0aGUgcmVzdGF1cmFudCAtIHdoaWNoIHNlcnZlcyBsdW5jaCBhbmQgZGlubmVyIGRhaWx5IC0gZm9yIGEgZHJpbmsgYW5kIHNvbWUgbGlnaHQgZmFyZS4gV2l0aCBpdHMgbG9jYXRpb24gcmlnaHQgb24gQnJvYWQgU3RyZWV0LCB5b3UmYWN1dGU7cmUgY2xvc2UgdG8gZXZlcnl0aGluZyB5b3UgY291bGQgZXZlciB3YW50IGluIGEgbmlnaHQgb24gdGhlIHRvd24uCgknLAoKCSJwb3N0X2ltYWdlcyIgPT4gYXJyYXkoCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTAuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczIuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdIb3RlbHMnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDExMSkgMTExLTAwMDAnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGRvdWJsZXRyZWUxLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly9kb3VibGV0cmVlMS5oaWx0b24uY29tL2VuX1VTL2R0L2hvdGVsL1BITEJMRFQtRG91YmxldHJlZS1Ib3RlbC1QaGlsYWRlbHBoaWEtUGVubnN5bHZhbmlhL2luZGV4LmRvJywKCSJ0d2l0dGVyIiAgICAgICA9PiAnaHR0cDovL3R3aXR0ZXIuY29tL2RvdWJsZXRyZWUxJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9kb3VibGV0cmVlMScsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDc6MDAtMjI6MDAiLCJUdSAwNzowMC0yMjowMCIsIldlIDA3OjAwLTIyOjAwIiwiVGggMDc6MDAtMjI6MDAiLCJGciAwNzowMC0yMjowMCIsIlNhIDA3OjAwLTIzOjAwIiwiU3UgMDc6MDAtMjM6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ1BoaWxhZGVscGhpYSBNYXJyaW90dCBEb3dudG93bicsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJR2V0IHJlYWR5IHRvIHN0YXkgYW5kIHBsYXkgYXQgdGhlIG5ldyBhbG9mdCBQaGlsYWRlbHBoaWEgQWlycG9ydCEKCQoJVGhpcyBpbmNyZWRpYmx5IG1vZGVybiBob3RlbCBpcyBsb2NhdGVkIGp1c3QgZml2ZSBtaW51dGVzIGZyb20gUGhpbGFkZWxwaGlhIEludGVybmF0aW9uYWwgQWlycG9ydCwgb2ZmZXJpbmcgYSBncmVhdCBjb252ZW5pZW5jZSB0byB0cmF2ZWxlcnMgbG9va2luZyBmb3IgZnJlc2ggYW5kIGZ1biBhY2NvbW1vZGF0aW9ucy4KCTxoMz5HdWVzdCBSb29tcyA8L2gzPgoJCglUaGUgaG90ZWwmYWN1dGU7cyBzcGFjaW91cyBndWVzdCByb29tcyBtYWtlIHlvdSBmZWVsIHJpZ2h0IGF0IGhvbWUgd2l0aCBleHRyYSBsYXJnZSB3aW5kb3dzLCBpUG9kIGRvY2tpbmcgc3RhdGlvbnMsIGhpZ2gtc3BlZWQgd2lyZWxlc3MgaW50ZXJuZXQsIDQy4oCdIExDRCB0ZWxldmlzaW9ucyBhbmQga2luZy0gb3IgcXVlZW4tc2l6ZWQgYmVkcy4gTGlrZSB0aGUgcmVzdCBvZiB0aGUgaG90ZWwsIHRoZSBndWVzdCByb29tcyBmZWF0dXJlIHVsdHJhLW1vZGVybiB0b3VjaGVzIGFuZCBhIGZ1biwgZW5lcmdldGljIGRlc2lnbi4KCTxoMz5UaGluZ3MgdG8gRG8gPC9oMz4KCQoJV2FudCB0byBzb2NpYWxpemU/IFRoYXQmYWN1dGU7cyBlYXN5IGF0IGFsb2Z0IC0ganVzdCBzdGVwIGludG8gdGhlIHJlOm1peCBsb2JieSB0byByZWxheCBhbmQgY2hhdCwgd29yayBvbiB5b3VyIGxhcHRvcCBvciBzaG9vdCBhIGZldyBnYW1lcyBvZiBwb29sLiBSZWFkeSBmb3IgY29ja3RhaWwgaG91cj8gVGhlIHcgeHl6IGJhciBoYXMgZ3JlYXQgZHJpbmsgc3BlY2lhbHMgYW5kIHRhc3R5IGJhciBmYXJlLiBUaW1lIGZvciBhIHNuYWNrPyBUaGUgcmU6ZnVlbCBzaG9wIG9mZmVycyBzZWxmLXNlcnZlIGJpdGVzIGxpa2Ugc2FuZHdpY2hlcywgc2FsYWRzIGFuZCBmcmVzaCBmcnVpdC4KCQoJVGhlIFNwbGFzaCBpbmRvb3IgcG9vbCBhbmQgcmU6Y2hhcmdlIGZpdG5lc3MgY2VudGVyIGNvbXBsZXRlIHlvdXIgb3Zlcm5pZ2h0IGV4cGVyaWVuY2UuIEFuZCBsdWNreSBmb3IgeW91IC0gc2VsZiBjaGVjay1pbiBraW9za3MgYWxsb3cgeW91IHRvIHByaW50IG91dCB5b3VyIG5leHQgZmxpZ2h0JmFjdXRlO3MgYm9hcmRpbmcgcGFzcyEgVGFsayBhYm91dCBjb252ZW5pZW50LgoJPGgzPiBSZTpGdWVsIDwvaDM+CgkKCUp1c3Qgb2ZmIHRoZSBwbGFuZSBhbmQgY3JhdmluZyBzb21ldGhpbmcgdG8gbmliYmxlPyBUaGFua3MgdG8gQWxvZnQgUGhpbGFkZWxwaGlhIEFpcnBvcnQmYWN1dGU7cyBpbm5vdmF0aXZlIGVhdGluZyBvcHRpb25zLCB5b3UgZG9uJmFjdXRlO3QgaGF2ZSB0byBtYWtlIGRvIHdpdGggYmxhbmQgaW4tZmxpZ2h0IG1lYWxzIG9yIHVuaGVhbHRoeSBhaXJwb3J0IGZhcmUuIEVudGljaW5nIGVkaWJsZXMgYXJlIGhlcmUsIGZyb20gc3dlZXQgdHJlYXRzIHRvIGhlYWx0aHkgZWF0cyBhbmQgbW9yZS4KCQoJVGhlcmUgaXMgc29tZXRoaW5nIHRvIHBsZWFzZSB5b3VyIHBhbGF0ZSBhdCBhbnkgaG91ci4gSGVscCB5b3Vyc2VsZiBhdCB0aGUgMjQtNyByZTpmdWVsIGJ5IEFsb2Z0KFNNKSBmb3IgYSBxdWljayBiaXRlIHdoZW5ldmVyIGh1bmdlciBzdHJpa2VzLiBPciBtaXggYW5kIG1pbmdsZSB3aXRoIGEgZHJpbmsgYW5kIHNuYWNrIGF0IHRoZSB3IHh5eihTTSkgYmFyLgoJPGgzPkZ1biA8L2gzPgoJCglGb3IgdGhlIHRyYXZlbGVyIG9wZW4gdG8gcG9zc2liaWxpdGllcywgQWxvZnQgUGhpbGFkZWxwaGlhIEFpcnBvcnQgaXMgYSBmcmVzaCwgZnVuLCBmb3J3YXJkLXRoaW5raW5nIGFsdGVybmF0aXZlLiBCcmVlemUgaW50byBhIGhvdGVsIHRoYXQgb2ZmZXJzIG1vcmUgdGhhbiBhIGNvbWZ5IGJlZCBhbmQgYSBmcmllbmRseSBzbWlsZSwgYW5kIGVuam95IGEgd2hvbGUgbmV3IHRyYXZlbCBleHBlcmllbmNlLiBFbmVyZ3kgZmxvd3MgYW5kIHBlcnNvbmFsaXRpZXMgbWluZ2xlIGluIGEgc2V0dGluZyB0aGF0IGNvbWJpbmVzIHVyYmFuLWluZmx1ZW5jZWQgZGVzaWduLCBhY2Nlc3NpYmxlIHRlY2hub2xvZ3ksIGFuZCBhIHNvY2lhbCBzY2VuZSB0aGF0JmFjdXRlO3MgYWx3YXlzIGFidXp6LgoJCglFbmVyZ2l6aW5nIHB1YmxpYyBzcGFjZXMgZHJhdyB5b3UgZnJvbSB5b3VyIHJvb20gdG8gc29jaWFsaXplLCBvciBqdXN0IGVuam95IHRoZSBodW0gb2YgYWN0aXZpdHkgYXMgeW91IGRvIHlvdXIgb3duIHRoaW5nLiBTaXAgYSBkcmluaywgcmVhZCB0aGUgcGFwZXIsIG9yIHdvcmsgb24geW91ciBsYXB0b3AgaW4gdGhlIHJlOm1peChTTSkgbG91bmdlIG9yIHcgeHl6KFNNKSBiYXIsIHdoZXJlIGxpZ2h0aW5nIGFuZCBtdXNpYyBjaGFuZ2UgdGhyb3VnaG91dCB0aGUgZGF5IHRvIHNldCB0aGUgcGVyZmVjdCBtb29kLgoJCglUaGUgaG90ZWwmYWN1dGU7cyBvcGVuIGZsb3cgb2YgZmVhdHVyZXMgYW5kIGhlbHAteW91cnNlbGYgc2VydmljZXMgaW5zcGlyZSB5b3UgdG8gc3RlcCBvdXRzaWRlIHRoZSBvbmUtc2l6ZS1maXRzLWFsbCB0cmF2ZWwgcm91dGluZS4gQ3VzdG9taXplIHlvdXIgc3RheSBhbmQgY2VsZWJyYXRlIHlvdXIgc3R5bGUgaW4gYSBwbGFjZSB3aGVyZSBhbnl0aGluZyBjYW4gaGFwcGVuLgoJCglBYWho4oCmYnJlYXRoZSBkZWVwIGF0IEFsb2Z0LiBUaGlzIGhvdGVsIGlzIHNtb2tlLWZyZWUuCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczE1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMyLmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnSG90ZWxzJywgJ0ZlYXR1cmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnJyApLAoJImdlb2Rpcl92aWRlbyIgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDEyMykgMTExLTIyMjInLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQG1hcnJpb3R0LmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cubWFycmlvdHQuY29tL2hvdGVscy90cmF2ZWwvcGhsZHQtcGhpbGFkZWxwaGlhLW1hcnJpb3R0LWRvd250b3duLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9tYXJyaW90dCcsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vbWFycmlvdHQnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIyOjAwIiwiVHUgMDc6MDAtMjI6MDAiLCJXZSAwNzowMC0yMjowMCIsIlRoIDA3OjAwLTIyOjAwIiwiRnIgMDc6MDAtMjI6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgID0+ICdIaWx0b24gSW5uIGF0IFBlbm4nLAoJInBvc3RfY29udGVudCIgICAgID0+ICcKCUxvY2F0ZWQgaW4gdGhlIGhlYXJ0IG9mIFBlbm4mYWN1dGU7cyBjYW1wdXMgaW4gdGhlIGJlYXV0aWZ1bCBVbml2ZXJzaXR5IENpdHkgbmVpZ2hib3Job29kIG9mIFBoaWxhZGVscGhpYSwgVGhlIEhpbHRvbiBJbm4gYXQgUGVubiBpcyBhIGdyZWF0IGNob2ljZSBmb3IgYWNjb21tb2RhdGlvbnMgZHVyaW5nIHlvdXIgdXBjb21pbmcgdmlzaXQgdG8gUGhpbGFkZWxwaGlhLgoJCglUaGUgbG9jYXRpb24gcHV0cyB5b3UgcmlnaHQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgcHJlc3RpZ2lvdXMgVW5pdmVyc2l0eSBvZiBQZW5uc3lsdmFuaWEgYW5kIGl0cyBtYW55IG5lYXJieSBlZHVjYXRpb25hbCwgbWVkaWNhbCBhbmQgY29ycG9yYXRlIGNlbnRlcnMuIEFuZCBDZW50ZXIgQ2l0eSBQaGlsYWRlbHBoaWEgaXMgb25seSBhIHNob3J0IGNhYiByaWRlIGF3YXkuIFNvIGlmIHlvdSB3YW50IHRvIGdldCBvdXQgYW5kIGV4cGxvcmUgdGhlIGNpdHksIHlvdSBhcmUgc2V0LgoJCglUYWtlIGluIGEgc2hvdyBhdCB0aGUgQW5uZW5iZXJnIFRoZWF0ZXI7IHZpc2l0IG9uZSBvZiB0aGUgbWFueSBtdXNldW1zIHRoZSBjaXR5IGhhcyB0byBvZmZlcjsgZGluZSBhdCBhcmVhIHJlc3RhdXJhbnRzIHRoYXQgYm9hc3QgYSByYW5nZSBvZiBjdWlzaW5lcywgZnJvbSBUaGFpIHRvIEluZGlhbiB0byBKYXBhbmVzZSB0byBjbGFzc2ljIGNvbWZvcnQgY3Vpc2luZTsgcGVlcmxlc3MgYm91dGlxdWUgc2hvcHBpbmcgYWxvbmcgV2FsbnV0IFN0cmVldCBmcm9tIFVuaXZlcnNpdHkgQ2l0eSB0byBPbGQgQ2l0eS4KCQoJVGhlIGJlYXV0aWZ1bGx5IGFwcG9pbnRlZCBndWVzdCByb29tcyBhcmUgZXF1aXBwZWQgZm9yIHRoZSB0ZWNobm9sb2dpY2FsbHkgc29waGlzdGljYXRlZCBhbmQgaW5jbHVkZSB0d28gZHVhbC1saW5lIHBob25lcyB3aXRoIHZvaWNlIG1haWwsIGRhdGEgcG9ydHMgYW5kIGhpZ2ggc3BlZWQgYW5kIHdpcmVsZXNzIEludGVybmV0IGFjY2Vzcy4gRWFjaCByb29tIGFsc28gb2ZmZXJzIFdFQlRWLCBwbHVzaCB0ZXJyeSBjbG90aCByb2JlcyBhbmQgbHV4dXJpb3VzIGJhdGggYW1lbml0aWVzIHByb3ZpZGUgYSB0b3VjaCBvZiBpbmR1bGdlbmNlLiBBZGRpdGlvbmFsbHksIGEgcmVmcmVzaG1lbnQgY2VudGVyIGlzIG5vdyBsb2NhdGVkIGluIGVhY2ggZ3Vlc3Ryb29tIHdpdGggc25hY2tzIGFuZCByZWZyZXNobWVudHMgYWxvbmcgd2l0aCBhbiBpbiByb29tIHNhZmUgZm9yIHZhbHVhYmxlcyBhbmQgbGFwdG9wcy4KCQoJVGhlIEhpbHRvbiBJbm4gYXQgUGVubiBpcyBhIHJlY2lwaWVudCBvZiB0aGUgQUFBIEZvdXIgRGlhbW9uZCByYXRpbmcuIFRoZXJlIGlzIGFsc28gYSAyNC1ob3VyIGZpdG5lc3MgY2VudGVyIHdpdGggYSBmdWxsIHJhbmdlIG9mIGNhcmRpb3Zhc2N1bGFyIGFuZCB3ZWlnaHQgdHJhaW5pbmcgZXF1aXBtZW50LgoJPGgzPlBlbm5lIFJlc3RhdXJhbnQgYW5kIFdpbmUgQmFyIDwvaDM+CgkKCU9uZSBvZiBVbml2ZXJzaXR5IENpdHkmYWN1dGU7cyBmaW5lc3QgSXRhbGlhbiByZXN0YXVyYW50cyBpcyBQZW5uZSBhdCB0aGUgSW5uIGF0IFBlbm4uIEZlYXR1cmluZyBpbm5vdmF0aXZlLCByZWdpb25hbCBJdGFsaWFuIGN1aXNpbmUgYW5kIGhhbmQtbWFkZSBwYXN0YSBtYWRlIGZyZXNoIGRhaWx5LCBQZW5uZSBpcyBhIGdyZWF0IGNob2ljZSBmb3IgbHVuY2ggb3IgZGlubmVyLgoJCglUaGUgcGFzdGEgaXMgaGFuZG1hZGUgcmlnaHQgaW4gZnJvbnQgb2YgeW91IGFuZCB0aGVuIGRpc2hlZCB1cCBhbG9uZyBzaWRlIGRlbGVjdGFibGUgZW50csOpZXMgc3VjaCBhcyBncmlsbGVkIHZlYWwgdGVuZGVybG9pbiBhbmQgaG9uZXkgZ2xhemVkIHNlYSBzY2FsbG9wcy4gQW5kIHRoZSB3aW5lIGJhciBvZmZlcnMgbW9yZSB0aGFuIDMwIHZhcmlldGllcyBieSB0aGUgZ2xhc3MgYW5kIG1vcmUgdGhhbiAxMDAgYnkgdGhlIGJvdHRsZS4gIAoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczE2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMi5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0hvdGVscycsICdGb29kIE5pZ2h0bGlmZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICcnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoODg4KSA4ODgtODg4OCcsCgkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AdGhlaW5uYXRwZW5uLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cudGhlaW5uYXRwZW5uLmNvbS8nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vdGhlaW5uYXRwZW5uJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS90aGVpbm5hdHBlbm4nLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIyOjAwIiwiVHUgMDc6MDAtMjI6MDAiLCJXZSAwNzowMC0yMjowMCIsIlRoIDA3OjAwLTIyOjAwIiwiRnIgMDc6MDAtMjI6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnQ291cnR5YXJkIFBoaWxhZGVscGhpYSBEb3dudG93bicsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJPGgzPk92ZXJ2aWV3IDwvaDM+CgkKCVRoZSBQaGlsYWRlbHBoaWEgRG93bnRvd24gQ291cnR5YXJkIG9wZW5lZCBpdCZhY3V0ZTtzIGRvb3JzIGFmdGVyIGEgZ3JhbmQgJDc1IG1pbGxpb24gcmVzdG9yYXRpb24sIHJlY2FwdHVyaW5nIHRoZSBncmFuZGV1ciBvZiBpdHMgMTkyNiBvcmlnaW5zIHdoaWxlIGluY29ycG9yYXRpbmcgc3RhdGUgb2YgdGhlIGFydCBzeXN0ZW1zIHRocm91Z2hvdXQuCgkKCURlc2lnbmVkIGJ5IHJlbm93bmVkIGFyY2hpdGVjdCBQaGlsbGlwIEguIEpvaG5zb24sIHRoZSAxOC1zdG9yeSwgNDk4LXJvb20gaG90ZWwgaXMgbGlzdGVkIG9uIHRoZSDigJxOYXRpb25hbCBSZWdpc3RlciBvZiBIaXN0b3JpYyBQbGFjZXPigJ0gYW5kIHN0YW5kcyBhcyBhIGNoYXJtaW5nIHRlc3RhbWVudCB0byB0aW1lIHdpdGggZWxlZ2FudCBicm9uemUgd29yaywgcGxhc3RlciBkZXRhaWxpbmcsIHN0cmlraW5nIG1hcmJsZSBmaW5pc2hlcyBhbmQgdW5pcXVlIGFyY2hpdGVjdHVyYWwgZGV0YWlscy4KCQoJQ2F0ZXJpbmcgdG8gYm90aCBsZWlzdXJlIGFuZCBidXNpbmVzcyB0cmF2ZWxlcnMsIHRoZSBoaXN0b3JpYyBmdWxsLXNlcnZpY2UgaG90ZWwgaXMgaWRlYWxseSBsb2NhdGVkIGluIHRoZSDigJxIZWFydCBvZiBDZW50ZXIgQ2l0eeKAnSBhY3Jvc3MgZnJvbSBDaXR5IEhhbGwsIG9uZSBibG9jayB0byB0aGUgUGVubnN5bHZhbmlhIENvbnZlbnRpb24gQ2VudGVyIGFuZCB3aXRoaW4gd2Fsa2luZyBkaXN0YW5jZSBvZiB0aGUgRmluYW5jaWFsICYgSGlzdG9yaWMgRGlzdHJpY3RzLCBBdmVudWUgb2YgdGhlIEFydHMgYW5kIHNvbWUgb2YgdGhlIGZpbmVzdCByZXN0YXVyYW50cyBhbmQgc2hvcHBpbmcgdGhlIGNpdHkgaGFzIHRvIG9mZmVyLgoJCgkKCTxoMz5HdWVzdHJvb20gRmVhdHVyZXMgPC9oMz4KCQoJVGhlIGhvdGVsIGZlYXR1cmVzIHN0eWxpc2hseSBhcHBvaW50ZWQgb3ZlcnNpemVkIGd1ZXN0cm9vbXMgd2l0aCAxMWZ0LWhpZ2ggY2VpbGluZ3MsIGEgNDLigJ0gTENEIFRWLCBSZWZyaWdlcmF0b3IsIEktUG9kIERvY2tpbmcgU3RhdGlvbiBBbGFybSBDbG9jaywgY29tcGxpbWVudGFyeSBXaXJlbGVzcyBvciBXaXJlZCBpbnRlcm5ldCBhY2Nlc3MsIGFuZCBNYXJyaW90dCZhY3V0ZTtzIHBsdXNoIFJldml2ZSBiZWRkaW5nIHBhY2thZ2UuCgkKCUluIGFkZGl0aW9uLCB0aGUgcHJvcGVydHkgb2ZmZXJzIDYxIHN1aXRlcyBmb3IgdGhvc2Ugd2hvIGxpa2UgYWRkaXRpb25hbCByb29tIGFuZCBhZGRlZCBjb21mb3J0IGFzIHdlbGwgYXMgNTAgcm9vbXMgd2hpY2ggaW5jbHVkZSBhIHN0cmlraW5nIFdhbGwgTXVyYWwgb2YgUGhpbGFkZWxwaGlhJmFjdXRlO3MgSW5kZXBlbmRlbmNlIEhhbGwuCgkKCTxoMz5Ib3RlbCBTZXJ2aWNlcyA8L2gzPgoJCglBcyB0aGUgbGFyZ2VzdCBDb3VydHlhcmQgYnkgTWFycmlvdHQgaW4gdGhlIFVuaXRlZCBTdGF0ZXMsIHRoaXMgaG90ZWwgaXMgdHJ1bHkgdW5pcXVlIG9mZmVyaW5nIGFsbCB0aGUgZnVsbC1zZXJ2aWNlIGZlYXR1cmVzIGFuZCBhbWVuaXRpZXMgeW91IHdvdWxkIGV4cGVjdCBmcm9tIGEgcHJlbWllciBob3RlbC4KCQoJVGhlIEFubmV4IEdyaWxsZSAmIExvdW5nZSBzZXJ2ZXMgQW1lcmljYW4gQ3Vpc2luZSBmb3IgYnJlYWtmYXN0LCBsdW5jaCAmIGRpbm5lciBhcyB3ZWxsIGFzIGlzIGEgZ3JlYXQgbG9jYXRpb24gZm9yIGEgcmVmcmVzaGluZyBiZXZlcmFnZSBvciBjb2NrdGFpbC4gT3IgeW91IGNhbiBkaW5lIGluIHRoZSBjb252ZW5pZW5jZSBvZiB5b3VyIGd1ZXN0cm9vbSB3aXRoIHRoZSBob3RlbCZhY3V0ZTtzIGV2ZW5pbmcgUm9vbSBTZXJ2aWNlLgoJCglUaGUgaG90ZWwmYWN1dGU7cyBMb2JieSBDb25jaWVyZ2UgU2VydmljZXMgYW5kIEJlbGxtYW4gYXJlIHJlYWR5IHRvIGFzc2lzdCB5b3Ugd2l0aCBhbnkgcmVxdWVzdCBhcyB3ZWxsIGFzIGluZm9ybWF0aW9uIG9uIGFsbCBQaGlsYWRlbHBoaWEgaGFzIHRvIG9mZmVyLgoJCglTdGF5IGluIHNoYXBlIGluIHRoZSBob3RlbCZhY3V0ZTtzIFN0YXRlIG9mIHRoZSBBcnQgRml0bmVzcyBDZW50ZXIsIGFuZCB0aGVuIHVud2luZCBpbiB0aGUgSW5kb29yIFBvb2wgYW5kIFdoaXJscG9vbC4gSWYgeW91IGFyZSBsb29raW5nIGZvciBhIHF1aWV0IHBsYWNlIHRvIGdldGF3YXksIHZpc2l0IG91ciBQaGlsaXAgSC4gSm9obnNvbiBMaWJyYXJ5IHdoZXJlIHlvdSBjYW4gcmVhZCBhbGwgYWJvdXQgSGlzdG9yaWMgUGhpbGFkZWxwaGlhLgoJCgk8aDM+TWVldGluZ3MgJiBFdmVudHMgPC9oMz4KCQoJUmVjZW50bHkgZmVhdHVyZWQgb24gV0UgVFYmYWN1dGU7cyDigJxNeSBGYWlyIFdlZGRpbmfigJ0sIHRoZSBDb3VydHlhcmQgTWFycmlvdHQgUGhpbGFkZWxwaGlhIGlzIG9uZSBvZiB0aGUgY2l0eSZhY3V0ZTtzIGxlYWRpbmcgdmVudWVzIGZvciBjb3Jwb3JhdGUgYW5kIHNvY2lhbCBhZmZhaXJzIHdpdGggb3ZlciAxMCwwMDAgc3EgZnQgb2YgZmxleGlibGUgbWVldGluZyBzcGFjZSwgaW5jbHVkaW5nIHR3byBHcmFuZCBCYWxscm9vbXMgZWFjaCB3aXRoIG92ZXIgMywwMDAgc3F1YXJlIGZlZXQgYWNjb21tb2RhdGluZyB1cCB0byAyNTAgcGVvcGxlLiBJbiBhZGRpdGlvbiwgdGhlIGhvdGVsIGhhcyBhIHRvdGFsIG9mIDExIG1lZXRpbmcgcm9vbXMgbWFraW5nIGl0IGFuIGlkZWFsIGhvbWUgZm9yIGFsbCBvY2Nhc2lvbnMuIFRoZSBob3RlbCBib2FzdHMgYW4gZXhwZXJpZW5jZWQgZnVsbC1zZXJ2aWNlIEV2ZW50IGFuZCBDdWxpbmFyeSBUZWFtcywgcmVhZHkgdG8gdGFrZSBjYXJlIG9mIGFsbCB0aGUgZGV0YWlscyBhbmQgZW5zdXJlIHlvdXIgZXZlbnQgaXMgbm90IG9ubHkgYSBzdWNjZXNzLCBidXQgYSBsYXN0aW5nIG1lbW9yeS4gCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczE3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMyLmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnSG90ZWxzJywgJ0Zvb2QgTmlnaHRsaWZlJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJycgKSwKCSJ2aWRlbyIgICAgICAgICA9PiAnJywKCSJwaG9uZSIgICAgICAgPT4gJyg4ODgpIDg4OC04ODg4JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0B0aGVpbm5hdHBlbm4uY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy50aGVpbm5hdHBlbm4uY29tLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS90aGVpbm5hdHBlbm4nLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3RoZWlubmF0cGVubicsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMDc6MDAtMjI6MDAiLCJUdSAwNzowMC0yMjowMCIsIldlIDA3OjAwLTIyOjAwIiwiVGggMDc6MDAtMjI6MDAiLCJGciAwNzowMC0yMjowMCIsIlNhIDA3OjAwLTIzOjAwIiwiU3UgMDc6MDAtMjM6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ0ZvdXIgU2Vhc29ucyBQaGlsYWRlbHBoaWEnLAoJInBvc3RfY29udGVudCIgICAgID0+ICcKCTxoMz5PdmVydmlldyA8L2gzPgoJCglUaGUgUGhpbGFkZWxwaGlhIERvd250b3duIENvdXJ0eWFyZCBvcGVuZWQgaXQmYWN1dGU7cyBkb29ycyBhZnRlciBhIGdyYW5kICQ3NSBtaWxsaW9uIHJlc3RvcmF0aW9uLCByZWNhcHR1cmluZyB0aGUgZ3JhbmRldXIgb2YgaXRzIDE5MjYgb3JpZ2lucyB3aGlsZSBpbmNvcnBvcmF0aW5nIHN0YXRlIG9mIHRoZSBhcnQgc3lzdGVtcyB0aHJvdWdob3V0LgoJCglEZXNpZ25lZCBieSByZW5vd25lZCBhcmNoaXRlY3QgUGhpbGxpcCBILiBKb2huc29uLCB0aGUgMTgtc3RvcnksIDQ5OC1yb29tIGhvdGVsIGlzIGxpc3RlZCBvbiB0aGUg4oCcTmF0aW9uYWwgUmVnaXN0ZXIgb2YgSGlzdG9yaWMgUGxhY2Vz4oCdIGFuZCBzdGFuZHMgYXMgYSBjaGFybWluZyB0ZXN0YW1lbnQgdG8gdGltZSB3aXRoIGVsZWdhbnQgYnJvbnplIHdvcmssIHBsYXN0ZXIgZGV0YWlsaW5nLCBzdHJpa2luZyBtYXJibGUgZmluaXNoZXMgYW5kIHVuaXF1ZSBhcmNoaXRlY3R1cmFsIGRldGFpbHMuCgkKCUNhdGVyaW5nIHRvIGJvdGggbGVpc3VyZSBhbmQgYnVzaW5lc3MgdHJhdmVsZXJzLCB0aGUgaGlzdG9yaWMgZnVsbC1zZXJ2aWNlIGhvdGVsIGlzIGlkZWFsbHkgbG9jYXRlZCBpbiB0aGUg4oCcSGVhcnQgb2YgQ2VudGVyIENpdHnigJ0gYWNyb3NzIGZyb20gQ2l0eSBIYWxsLCBvbmUgYmxvY2sgdG8gdGhlIFBlbm5zeWx2YW5pYSBDb252ZW50aW9uIENlbnRlciBhbmQgd2l0aGluIHdhbGtpbmcgZGlzdGFuY2Ugb2YgdGhlIEZpbmFuY2lhbCAmIEhpc3RvcmljIERpc3RyaWN0cywgQXZlbnVlIG9mIHRoZSBBcnRzIGFuZCBzb21lIG9mIHRoZSBmaW5lc3QgcmVzdGF1cmFudHMgYW5kIHNob3BwaW5nIHRoZSBjaXR5IGhhcyB0byBvZmZlci4KCQoJCgk8aDM+R3Vlc3Ryb29tIEZlYXR1cmVzIDwvaDM+CgkKCVRoZSBob3RlbCBmZWF0dXJlcyBzdHlsaXNobHkgYXBwb2ludGVkIG92ZXJzaXplZCBndWVzdHJvb21zIHdpdGggMTFmdC1oaWdoIGNlaWxpbmdzLCBhIDQy4oCdIExDRCBUViwgUmVmcmlnZXJhdG9yLCBJLVBvZCBEb2NraW5nIFN0YXRpb24gQWxhcm0gQ2xvY2ssIGNvbXBsaW1lbnRhcnkgV2lyZWxlc3Mgb3IgV2lyZWQgaW50ZXJuZXQgYWNjZXNzLCBhbmQgTWFycmlvdHQmYWN1dGU7cyBwbHVzaCBSZXZpdmUgYmVkZGluZyBwYWNrYWdlLgoJCglJbiBhZGRpdGlvbiwgdGhlIHByb3BlcnR5IG9mZmVycyA2MSBzdWl0ZXMgZm9yIHRob3NlIHdobyBsaWtlIGFkZGl0aW9uYWwgcm9vbSBhbmQgYWRkZWQgY29tZm9ydCBhcyB3ZWxsIGFzIDUwIHJvb21zIHdoaWNoIGluY2x1ZGUgYSBzdHJpa2luZyBXYWxsIE11cmFsIG9mIFBoaWxhZGVscGhpYSZhY3V0ZTtzIEluZGVwZW5kZW5jZSBIYWxsLgoJCgk8aDM+SG90ZWwgU2VydmljZXMgPC9oMz4KCQoJQXMgdGhlIGxhcmdlc3QgQ291cnR5YXJkIGJ5IE1hcnJpb3R0IGluIHRoZSBVbml0ZWQgU3RhdGVzLCB0aGlzIGhvdGVsIGlzIHRydWx5IHVuaXF1ZSBvZmZlcmluZyBhbGwgdGhlIGZ1bGwtc2VydmljZSBmZWF0dXJlcyBhbmQgYW1lbml0aWVzIHlvdSB3b3VsZCBleHBlY3QgZnJvbSBhIHByZW1pZXIgaG90ZWwuCgkKCVRoZSBBbm5leCBHcmlsbGUgJiBMb3VuZ2Ugc2VydmVzIEFtZXJpY2FuIEN1aXNpbmUgZm9yIGJyZWFrZmFzdCwgbHVuY2ggJiBkaW5uZXIgYXMgd2VsbCBhcyBpcyBhIGdyZWF0IGxvY2F0aW9uIGZvciBhIHJlZnJlc2hpbmcgYmV2ZXJhZ2Ugb3IgY29ja3RhaWwuIE9yIHlvdSBjYW4gZGluZSBpbiB0aGUgY29udmVuaWVuY2Ugb2YgeW91ciBndWVzdHJvb20gd2l0aCB0aGUgaG90ZWwmYWN1dGU7cyBldmVuaW5nIFJvb20gU2VydmljZS4KCQoJVGhlIGhvdGVsJmFjdXRlO3MgTG9iYnkgQ29uY2llcmdlIFNlcnZpY2VzIGFuZCBCZWxsbWFuIGFyZSByZWFkeSB0byBhc3Npc3QgeW91IHdpdGggYW55IHJlcXVlc3QgYXMgd2VsbCBhcyBpbmZvcm1hdGlvbiBvbiBhbGwgUGhpbGFkZWxwaGlhIGhhcyB0byBvZmZlci4KCQoJU3RheSBpbiBzaGFwZSBpbiB0aGUgaG90ZWwmYWN1dGU7cyBTdGF0ZSBvZiB0aGUgQXJ0IEZpdG5lc3MgQ2VudGVyLCBhbmQgdGhlbiB1bndpbmQgaW4gdGhlIEluZG9vciBQb29sIGFuZCBXaGlybHBvb2wuIElmIHlvdSBhcmUgbG9va2luZyBmb3IgYSBxdWlldCBwbGFjZSB0byBnZXRhd2F5LCB2aXNpdCBvdXIgUGhpbGlwIEguIEpvaG5zb24gTGlicmFyeSB3aGVyZSB5b3UgY2FuIHJlYWQgYWxsIGFib3V0IEhpc3RvcmljIFBoaWxhZGVscGhpYS4KCQoJPGgzPk1lZXRpbmdzICYgRXZlbnRzIDwvaDM+CgkKCVJlY2VudGx5IGZlYXR1cmVkIG9uIFdFIFRWJmFjdXRlO3Mg4oCcTXkgRmFpciBXZWRkaW5n4oCdLCB0aGUgQ291cnR5YXJkIE1hcnJpb3R0IFBoaWxhZGVscGhpYSBpcyBvbmUgb2YgdGhlIGNpdHkmYWN1dGU7cyBsZWFkaW5nIHZlbnVlcyBmb3IgY29ycG9yYXRlIGFuZCBzb2NpYWwgYWZmYWlycyB3aXRoIG92ZXIgMTAsMDAwIHNxIGZ0IG9mIGZsZXhpYmxlIG1lZXRpbmcgc3BhY2UsIGluY2x1ZGluZyB0d28gR3JhbmQgQmFsbHJvb21zIGVhY2ggd2l0aCBvdmVyIDMsMDAwIHNxdWFyZSBmZWV0IGFjY29tbW9kYXRpbmcgdXAgdG8gMjUwIHBlb3BsZS4gSW4gYWRkaXRpb24sIHRoZSBob3RlbCBoYXMgYSB0b3RhbCBvZiAxMSBtZWV0aW5nIHJvb21zIG1ha2luZyBpdCBhbiBpZGVhbCBob21lIGZvciBhbGwgb2NjYXNpb25zLiBUaGUgaG90ZWwgYm9hc3RzIGFuIGV4cGVyaWVuY2VkIGZ1bGwtc2VydmljZSBFdmVudCBhbmQgQ3VsaW5hcnkgVGVhbXMsIHJlYWR5IHRvIHRha2UgY2FyZSBvZiBhbGwgdGhlIGRldGFpbHMgYW5kIGVuc3VyZSB5b3VyIGV2ZW50IGlzIG5vdCBvbmx5IGEgc3VjY2VzcywgYnV0IGEgbGFzdGluZyBtZW1vcnkuIAoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMi5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0hvdGVscycsICdGb29kIE5pZ2h0bGlmZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICcnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoMTQzKSA4ODgtODg4OCcsCgkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AZm91cnNlYXNvbnMuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy5mb3Vyc2Vhc29ucy5jb20vcGhpbGFkZWxwaGlhLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9mb3Vyc2Vhc29ucycsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vZm91cnNlYXNvbnMnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIzOjAwIiwiVHUgMDc6MDAtMjM6MDAiLCJXZSAwNzowMC0yMzowMCIsIlRoIDA3OjAwLTIyOjAwIiwiRnIgMDc6MDAtMjM6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgID0+ICdBbGV4YW5kZXIgSW5uJywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnCglUaGUgQWxleGFuZGVyIElubiBpcyBvbmUgb2YgUGhpbGFkZWxwaGlhJmFjdXRlO3MgbW9zdCBwb3B1bGFyIGFuZCByZWFzb25hYmx5IHByaWNlZCBzbWFsbCBob3RlbHMuCgkKCUNvbnZlbmllbnRseSBsb2NhdGVkIGluIHRoZSBoZWFydCBvZiB0aGUgV2FzaGluZ3RvbiBTcXVhcmUgV2VzdCBuZWlnaGJvcmhvb2QgaW4gQ2VudGVyIENpdHkgUGhpbGFkZWxwaGlhLCB0aGUgQWxleGFuZGVyIElubiBpcyBhIGdyZWF0IHBsYWNlIHRvIGJhc2UgeW91ciBzdGF5IGluIFBoaWxhZGVscGhpYS4KCQoJVGhlIGTDqWNvciBvZiB0aGUgaG90ZWwmYWN1dGU7cyA0OCBkZXNpZ25lciByb29tcyBpcyBpbnNwaXJlZCBieSB0aGUgc3R5bGUgb2YgdGhlIGdyYW5kIGNydWlzZSBzaGlwcyBvZiB0aGUgMTkzMHMsIHdoaWNoIGlzIHJlZmxlY3RlZCBpbiB0aGUgcm9vbXPigJkgaGFuZCBzZWxlY3RlZCBmdXJuaXNoaW5ncywgZmFicmljcyBhbmQgYWNjZXNzb3JpZXMuIEJlYXV0aWZ1bCBhcnR3b3JrIGFkb3JucyB0aGUgd2FsbHMgb2YgZWFjaCByb29tcywgd2hpY2ggYWxsIGluY2x1ZGUgcHJpdmF0ZSBiYXRocyB3aXRoIHBsdXNoIHRvd2Vscy4KCQoJUm9vbXMgYXJlIGFsc28gZml0dGVkIHdpdGggRGlyZWNUViAoaW5jbHVkaW5nIG1hbnkgY29tcGxpbWVudGFyeSBjaGFubmVscyBsaWtlIENOTiwgRVNQTiwgZWlnaHQgbW92aWUgY2hhbm5lbHMsIGV0Yy4pIGFuZCB0ZWxlcGhvbmVzIHdpdGggbW9kZW0gcG9ydHMgYW5kIGRpcmVjdCBkaWFsLiBZb3Ugd2lsbCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoZSBob3RlbCZhY3V0ZTtzIGZyZWUgMjQtaG91ciBmaXRuZXNzIGFuZCBlLW1haWwgY2VudGVycy4gIAoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMi5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ0hvdGVscycgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICcnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoMTQzKSA4ODgtODg4OCcsCgkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AYWxleGFuZGVyaW5uLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cuYWxleGFuZGVyaW5uLmNvbS8nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vYWxleGFuZGVyaW5uJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9hbGV4YW5kZXJpbm4nLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIyOjAwIiwiVHUgMDc6MDAtMjI6MDAiLCJXZSAwNzowMC0yMjowMCIsIlRoIDA3OjAwLTIyOjAwIiwiRnIgMDc6MDAtMjI6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKJGR1bW15X3Bvc3RzW10gPSBhcnJheSgKCSJwb3N0X3R5cGUiICA9PiAkcG9zdF90eXBlLAoJInBvc3RfdGl0bGUiICAgID0+ICdCZXN0IFdlc3Rlcm4gQ2VudGVyIENpdHkgSG90ZWwnLAoJInBvc3RfY29udGVudCIgICAgID0+ICcKCVRoZSBBbGV4YW5kZXIgSW5uIGlzIG9uZSBvZiBQaGlsYWRlbHBoaWEmYWN1dGU7cyBtb3N0IHBvcHVsYXIgYW5kIHJlYXNvbmFibHkgcHJpY2VkIHNtYWxsIGhvdGVscy4KCQoJQ29udmVuaWVudGx5IGxvY2F0ZWQgaW4gdGhlIGhlYXJ0IG9mIHRoZSBXYXNoaW5ndG9uIFNxdWFyZSBXZXN0IG5laWdoYm9yaG9vZCBpbiBDZW50ZXIgQ2l0eSBQaGlsYWRlbHBoaWEsIHRoZSBBbGV4YW5kZXIgSW5uIGlzIGEgZ3JlYXQgcGxhY2UgdG8gYmFzZSB5b3VyIHN0YXkgaW4gUGhpbGFkZWxwaGlhLgoJCglUaGUgZMOpY29yIG9mIHRoZSBob3RlbCZhY3V0ZTtzIDQ4IGRlc2lnbmVyIHJvb21zIGlzIGluc3BpcmVkIGJ5IHRoZSBzdHlsZSBvZiB0aGUgZ3JhbmQgY3J1aXNlIHNoaXBzIG9mIHRoZSAxOTMwcywgd2hpY2ggaXMgcmVmbGVjdGVkIGluIHRoZSByb29tc+KAmSBoYW5kIHNlbGVjdGVkIGZ1cm5pc2hpbmdzLCBmYWJyaWNzIGFuZCBhY2Nlc3Nvcmllcy4gQmVhdXRpZnVsIGFydHdvcmsgYWRvcm5zIHRoZSB3YWxscyBvZiBlYWNoIHJvb21zLCB3aGljaCBhbGwgaW5jbHVkZSBwcml2YXRlIGJhdGhzIHdpdGggcGx1c2ggdG93ZWxzLgoJCglSb29tcyBhcmUgYWxzbyBmaXR0ZWQgd2l0aCBEaXJlY1RWIChpbmNsdWRpbmcgbWFueSBjb21wbGltZW50YXJ5IGNoYW5uZWxzIGxpa2UgQ05OLCBFU1BOLCBlaWdodCBtb3ZpZSBjaGFubmVscywgZXRjLikgYW5kIHRlbGVwaG9uZXMgd2l0aCBtb2RlbSBwb3J0cyBhbmQgZGlyZWN0IGRpYWwuIFlvdSB3aWxsIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIGhvdGVsJmFjdXRlO3MgZnJlZSAyNC1ob3VyIGZpdG5lc3MgYW5kIGUtbWFpbCBjZW50ZXJzLiAgCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczIuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdIb3RlbHMnLCAnRm9vZCBOaWdodGxpZmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDI0MykgMjIyLTEyMzQ0JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0BhbGV4YW5kZXJpbm4uY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL2Jvb2suYmVzdHdlc3Rlcm4uY29tL2Jlc3R3ZXN0ZXJuL3Byb2R1Y3RJbmZvLmRvP3Byb3BlcnR5Q29kZT0zOTA4NycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9iZXN0d2VzdGVybicsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vYmVzdHdlc3Rlcm4nLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIyOjAwIiwiVHUgMDc6MDAtMjI6MDAiLCJXZSAwNzowMC0yMjowMCIsIlRoIDA3OjAwLTIyOjAwIiwiRnIgMDc6MDAtMjI6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnQ2hlc3RudXQgSGlsbCBIb3RlbCcsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJVGhlIENoZXN0bnV0IEhpbGwgSG90ZWwgaXMgbG9jYXRlZCBpbiB0aGUgaGlzdG9yaWMgY29tbXVuaXR5IG9mIENoZXN0bnV0IEhpbGwsIGFwcHJveGltYXRlbHkgbmluZSBtaWxlcyBub3J0aHdlc3QgZnJvbSBDZW50ZXIgQ2l0eSBQaGlsYWRlbHBoaWEuIEFsdGhvdWdoIENoZXN0bnV0IEhpbGwgaXMgY2xvc2UgdG8gQ2VudGVyIENpdHkgYnkgdG9kYXkmYWN1dGU7cyBzdGFuZGFyZHMsIGl0IHdhcyBvcmlnaW5hbGx5IGEgZGlzdGFudCDigJxzdWJ1cmLigJ0gb24gdGhlIG91dHNraXJ0cyBvZiB0aGUgUGhpbGFkZWxwaGlhIGNvdW50cnlzaWRlLgoJCglUb2RheSwgaXQgaXMgb25lIG9mIHRoZSByZWdpb24mYWN1dGU7cyBtb3N0IGNoYXJtaW5nIG5laWdoYm9yaG9vZHMuIFRyZWUtbGluZWQgc3RyZWV0cyBhbmQgZ3JhbmQgZXN0YXRlcyBzdXJyb3VuZCBpdHMgbWFpbiBzdHJlZXQsIEdlcm1hbnRvd24gQXZlbnVlLCB3aGVyZSB5b3UgY2FuIHN0cm9sbCBhbmQgc2hvcCBhdCBtb3JlIHRoYW4gMjAwIHNwZWNpYWx0eSBzaG9wcyBhbmQgcmVzdGF1cmFudHMsIGFsb25nIHdpdGggdHJlbmR5IHNhbG9ucyBhbmQgb3RoZXIgbW9kZXJuIGJvdXRpcXVlcy4KCQoJVGhlIENoZXN0bnV0IEhpbGwgSG90ZWwgZml0cyBwZXJmZWN0bHkgaW4gdGhpcyBzZXR0aW5nIC0gdGhlIGhvdGVsJmFjdXRlO3MgMzYgcm9vbXMgYW5kIHN1aXRlcywgZGVjb3JhdGVkIGluIGFuIDE4dGgtY2VudHVyeSBzdHlsZSwgaG9sZCB0aGUgaG90ZWwgdG8gaXRzIGJvdXRpcXVlIHJvb3RzLiBJdCZhY3V0ZTtzIGEgcGVyZmVjdCBwbGFjZSBhdCB3aGljaCB0byBlbmpveSBhIHJvbWFudGljIGdldGF3YXkgaW4gUGhpbGFkZWxwaGlhLiAKCScsCgkicG9zdF9pbWFnZXMiICAgPT4gYXJyYXkoCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczEwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMTIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHMxMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9ob3RlbHM5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvaG90ZWxzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL2hvdGVsczIuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdIb3RlbHMnLCAnRmVhdHVyZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICcnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoMjQzKSAyMjItMTIzNDQnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGNoZXN0bnV0aGlsbGhvdGVsLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cuY2hlc3RudXRoaWxsaG90ZWwuY29tLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9jaGVzdG51dGhpbGxob3RlbCcsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vY2hlc3RudXRoaWxsaG90ZWwnLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDA3OjAwLTIyOjAwIiwiVHUgMDc6MDAtMjI6MDAiLCJXZSAwNzowMC0yMjowMCIsIlRoIDA3OjAwLTIyOjAwIiwiRnIgMDc6MDAtMjI6MDAiLCJTYSAwNzowMC0yMzowMCIsIlN1IDA3OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnVmlsbGFnZSBXaGlza2V5JywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnCgkKCQoJTG9jYXRlZCBpbiBhIFJpdHRlbmhvdXNlIFNxdWFyZSBzcGFjZSBldm9raW5nIHRoZSBmcmVlLXdoZWVsaW5nIHNwaXJpdCBvZiBhIHNwZWFrZWFzeSwgVmlsbGFnZSBXaGlza2V5IGlzIHByb2xpZmljIENoZWYgSm9zZSBHYXJjZXPigJkgaW50aW1hdGUsIDMwLXNlYXQgdHJpYnV0ZSB0byB0aGUgdGltZS1ob25vcmVkIGxpcXVvci4KCQoJSW4gZmFjdCwgVmlsbGFnZSBXaGlza2V5IGZlYXR1cmVzIGEgdmVyaXRhYmxlIGxpYnJhcnkgb2YgODAtMTAwIHZhcmlldGllcyBvZiB3aGlza2V5LCBib3VyYm9uLCByeWUgYW5kIHNjb3RjaCBmcm9tIFNjb3RsYW5kLCBDYW5hZGEsIElyZWxhbmQsIFVuaXRlZCBTdGF0ZXMgYW5kIGV2ZW4gSmFwYW4uCgkKCU11Y2ggYXMgVmlsbGFnZSBXaGlza2V5IGNvdWxkIGJlIGEgc2NlbmUgZm9yIHRvYXN0aW5nIGFuZCByb2FzdGluZywgaXQgYWxzbyBjb21lcyBmcm9tIHRoZSBjdWxpbmFyeSBpbWFnaW5hdGlvbiBvZiBKb3NlIEdhcmNlcyAob2YgQW1hZGEsIFRpbnRvLCBEaXN0cml0byBhbmQgQ2hpZmEgZmFtZSksIG1lYW5pbmcgdGhlIGZvb2QgaXMgbm8gbGVzcyB0aGFuIG91dHN0YW5kaW5nLgoJPGgzPkN1aXNpbmUgPC9oMz4KCQoJVmlsbGFnZSBXaGlza2V5JmFjdXRlO3Mgc3BlY2lhbHR5IGZyb20gdGhlIGtpdGNoZW4gaXMg4oCcYmFyIHNuYWNrcyzigJ0gYnV0IHRoYXQgZG9lc24mYWN1dGU7dCBtZWFuIGEgYm93bCBvZiBjYXNoZXdzLiBSYXRoZXIsIGl0IG1lYW5zIGRldmlsZWQgZWdncywgc3BpY3kgcG9wY29ybiBzaHJpbXAsIHNvZnQgcHJldHplbHMgYW5kIGFuIMOgIGxhIGNhcnRlIHJhdyBiYXIsIGFsbCB0cmVhdGVkIHdpdGggdGhlIGN1bGluYXJ5IGNhcmUgdGhhdCBtYWRlIEpvc2UgR2FyY2VzIGEgZmluYWxpc3Qgb24gVGhlIE5leHQgSXJvbiBDaGVmLgoJCglQZXJoYXBzIHlvdSBzZWVrIHNvbWV0aGluZyBoZWFydGllci4gVGhlIGxvYnN0ZXIgcm9sbCwgcmF3IGJhciBzZWxlY3Rpb25zIGFuZCBLZW50dWNreSBmcmllZCBxdWFpbCBhcmUgc3RhbmRvdXRzLCBidXQgeW914oCZZCByZWFsbHkgb3VnaHQgdG8gb3JkZXIgdGhlIFdoaXNrZXkgS2luZzogYSAxMCBveiBwYXR0eSBvZiBncm91bmQtdG8tb3JkZXIgc3VzdGFpbmFibGUgYW5ndXMgdG9wcGVkIHdpdGggbWFwbGUgYm91cmJvbiBnbGF6ZWQgY2lwb2xsaW5pLCBSb2d1ZSBibHVlIGNoZWVzZSwgYXBwbGV3b29kIHNtb2tlZCBiYWNvbiBhbmQgZm9pZSBncmFzLiBCcmluZyB5b3VyIGFwcGV0aXRlLgoJPGgzPkNvY2t0YWlscyA8L2gzPgoJCglXaGlza2V5LWJhc2VkIGNvY2t0YWlscyBhcmUgZGl2aWRlZCBpbnRvIHR3byBjYXRlZ29yaWVzOiBQcm9oaWJpdGlvbiAoY2xhc3NpYyBjb2NrdGFpbHMpIGFuZCBSZXBlYWwgKG1vcmUgY29udGVtcG9yYXJ5LCBtb2Rlcm4gdGFrZXMpLiBNZWFud2hpbGUsIHRoZSB2ZW5lcmFibGUgTWFuaGF0dGFuIGlzIGEgbWFpbnN0YXksIG1peGVkIHVzaW5nIGhvdXNlLW1hZGUgYml0dGVycy4KCQoJUHJvaGliaXRpb24gY29ja3RhaWxzIGluY2x1ZGU6IE9sZCBGYXNoaW9uZWQgKEJvdHRsZSBpbiBCb25kIEJvdXJib24gYW5kIGhvdXNlIGJpdHRlcnMpOyBBdmlhdGlvbiAoQ3JlbWUgZGUgVmlvbGV0dGUgYW5kIGdpbik7IGFuZCBQaGlsYWRlbHBoaWEgRmlzaCBIb3VzZSBQdW5jaCAoZGFyayBydW0sIHBlYWNoIGJyYW5keSBhbmQgdGVhKS4gUmVwZWFsIGNvY2t0YWlscyBpbmNsdWRlOiBBUEEgKGhvcHMtaW5mdXNlZCB2b2RrYSwgZ2luZ2VyIGFuZCBlZ2cgd2hpdGUpOyBEZSBSaWd1ZXIgKHJ5ZSwgYXBlcm9sLCBncmFwZWZydWl0IGFuZCBtaW50KTsgYW5kIEhvcnNlIFdpdGggTm8gTmFtZSAoc2NvdGNoLCBTdG9uZSBQaW5lIExpcXVldXIgYW5kIHBpbmVhcHBsZSkuCgk8aDM+QXRtb3NwaGVyZSA8L2gzPgoJCglUaGUgc3BlYWtlYXN5IGF0bW9zcGhlcmUgaXMgYWNjb21wbGlzaGVkIHRocm91Z2ggZGltIGxpZ2h0aW5nLCBwb3N0ZXJzIGZvciB2YXJpb3VzIGFsY29ob2xzLCBhIHRpbiBjZWlsaW5nIGFuZCBhbnRpcXVlIG1pcnJvcnMuIEJsYWNrLWFuZC13aGl0ZSB3aGl0ZSB0aWxlZCBmbG9vcnMsIG1hcmJsZSB0b3BwZWQgdGFibGVzIGFuZCB3b29kZW4gZHJpbmsgcmFpbHMgYWRkIHRvIHRoZSB0cmFkaXRpb25hbCBiYXIgZGVjb3IuCgkKCUJlaGluZCB0aGUgcGV3dGVyIGJhciwgd2hpc2tpZXMgYXJlIHByb3VkbHkgZGlzcGxheWVkIGxpa2UgbGVhdGhlci1ib3VuZCBib29rcy4KCQoJRHVyaW5nIHRoZSB3YXJtZXIgbW9udGhzLCBkaW5lcnMgY2FuIHNpdCBhdCBsYXJnZSwgd29vZGVuIHRhYmxlcyBwbGFjZWQgYWxvbmcgU2Fuc29tIFN0cmVldCBmb3Igd2hpc2tleSBhbGZyZXNjby4KCScsCgkicG9zdF9pbWFnZXMiICAgPT4gYXJyYXkoCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMzLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM0LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTEuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdSZXN0YXVyYW50cycsICdGZWF0dXJlJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ1NhbXBsZSBUYWcxJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDI0MykgMjIyLTEyMzQ0JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0B2aWxsYWdld2hpc2tleS5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vd3d3LnZpbGxhZ2V3aGlza2V5LmNvbS8nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vdmlsbGFnZXdoaXNrZXknLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3ZpbGxhZ2V3aGlza2V5JywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAxMzowMC0yMjowMCIsIlR1IDEzOjAwLTIyOjAwIiwiV2UgMTM6MDAtMjI6MDAiLCJUaCAxMzowMC0yMjowMCIsIkZyIDEzOjAwLTIyOjAwIiwiU2EgMTM6MDAtMjM6MDAiLCJTdSAxNTowMC0yMzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnWmF2aW5vIFBpenplcmlhIGFuZCBXaW5lIEJhcicsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJWmF2aW5vIGlzIGEgbmV3IHBpenplcmlhIGFuZCB3aW5lIGJhciBsb2NhdGVkIGF0IHRoZSBlcGljZW50ZXIgb2YgdGhlIGNpdHkmYWN1dGU7cyB0cmVuZHkgTWlkdG93biBWaWxsYWdlIG5laWdoYm9yaG9vZC4gVGhlIHJlc3RhdXJhbnQgZmVhdHVyZXMgYSBzZWFzb25hbCBtZW51LCBjbGFzc2ljIGNvY2t0YWlscywgYW4gYXBwcm9hY2hhYmxlIHNlbGVjdGlvbiBvZiB3aW5lIGFuZCBiZWVyIGFuZCBzb21lIG9mIHRoZSBiZXN0IGxhdGUgbmlnaHQgbWVudSBvZmZlcmluZ3MgaW4gdGhlIGFyZWEuCgkKCVRoZSByZXN0YXVyYW50JmFjdXRlO3MgaW50ZXJpb3IgbG9va3MgZ3JlYXQgLSBpdCBoYXMgYSBzaW1wbGUsIHJ1c3RpYyBmZWVsIHdpdGggYW4gb3JpZ2luYWwgYnJpY2sgd2FsbCwgbGFyZ2UgcGljdHVyZSB3aW5kb3dzLCBhIGxvbmcgYmFyIGFuZCBhIGxhcmdlIG91dGRvb3IgY2FmZSBjb21pbmcgdGhpcyBzcHJpbmcuCgkKCUFuZCB0aGUgbWVudSBpcyBncmVhdCB0b28gLSBpdCBib2FzdHMgYWZmb3JkYWJsZSBzbmFja3MgcmFuZ2luZyBmcm9tIHBpenphIHRvIHBhc3RhIHRvIGNoYXJjdXRlcmllIHRvIHNhdGlzZnkgZGluZXJz4oCZIGh1bmdlciwgYW5kIHRoZW4gY29ja3RhaWxzLCBpbmNsdWRpbmcgSXRhbHkmYWN1dGU7cyB2ZW5lcmFibGUgTmVncm9uaSBhbmQgQmVsbGluaSwgYW5kIGFuIGV2ZXItZXZvbHZpbmcgYXNzb3J0bWVudCBvZiB3aW5lIGFuZCBiZWVyIG9mZmVyaW5ncywgdG8gcXVlbmNoIHRoZWlyIHRoaXJzdC4KCQoJTWVudSBpdGVtcyB2YXJ5IHNlYXNvbmFsbHksIGFzIGlzIGN1c3RvbWFyeSBpbiBJdGFseSwgYW5kIG1heSBpbmNsdWRlOiBIb3VzZS1NYWRlIEJlZWYgUmF2aW9saSB3aXRoIGJyb3duIGJ1dHRlciBhbmQgc2FnZTsgUm9hc3RlZCBSZWQgYW5kIEdvbGRlbiBCZWV0cyB3aXRoIHBpc3RhY2hpb3MgYW5kIGdvYXQgY2hlZXNlOyBSb2FzdGVkIExhbWIgd2l0aCBmcmllZCBlZ2dwbGFudCBhbmQgbWludDsgYSBkZWxpY2lvdXMgaG91c2UtbWFkZSBnbm9jY2hpOyBhbmQgdHJhZGl0aW9uYWwgUGFuemFuZWxsYSwgYSB0b21hdG8gYW5kIGJyZWFkIHNhbGFkLiBUaGVyZSBpcyBhbHNvIGEgbmljZSBzZWxlY3Rpb24gb2YgY2hlZXNlIGFuZCBjaGFyY3V0ZXJpZSBhdmFpbGFibGUgYSBsYSBjYXJ0ZS4KCQoJPGgzPlRoZSBQaXp6YSA8L2gzPgoJCglUaGUgZ291cm1ldCBwaXp6YXMgYXJlIGJha2VkIGluIGEgc3BlY2lhbCB3b29kLWJ1cm5pbmcgb3ZlbiB0aGF0IHJlYWNoZXMgdGVtcGVyYXR1cmVzIG9mIHVwIHRvIDkwMCBkZWdyZWVzLiBUaGUgcGl6emFzIGFyZSBhcHByb3hpbWF0ZWx5IDEyIGluY2hlcyBpbiBkaWFtZXRlci4gQW5kIENoZWYgR29uemFsZXogZGVzY3JpYmVzIHRoZSBjcnVzdCBhcyBuZWl0aGVyIHRvbyB0aGluIG9yIHRvbyB0aGljaywgYnV0IHJhdGhlciBzb21ld2hlcmUgcmlnaHQgYmV0d2VlbiBOZWFwb2xpdGFuIGFuZCBTaWNpbGlhbiwg4oCcY3J1bmNoeSBhbmQgdGVuZGVyLCBhbmQganVzdCBleGFjdGx5IHJpZ2h0LuKAnQoJCglUaHJlZSBjbGFzc2ljIHBpenphcyB3aWxsIGJlIGF2YWlsYWJsZSB5ZWFyLXJvdW5kOiBSb3NhLCB3aXRoIHRvbWF0byBzYXVjZSBhbmQgcm9hc3RlZCBnYXJsaWM7IE1hcmdoZXJpdGEsIHdpdGggdG9tYXRvIHNhdWNlIGFuZCBidWZmYWxvIG1venphcmVsbGEsIHRvcHBlZCB3aXRoIGZyZXNoIGJhc2lsOyBhbmQgUG9scGV0dGluaSwgdG9tYXRvIHNhdWNlIGFuZCBwcm92b2xvbmUgY2hlZXNlIHdpdGggdmVhbCBtaW5pLW1lYXRiYWxscy4KCQoJVGhlIHNwZWNpYWx0eSBwaXp6YXMgdGhhdCBhcmUgb24gdGhlIG9wZW5pbmcgd2ludGVyIG1lbnUgaW5jbHVkZTogUGhpbGx5LCB3aXRoIGJlY2hhbWVsLCBwcm92b2xvbmUsIHJvYXN0ZWQgb25pb25zIGFuZCBicmVzYW9sYTsgS2VubmV0dCwgd2l0aCBiZWNoYW1lbCwgY2xhdWRpbyZhY3V0ZTtzIG1venphcmVsbGEsIHJvYXN0ZWQgb25pb25zIHdpdGggb3lzdGVyLCBjcmVtaW5pIGFuZCBzaGl0YWtlIG11c2hyb29tczsgU29wcmVzc2F0YSwgd2l0aCB0b21hdG8gc2F1Y2UsIGNsYXVkaW8mYWN1dGU7cyBtb3p6YXJlbGxhLCBzb3ByZXNzYXRhIG9saXZlcywgcGlja2xlZCByZWQgb25pb24gYW5kIHBlY29yaW5vOyBhbmQgRnJhdGVsbG8sIHdpdGggYmVjaGFtZWwsIGJyb2Njb2xpLCByb2FzdGVkIGdhcmxpYyBhbmQgY2xhdWRpbyZhY3V0ZTtzIG1venphcmVsbGEuCgkKCVBpenphcyB2YXJ5IGluIHByaWNlIGZyb20gJDggdG8gJDEyLgoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxMS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ1Jlc3RhdXJhbnRzJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ1NhbXBsZSBUYWcxJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDI0MykgMjIyLTEyMzQ0JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0BjaGVzdG51dGhpbGxob3RlbC5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vd3d3LnZpbGxhZ2V3aGlza2V5LmNvbS8nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vdmlsbGFnZXdoaXNrZXknLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3ZpbGxhZ2V3aGlza2V5JywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAxMzowMC0yMjowMCIsIlR1IDEzOjAwLTIyOjAwIiwiV2UgMTM6MDAtMjI6MDAiLCJUaCAxMzowMC0yMjowMCIsIkZyIDEzOjAwLTIyOjAwIiwiU2EgMTM6MDAtMjM6MDAiLCJTdSAxNTowMC0yMzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnUGFyYycsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJSWYgeW91IGxvdmUgUGFyaXMgaW4gdGhlIHNwcmluZ3RpbWUsIFBhcmMgaXMgYSB2ZXJpdGFibGUgZ3JhbmQgY3J1LgoJCglXaXRoIFBhcmMsIGZhbWVkIHJlc3RhdXJhdGV1ciBTdGVwaGVuIFN0YXJyIGJyaW5ncyBhIGNlcnRhaW4gamUgbmUgc2FpcyBxdW9pIHRvIFJpdHRlbmhvdXNlIFNxdWFyZS4gUGFyYyBvZmZlcnMgYW4gYXV0aGVudGljIEZyZW5jaCBiaXN0cm8gZXhwZXJpZW5jZSwgZnVsbHkgZXF1aXBwZWQgd2l0aCBhIGNoaWMgUGFyaXNpYW4gYW1iaWFuY2UgYW5kIGdvcmdlb3VzIHNpZGV3YWxrIHNlYXRpbmcgb3Zlcmxvb2tpbmcgdGhlIFNxdWFyZS4KCTxoMz5DdWlzaW5lIDwvaDM+CgkKCVBhcmMgbWVudSBlbmNvdXJhZ2VzIGEgam95ZnVsIGRpbmluZyBleHBlcmllbmNlLCB3aGVyZSBjcm9pc3NhbnRzLCBjaGFtcGFnbmUgYW5kIGNvbnZlcnNhdGlvbiBhcmUgZW5qb3llZCBpbiBlcXVhbCBtZWFzdXJlLgoJCglTYW1wbGUgaG9ycyBk4oCZb2V1dnJlcyBpbmNsdWRlIHNhbGFkZSBseW9ubmFpc2Ugd2l0aCB3YXJtIGJhY29uIHZpbmFpZ3JldHRlIGFuZCBwb2FjaGVkIGVnZywgZXNjYXJnb3RzIHNlcnZlZCBpbiB0aGVpciBzaGVsbHMgd2l0aCBoYXplbG51dCBidXR0ZXIgYW5kIGEgY3Jpc3B5IGR1Y2sgY29uZml0IHdpdGggZnJpc8OpZSBzYWxhZCBhbmQgcGlja2xlZCBjaGFudGVyZWxsZXMuCgkKCU91dHN0YW5kaW5nIGVudHLDqWVzIGluY2x1ZGUgYm9ldWYgYm91cmd1aWdub24gd2l0aCBmcmVzaCBidXR0ZXJlZCBwYXN0YSBhbmQgc3RlYWsgZnJpdGVzIHdpdGggcGVwcGVyY29ybiBzYXVjZS4gQSB2YXJpZXR5IG9mIHBsYXRzIGR1IGpvdXIgYXJlIGFsc28gb2ZmZXJlZCwgaW5jbHVkaW5nIGEgc2VhZm9vZC1yaWNoIGJvdWlsbGFiYWlzc2Ugb24gRnJpZGF5cyBhbmQgYSBzdW1wdHVvdXMgY29xIGF1IHZpbiwgcGVyZmVjdCBmb3IgU3VuZGF5IG5pZ2h0IHN1cHBlcnMuCgkKCUFuZCB3aGF0JmFjdXRlO3MgYW4gYXV0aGVudGljIEZyZW5jaCBtZWFsIHdpdGhvdXQgd2luZT8gTW9yZSB0aGFuIDE2MCBleHBlcnRseSBjaG9zZW4gdmFyaWV0YWxzIGFyZSBvZmZlcmVkIGJ5IHRoZSBib3R0bGUsIHdpdGggbW9yZSB0aGFuIDIwIGF2YWlsYWJsZSBieSB0aGUgZ2xhc3MuCgk8aDM+U2VlIGFuZCBCZSBTZWVuIDwvaDM+CgkKCVdpdGggc2VhdGluZyBmb3IgbW9yZSB0aGFuIDc1IGF0IGl0cyBzaWRld2FsayBhbmQgd2luZG93IHNlYXRpbmcsIFBhcmMgaGFzIGluc3RhbnRseSBiZWNvbWUgb25lIG9mIHRoZSBiZXN0IHBsYWNlcyBpbiBQaGlsYWRlbHBoaWEgZm9yIGFsZnJlc2NvIGRyaW5raW5nIGFuZCBkaW5pbmcuCgkKCVRoZSBhd25pbmctY292ZXJlZCBzZWF0aW5nIHdyYXBzIGFyb3VuZCB0aGUgcmVzdGF1cmFudCZhY3V0ZTtzIHR3byBzaWRlcyBhbmQgb3Zlcmxvb2tzIFJpdHRlbmhvdXNlIFNxdWFyZSwgb25lIG9mIFBoaWxhZGVscGhpYSZhY3V0ZTtzIG1vc3QgcG9wdWxhciBwdWJsaWMgc3BhY2VzLgoJPGgzPkF0bW9zcGhlcmUgPC9oMz4KCQoJVGhlIGFyb21hIG9mIGZyZXNobHkgYmFrZWQgYnJlYWRzIGZpbGxzIHRoZSBhaXIgYXMgb25lIGVudGVycyBQYXJjJmFjdXRlO3MgY2FzdWFsIGZyb250IHJvb20sIHdoaWNoIGlzIGNsYWQgaW4gaGFuZC1sYWlkIFBhcmlzaWFuIHRpbGVzIGluIHNoYWRlcyBvZiBlY3J1IGFuZCBncmVlbi4KCQoJUmVkIGxlYXRoZXIgYmFucXVldHRlcyBmbGFua2VkIGJ5IGZyb3N0ZWQgZ2xhc3Mgb2ZmZXIgc3VidGxlIGludGltYWN5LCB3aGlsZSB3ZWxsLXdvcm4gd29vZGVuIGNoYWlycywgcmVjbGFpbWVkIGJpc3RybyB0YWJsZXMgYW5kIG1haG9nYW55IHBhbmVsZWQgd2FsbHMgZ2l2ZSB0aGUgcm9vbSBhIHNlbnNlIG9mIHBsYWNlLgoJCglUaGUgbW9yZSBmb3JtYWwgZGluaW5nIHJvb20gcHJvdmlkZXMgYSBzbGlnaHRseSBtb3JlIHNvcGhpc3RpY2F0ZWQgZXhwZXJpZW5jZSB3aGlsZSBtYWludGFpbmluZyB0aGUgZW5lcmd5IGFuZCBlbW90aW9uIG9mIGEgYnVzdGxpbmcgYnJhc3NlcmllLgoJCglUbyBwdXQgaXQgc2ltcGx5LCBQYXJjIGlzIG5vdGhpbmcgc2hvcnQgb2YgYW4gYXV0aGVudGljIFBhcmlzaWFuIGRpbmluZyBleHBlcmllbmNlIC0gcmlnaHQgaGVyZSBpbiB0aGUgaGVhcnQgb2YgUml0dGVuaG91c2UgU3F1YXJlLgoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEwLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxMS5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ1Jlc3RhdXJhbnRzJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ1NhbXBsZSBUYWcxJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDE0MykgMjIyLTEyMzQ0JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0BwYXJjLXJlc3RhdXJhbnQuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy5wYXJjLXJlc3RhdXJhbnQuY29tLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9wYXJjLXJlc3RhdXJhbnQnLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3BhcmMtcmVzdGF1cmFudCcsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMTM6MDAtMjI6MDAiLCJUdSAxMzowMC0yMjowMCIsIldlIDEzOjAwLTIyOjAwIiwiVGggMTM6MDAtMjI6MDAiLCJGciAxMzowMC0yMjowMCIsIlNhIDEzOjAwLTIzOjAwIiwiU3UgMTU6MDAtMjM6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ1BlcmN5IFN0cmVldCBCYXJiZWN1ZScsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJUGVyY3kgU3RyZWV0IEJhcmJlY3VlIHNlZXMgdGhlIFNvdXRoIFN0cmVldCBkZWJ1dCBvZiByZXN0YXVyYXRldXJzIFN0ZXZlbiBDb29rIGFuZCBNaWNoYWVsIFNvbG9tb25vdiAoWmFoYXYsIFhvY2hpdGwpLgoJCglTZXJ2aW5nIGEgc3RyYWlnaHRmb3J3YXJkIHNlbGVjdGlvbiBvZiBzbG93bHkgc21va2VkIG1lYXRzIGFuZCBob21leSBzaWRlIGRpc2hlcyBhbG9uZ3NpZGUgY3JhZnQgYmVlcnMgYW5kIHRhc3R5IGNvY2t0YWlscywgUGVyY3kgU3RyZWV0IGlzIGFuIGlkZWFsIHZlbnVlIGZvciBDaGVmIEVyaW4gT1NoZWEgbXVjaC1sYXVkZWQgU291dGhlcm4gY29va2luZywgYW5kIGlzIG9uIGl0cyB3YXkgdG8gYmVjb21lIHRoZSBjaXR5IHRvcCBzcG90IGZvciBiYXJiZWN1ZS4KCQoJV29ya2luZyB3aXRoIEomUiBzbW9rZXJzIHNvdXJjZWQgZnJvbSBUZXhhcywgQ2hlZiBPJmFjdXRlO3NoZWEgYW5kIGhlciBjcmFjayB0ZWFtIG9mIGJhcmJlY3VlIHdpemFyZHMgaGVhZGVkIGRvd24gdG8gVGV4YXMgLSB0ZXN0ZWQgbm8gZmV3ZXIgdGhhbiAyMCBiZWVmIGJyaXNrZXRzIC0gYXMgdGhleSBwZXJmZWN0ZWQgdGhlIGlkZWFsIGJhbGFuY2Ugb2Ygc2FsdCwgc21va2UgYW5kIHNlYXNvbmluZy4gQ2hlY2sgb3V0IHRoaXMgdmlkZW8gYWJvdXQgdGhlaXIgY3VsaW5hcnkgZmllbGQgdHJpcCB0byB0aGUgTG9uZSBTdGFyIFN0YXRlLgoJCgk8aDM+VGhlIEVhdHMgPC9oMz4KCQoJVGhhdCBCcmlza2V0IHdoaWNoIGlzIFBlcmN5IFN0cmVldCZhY3V0ZTtzIHNpZ25hdHVyZSBkaXNoLCBzZXJ2ZWQgLSBhcyBpcyB0aGUgY3VzdG9tIGluIFRleGFzIC0gYnkgdGhlIGhhbGYgcG91bmQgb3IgcG91bmQsIGluIHRocmVlIGRpc3RpbmN0IGN1dHM6IE1vaXN0LCBMZWFuIGFuZCBCdXJudCBFbmRzLgoJCglPdGhlciBtZW51IGl0ZW1zIGluY2x1ZGU6IFNwYXJlIFJpYnM7IGhvdXNlLW1hZGUgU2F1c2FnZTsgaGFsZiBvciB3aG9sZSBDaGlja2VuOyBhbmQgUG9yayBCZWxseSwgYWxsIHNsb3dseSBzbW9rZWQgYW5kIHNlcnZlZCB3aXRoIHdoaXRlIGJyZWFkIGFuZCBwaWNrbGVzLiBTaWRlcywgYXZhaWxhYmxlIHNtYWxsIG9yIGxhcmdlLCBpbmNsdWRlOiBQaW50byBCZWFuczsgR3JlZW4gQmVhbiBDYXNzZXJvbGUsIFJvb3QgYmVlciBDaGlsaSwgQ29sZXNsYXc7IENvbGxhcmQgR3JlZW5zOyBNYWNhcm9uaSBhbmQgQ2hlZXNlOyBhbmQgVmVnYW4gQ2hpbGkuCgk8aDM+VGhlIERyaW5rcyA8L2gzPgoJCglJbiBrZWVwaW5nIHdpdGggdGhlaXIgYmFyZS1ib25lcywgVGV4YXMtZnJvbnRpZXIgYWVzdGhldGljLCBQZXJjeSBTdHJlZXQmYWN1dGU7cyBjcmFmdCBiZWVycyBhcmUgc2VydmVkIGV4Y2x1c2l2ZWx5IG9uIGRyYWZ0IGF0IHRoZSBwb3VyZWQgY29uY3JldGUgYmFyLCBsaXQgZnJvbSBhYm92ZSBieSBpbGx1bWluYXRlZCBncmVlbiBnbGFzcyBiZWVyIGdyb3dsZXJzLiBCZWVycyBpbmNsdWRlIFNseSBGb3ggUmF1Y2hiaWVyIChhdmFpbGFibGUgaW4gUGVubnN5bHZhbmlhIGV4Y2x1c2l2ZWx5IGF0IHRoZSByZXN0YXVyYW50KSBhcyB3ZWxsIGFzIGEgaGFuZC1jcmFmdGVkIFJvb3QgQmVlciBmcm9tIFlhcmQmYWN1dGU7cyBCcmV3aW5nIENvbXBhbnkuCgkKCUNvY2t0YWlscyBpbmNsdWRlOiBGTSA0MjMsIHdpdGggVGl0byBoYW5kbWFkZSB2b2RrYSwgcGVhY2gganVpY2UgYW5kIHN3ZWV0IHRlYTsgSmFjayAmIEdpbmdlciwgd2l0aCBKYWNrIERhbmllbHMsIENhbnRvbiBnaW5nZXIgbGlxdWV1ciwgbGltZSBjb3JkaWFsIGFuZCBnaW5nZXIgYWxlOyBhbmQgQ2hlcnJ5IENvbGEsIHdpdGggQmVhbSByeWUsIGNoZXJyeSBIZWVyaW5nLCBEaVNhcm9ubm8gYW5kIGNvbGEuCgkKCTxoMz5BdG1vc3BoZXJlIDwvaDM+CgkKCVBlcmN5IFN0cmVldCZhY3V0ZTtzIHNpbXBsZSwgcnVzdGljIGRlY29yIHdhcyBjcmVhdGVkIGJ5IEVsaXNhYmV0aCBLbmFwcCwgd2hvIGFsc28gZGVzaWduZWQgQ29vayBhbmQgU29sb21vbm92IFhvY2hpdGwgYW5kIFphaGF2IHJlc3RhdXJhbnRzLgoJCglIZXIgZnJvbnRpZXItaW5mbHVlbmNlZCBkZXNpZ24gZm9jdXNlcyBvbiB0aGUgZmlyZSBlbmdpbmUgcmVkIHNtb2tlcnMsIHZpc2libGUgdGhyb3VnaCBhIHdpbmRvdyBpbiB0aGUgZGluaW5nIHJvb20gYW5kIGJhciBhcmVhLiBUaGUgcmVzdGF1cmFudCBmZWF0dXJlcyBsaWdodCB3b29kIGZsb29ycywgd2VhdGhlcmVkIHJlZCBwYWludCwgYSB3b3JraW5nIGp1a2Vib3ggYW5kIGN1c3RvbSDigJxibGFja2JvYXJkIHdhbGxzLOKAnSBsYXJnZSBwYW5lbHMgb2Ygc2Nob29saG91c2UgYmxhY2tib2FyZHMgdGhhdCBjYW4gYmUgcmVhcnJhbmdlZCB0byBjcmVhdGUgcHJpdmF0ZSBkaW5pbmcgYXJlYXMgdGhyb3VnaG91dCB0aGUgODAtc2VhdCBzcGFjZS4KCQoJU2VhdGluZyBpbiB0aGUgZm9ybSBvZiByZXB1cnBvc2VkIGNodXJjaCBwZXdzLCBhbmQgYmFyZSBsaWdodCBidWxicyBvdmVyaGVhZCBpbiB0aGUgZGluaW5nIHJvb20gbGVuZCB0byB0aGUgcmVzdGF1cmFudCBUZXhhcy1lc3F1ZSBhZXN0aGV0aWMuCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTAuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czQuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdSZXN0YXVyYW50cycsICdGZWF0dXJlJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ1NhbXBsZSBUYWcxJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDE0MykgMjIyLTEyMzQ0JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0BwZXJjeXN0cmVldC5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vd3d3LnBlcmN5c3RyZWV0LmNvbS8nLAoJInR3aXR0ZXIiICAgICAgID0+ICdodHRwOi8vdHdpdHRlci5jb20vcGVyY3lzdHJlZXQnLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL3BlcmN5c3RyZWV0JywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAxMzowMC0yMjowMCIsIlR1IDEzOjAwLTIyOjAwIiwiV2UgMTM6MDAtMjI6MDAiLCJUaCAxMzowMC0yMjowMCIsIkZyIDEzOjAwLTIyOjAwIiwiU2EgMTM6MDAtMjM6MDAiLCJTdSAxNTowMC0yMzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnVGhlIEZvdW50YWluIFJlc3RhdXJhbnQnLAoJInBvc3RfY29udGVudCIgICAgID0+ICcKCVRoZSBGb3VudGFpbiBSZXN0YXVyYW50IGluIHRoZSBGb3VyIFNlYXNvbnMgSG90ZWwgUGhpbGFkZWxwaGlhIGhhcyByZWNlaXZlZCBzZWVtaW5nbHkgZXZlcnkgdHlwZSBvZiBhY2NvbGFkZSB0aGVyZSBpcywgZnJvbSB0b3AgaG9ub3JzIGluIEdvdXJtZXQgbWFnYXppbmUgdG8gRm9yYmVzIFRyYXZlbCBHdWlkZSZhY3V0ZTtzIDIwMTAgRml2ZSBTdGFyIGF3YXJkIHRvIGEgcGVyZmVjdCBGaXZlIERpYW1vbmQgcmF0aW5nIGZyb20gQUFBLiBJdCZhY3V0ZTtzIGJlZW4gYSBQaGlsYWRlbHBoaWEgZmF2b3JpdGUgZm9yIHNwZWNpYWwgb2NjYXNpb24gbWVhbHMgZm9yIGRlY2FkZXMuCgkKCUFkZGl0aW9uYWxseSByYXRlZCBhcyB0aGUgYmVzdCByZXN0YXVyYW50IGluIFBoaWxhZGVscGhpYSBieSBaYWdhdCZhY3V0ZTtzLCB0aGUgRm91bnRhaW4gUmVzdGF1cmFudCBvdmVybG9va3MgdGhlIG1hamVzdGljIFN3YW5uIE1lbW9yaWFsIEZvdW50YWluIHNjdWxwdHVyZSBieSBBbGV4YW5kZXIgU3RpcmxpbmcgQ2FsZGVyIGluIHRoZSBjZW50ZXIgb2YgTG9nYW4gU3F1YXJlLiBZb3UmYWN1dGU7bGwgYWxzbyBlbmpveSBzd2VlcGluZyB2aWV3cyBvZiB0aGUgZ3JhbmQgQmVuamFtaW4gRnJhbmtsaW4gUGFya3dheSBhbmQgaXRzIGdvcmdlb3VzIEJlYXV4IEFydHMgYXJjaGl0ZWN0dXJlLgoJCglGb3VudGFpbiBpcyBkZWZpbml0ZWx5IGFuIGluY3JlZGlibHkgcm9tYW50aWMgcmVzdGF1cmFudCwgc28gaWYgeW91JmFjdXRlO3JlIHZpc2l0aW5nIHdpdGggYSBzcGVjaWFsIHNvbWVvbmUsIHlvdSB3aWxsIHN1cmVseSBpbXByZXNzIHRoZW0gd2l0aCBhIG1lYWwgYXQgRm91bnRhaW4uCgkKCVlvdSBjYW4gb3JkZXIgYSBsYSBjYXJ0ZSBvciBzZWxlY3QgdGhlIHByaXggZml4IG9wdGlvbiB0byBlbmpveSB0aGUg4oCcc3BvbnRhbmVvdXMgdGFzdGVz4oCdIG1lbnUgd2hpY2ggZ2l2ZXMgdGhlIGNoZWYgY29udHJvbCBvZiBhIGZldyBjb3Vyc2VzLiBUaGUgbWVudSBjaGFuZ2VzIHJlZ3VsYXJseSwgYnV0IHlvdSBjYW4gZXhwZWN0IHRvIHNlZSBnbG9iYWx5IGluZmx1ZW5jZWQgaXRlbXMgbGlrZSBQYW4tZnJpZWQgVmVhbCBTd2VldGJyZWFkcywgQnJhaXNlZCBEb3ZlciBTb2xlIFJvdWxhZGUsIFNhdXTDqWVkIFZlbmlzb24gTWVkYWxsaW9ucyBhbmQgUm9hc3RlZCBBdXN0cmFsaWFuIExhbWIgU2FkZGxlLgoJCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTAuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czMuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czQuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdSZXN0YXVyYW50cycgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICdmb29kJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDEwMykgMTAwLTEyMzQ0JywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0Bmb3Vyc2Vhc29ucy5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vd3d3LmZvdXJzZWFzb25zLmNvbS9waGlsYWRlbHBoaWEvZGluaW5nJywKCSJ0d2l0dGVyIiAgICAgICA9PiAnaHR0cDovL3R3aXR0ZXIuY29tL2ZvdXJzZWFzb25zJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9mb3Vyc2Vhc29ucycsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMTM6MDAtMjI6MDAiLCJUdSAxMzowMC0yMjowMCIsIldlIDEzOjAwLTIyOjAwIiwiVGggMTM6MDAtMjI6MDAiLCJGciAxMzowMC0yMjowMCIsIlNhIDEzOjAwLTIzOjAwIiwiU3UgMTU6MDAtMjM6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ0xhY3JvaXggYXQgVGhlIFJpdHRlbmhvdXNlJywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnCglBIGRlbHV4ZSBob3RlbCBsaWtlIFRoZSBSaXR0ZW5ob3VzZSBkZXNlcnZlcyBhIGRlbHV4ZSByZXN0YXVyYW50LCBhIGZpdHRpbmcgZGVzY3JpcHRpb24gZm9yIExhY3JvaXgsIG5hbWVkIOKAnFJlc3RhdXJhbnQgb2YgdGhlIFllYXLigJ0gaW4gMjAwMyBieSBFc3F1aXJlIG1hZ2F6aW5lLgoJCglMb2NhdGVkIG9uIHRoZSBzZWNvbmQgZmxvb3Igb2YgdGhlIFJpdHRlbmhvdXNlIEhvdGVsLCBMYWNyb2l4IGZlYXR1cmVzIGVsZWdhbnQgZMOpY29yIGFuZCBhIGJyb2FkIHZpZXcgb2YgUml0dGVuaG91c2UgU3F1YXJlLCB3aGljaCBjb21iaW5lIHRvIG1ha2UgdGhlIGFtYmlhbmNlIGF0IExhY3JvaXggYXMgZW5qb3lhYmxlIGFzIHRoZSBtZWFsIGl0c2VsZi4KCQoJVGhlIGNyZWF0aXZlIEZyZW5jaCBtZW51IGNoYW5nZXMgd2l0aCB0aGUgc2Vhc29uIGFuZCBpbiB0aGUgcGFzdCBoYXMgaW5jbHVkZWQgZmF2b3JpdGVzIGxpa2UgcHVtcGtpbiBzb3VwIHdpdGggZnJpZWQgc2hhbGxvdHMgYW5kIHR1bmEgc3RlYWsgd2l0aCBzYWxtaXMgc2F1Y2UuIFRoZSB3aW5lIGxpc3QgaXMgZXhjZWxsZW50IGFuZCBleHRlbnNpdmUgLSB0aGFua3MgdG8gdGhlIDQsMDAwLWJvdHRsZSB3aW5lIGNlbGxhciAuCgkKCVRoZSB0YXN0aW5nIG1lbnVzIGNhbiBiZSBjYXRlcmVkIHRvIHlvdXIgcHJlZmVyZW5jZSAtIHRocmVlLSwgZm91ci0gYW5kIGZpdmUtY291cnNlIHNlbGVjdGlvbnMgYXJlIG9mZmVyZWQgYXQgc2V0IHByaWNlcyBkdXJpbmcgbHVuY2ggYW5kIGRpbm5lci4KCQoJU3VuZGF5IEJydW5jaCBhdCBMYWNyb2l4IC0gd2hpY2ggZmVhdHVyZXMgc3VjaCBkZWxlY3RhYmxlIGRpc2hlcyBhcyBiYWJ5IGxhbWIgY2hvcHMgd2l0aCBnYXJsaWMgY3J1c3QgYW5kIGJhbnl1bHMgc2F1Y2UsIG5pbWFuIHJhbmNoIHNtb2tlZCBiYWNvbiwgcXVhaWwgZWdncyB3aXRoIGFydGljaG9rZSwgZ29sZGVuIGJlZXQgYW5kIHNoaWl0YWtlcywgYW5kIGZyZW5jaCBiYWd1ZXR0ZSB0b2FzdCB3aXRoIGFwcGxlLCByYXNwYmVycnkgYW5kIHJvc2VtYXJ5IGphbSAtIGlzIGFsc28gaGlnaGx5IHJlY29tbWVuZGVkLgoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czExLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxMC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNC5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ1Jlc3RhdXJhbnRzJyApICwKCSJwb3N0X3RhZ3MiICAgICA9PiBhcnJheSggJ2Zvb2QnICksCgkidmlkZW8iICAgICAgICAgPT4gJycsCgkicGhvbmUiICAgICAgID0+ICcoMTEzKSAxMjEtMTIzNDQnLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQHJpdHRlbmhvdXNlaG90ZWwuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy5yaXR0ZW5ob3VzZWhvdGVsLmNvbS9sYWNyb2l4LmNmbScsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9yaXR0ZW5ob3VzZWhvdGVsJywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS9yaXR0ZW5ob3VzZWhvdGVsJywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAxMzowMC0yMjowMCIsIlR1IDEzOjAwLTIyOjAwIiwiV2UgMTM6MDAtMjI6MDAiLCJUaCAxMzowMC0yMjowMCIsIkZyIDEzOjAwLTIyOjAwIiwiU2EgMTM6MDAtMjM6MDAiLCJTdSAxNTowMC0yMzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnVGhlIFJpdHRlbmhvdXNlJywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnCglBIGRlbHV4ZSBob3RlbCBsaWtlIFRoZSBSaXR0ZW5ob3VzZSBkZXNlcnZlcyBhIGRlbHV4ZSByZXN0YXVyYW50LCBhIGZpdHRpbmcgZGVzY3JpcHRpb24gZm9yIExhY3JvaXgsIG5hbWVkIOKAnFJlc3RhdXJhbnQgb2YgdGhlIFllYXLigJ0gaW4gMjAwMyBieSBFc3F1aXJlIG1hZ2F6aW5lLgoJCglMb2NhdGVkIG9uIHRoZSBzZWNvbmQgZmxvb3Igb2YgdGhlIFJpdHRlbmhvdXNlIEhvdGVsLCBMYWNyb2l4IGZlYXR1cmVzIGVsZWdhbnQgZMOpY29yIGFuZCBhIGJyb2FkIHZpZXcgb2YgUml0dGVuaG91c2UgU3F1YXJlLCB3aGljaCBjb21iaW5lIHRvIG1ha2UgdGhlIGFtYmlhbmNlIGF0IExhY3JvaXggYXMgZW5qb3lhYmxlIGFzIHRoZSBtZWFsIGl0c2VsZi4KCQoJVGhlIGNyZWF0aXZlIEZyZW5jaCBtZW51IGNoYW5nZXMgd2l0aCB0aGUgc2Vhc29uIGFuZCBpbiB0aGUgcGFzdCBoYXMgaW5jbHVkZWQgZmF2b3JpdGVzIGxpa2UgcHVtcGtpbiBzb3VwIHdpdGggZnJpZWQgc2hhbGxvdHMgYW5kIHR1bmEgc3RlYWsgd2l0aCBzYWxtaXMgc2F1Y2UuIFRoZSB3aW5lIGxpc3QgaXMgZXhjZWxsZW50IGFuZCBleHRlbnNpdmUgLSB0aGFua3MgdG8gdGhlIDQsMDAwLWJvdHRsZSB3aW5lIGNlbGxhciAuCgkKCVRoZSB0YXN0aW5nIG1lbnVzIGNhbiBiZSBjYXRlcmVkIHRvIHlvdXIgcHJlZmVyZW5jZSAtIHRocmVlLSwgZm91ci0gYW5kIGZpdmUtY291cnNlIHNlbGVjdGlvbnMgYXJlIG9mZmVyZWQgYXQgc2V0IHByaWNlcyBkdXJpbmcgbHVuY2ggYW5kIGRpbm5lci4KCQoJU3VuZGF5IEJydW5jaCBhdCBMYWNyb2l4IC0gd2hpY2ggZmVhdHVyZXMgc3VjaCBkZWxlY3RhYmxlIGRpc2hlcyBhcyBiYWJ5IGxhbWIgY2hvcHMgd2l0aCBnYXJsaWMgY3J1c3QgYW5kIGJhbnl1bHMgc2F1Y2UsIG5pbWFuIHJhbmNoIHNtb2tlZCBiYWNvbiwgcXVhaWwgZWdncyB3aXRoIGFydGljaG9rZSwgZ29sZGVuIGJlZXQgYW5kIHNoaWl0YWtlcywgYW5kIGZyZW5jaCBiYWd1ZXR0ZSB0b2FzdCB3aXRoIGFwcGxlLCByYXNwYmVycnkgYW5kIHJvc2VtYXJ5IGphbSAtIGlzIGFsc28gaGlnaGx5IHJlY29tbWVuZGVkLgoJJywKCSJwb3N0X2ltYWdlcyIgICA9PiBhcnJheSgKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czEyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxMy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTQuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czE1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM1LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM2LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM5LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMyLmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHM0LmpwZyIKCSksCgkicG9zdF9jYXRlZ29yeSIgPT4gIGFycmF5KCAnUmVzdGF1cmFudHMnLCAnRm9vZCBOaWdodGxpZmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnZm9vZCcgKSwKCSJ2aWRlbyIgICAgICAgICA9PiAnJywKCSJwaG9uZSIgICAgICAgPT4gJygxMTMpIDEyMS0xMjM0NCcsCgkiZW1haWwiICAgICAgICAgPT4gJ2luZm9AemFtYXJlc3RhdXJhbnQuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy56YW1hcmVzdGF1cmFudC5jb20vJywKCSJ0d2l0dGVyIiAgICAgICA9PiAnaHR0cDovL3R3aXR0ZXIuY29tL3phbWFyZXN0YXVyYW50JywKCSJmYWNlYm9vayIgICAgICA9PiAnaHR0cDovL2ZhY2Vib29rLmNvbS96YW1hcmVzdGF1cmFudCcsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMTM6MDAtMjI6MDAiLCJUdSAxMzowMC0yMjowMCIsIldlIDEzOjAwLTIyOjAwIiwiVGggMTM6MDAtMjI6MDAiLCJGciAxMzowMC0yMjowMCIsIlNhIDEzOjAwLTIzOjAwIiwiU3UgMTU6MDAtMjM6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ1NhbXBhbicsCgkicG9zdF9jb250ZW50IiAgICAgPT4gJwoJQ2hlZiBhbmQgY2hhcmlzbWF0aWMgdGVsZXZpc2lvbiBzdGFyIE1pY2hhZWwgU2NodWxzb24gcmV0dXJucyB0byBQaGlsYWRlbHBoaWEgd2l0aCB0aGUgb3BlbmluZyBvZiBTYW1wYW4sIGEgbW9kZXJuIEFzaWFuIHJlc3RhdXJhbnQgd2hlcmUgaGUgc2VydmVzIHRoZSBhY2NsYWltZWQgY3Vpc2luZSB0aGF0IGhhcyBtYWRlIGhpbSBvbmUgb2YgdGhlIGNvdW50cnkmYWN1dGU7cyBoaWdobHkgc291Z2h0LWFmdGVyIGN1bGluYXJ5IHRhbGVudHMuCgkKCVNjaHVsc29uIHJldHVybnMgdG8gUGhpbGFkZWxwaGlhIGFmdGVyIGhhdmluZyBvcGVuZWQgQnVkZGFrYW4gaW4gTmV3IFlvcmsgQ2l0eSBmb3IgU3RlcGhlbiBTdGFyciBhbmQgSXpha2F5YSBhdCB0aGUgQm9yZ2F0YSBpbiBBdGxhbnRpYyBDaXR5IGFuZCB0aGVuIGhhdmluZyBnb25lIG9uIHRvIHN0YXIgaW4gU3R5bGUgbmV0d29yayZhY3V0ZTtzIHBvcHVsYXIgc2VyaWVzIFBhbnRyeSBSYWlkIGFuZCBUTEMgVWx0aW1hdGUgQ2FrZSBPZmYuCgkKCUNoZWYgU2NodWxzb24gaGFzIGJlZW4gbG9va2luZyBmb3J3YXJkIHRvIGEgdGltZSB3aGVuIGhlIGNvdWxkIGNvbWUgYmFjayB0byBQaGlsYWRlbHBoaWEgYW5kIGNvb2sgaW4gYSBzbWFsbCwgcGVyc29uYWwgc3BhY2UsIHdoaWNoIGhlIGhhcyBub3cgYWNoaWV2ZWQgd2l0aCBTYW1wYW4uIFRvIGhpbSwgU2FtcGFuIGlzIGEgcGxhY2Ugd2hlcmUgaGUgY2FuIHByZXBhcmUgc2VyaW91cyBmb29kIGZyb20gYWNyb3NzIEFzaWEgd2hpbGUgaW50ZXJhY3Rpbmcgd2l0aCBndWVzdHMgYW5kIHNoYXJpbmcgaGlzIGxvdmUgb2YgdGhlIGN1aXNpbmUgd2l0aCB0aGVtLgoJCgk8aDM+RGVzaWduIDwvaDM+CgkKCURlc2lnbmVkIGJ5IFBoaWxhZGVscGhpYSZhY3V0ZTtzIFNwYXJrcyBEZXNpZ24sIFNhbXBhbiBmZWF0dXJlcyBkaXN0cmVzc2VkIG1ldGFscywgcmVjbGFpbWVkIHRpbWJlciBhbmQgYSBydXN0aWMsIG5hdHVyYWwgYWVzdGhldGljIGFuY2hvcmVkIGJ5IGEgY3VzdG9tLWNyYWZ0ZWQsIGNvbG9yIHdhc2hlZCBwYWludGluZyB0aGF0IGxlbmRzIGEgd2FybSBhbWJpYW5jZSB0byB0aGUgc3BhY2UuIEluIGNvbnRyYXN0IHRvIHRoZSBsYXJnZSBzY2FsZSByZXN0YXVyYW50cyBzdWNoIGFzIE1hbmhhdHRhbiZhY3V0ZTtzIEJ1ZGRha2FuIGFuZCBXZXN0IFBoaWxhZGVscGhpYSZhY3V0ZTtzIFBvZCwgd2hlcmUgQ2hlZiBTY2h1bHNvbiBzZXJ2ZWQgYXMgZXhlY3V0aXZlIGNoZWYsIHRoaXMgODAtc2VhdCBnZW0gaXMgYSBjb3p5IHNldHRpbmcgdGhhdCBhbGxvd3MgaGlzIHBhc3Npb24gZm9yIEFzaWFuIGZsYXZvcnMsIHRob3VnaHRmdWxseSBwcmVwYXJlZCwgdG8gc2hpbmUuCgkKCTxoMz5DdWlzaW5lIDwvaDM+CgkKCVNjaHVsc29uJmFjdXRlO3Mgc2F5cyBoaXMgbWlzc2lvbiBhdCBTYW1wYW4gaXMgdG8gbWFrZSB0aGUgbW9yZSBleG90aWMgYW5kIHVuZmFtaWxpYXIgZmxhdm9ycyBvZiBBc2lhbiBjdWlzaW5lIGFjY2Vzc2libGUgYW5kIGludml0aW5nIHRvIEFtZXJpY2FuIHBhbGF0ZXMuCgkKCVNhbXBhbiBtZW51IGlzIGNvbXBvc2VkIG9mIGEgdmFyaWV0eSBvZiBzbWFsbCBwbGF0ZXMgLSBDaGVmIFNjaHVsc29uJmFjdXRlO3MgcHJlZmVycmVkIHdheSB0byBjb29rIGJlY2F1c2UgaXQgaXMgaWRlYWwgZm9yIHNhbXBsaW5nIGFuZCBzaGFyaW5nLiBUZW1wdGluZyBkaXNoZXMgaW5jbHVkZTogaGlzIHNpZ25hdHVyZSBFZGFtYW1lIER1bXBsaW5ncywgd2l0aCB0cnVmZmxlcywgc2hvb3RzIGFuZCBzYWtlIGJyb3RoOyBUaGFpIENoaWNrZW4gV2luZ3Mgd2l0aCBwaWNrbGVzLCBtaW50IGFuZCBiYXNpbDsgUGVraW4gRHVjayB3aXRoIHRhbWFyaW5kIHBhbmNha2VzLCBzY2FsbGlvbnMgYW5kIGN1Y3VtYmVyczsgTGFtYiBTYXRheSB3aXRoIHlha2l0b3JpLCBwZW5rbyBhbmQgZ2luZ2VyOyBDcmlzcHkgQ2hpbGkgQ3JhYiB3aXRoIEhvbmcgS29uZyBub29kbGVzLCBibGFjayBiZWFucyBhbmQgZ2luZ2VyIGNoaXBzOyBNYW8gUGFvIFRvZnUgd2l0aCBwb3JrLCBnaW5nZXIgYW5kIGdhcmxpYzsgYW5kIFdpbGQgTXVzaHJvb20gU2FsYWQgd2l0aCBnb2F0IGNoZWVzZSwgcHVmZmVkIHJpY2UgYW5kIHRydWZmbGVzLgoJCglQcmljZXMgcmFuZ2UgZnJvbSAkNSB0byAkMTkuCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czE3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czQuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdSZXN0YXVyYW50cycsICdGb29kIE5pZ2h0bGlmZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICdyZXN0YXVyYW50JyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDAwMCkgMTExLTIyMjInLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQHNhbXBhbnBoaWxseS5jb20nLAoJIndlYnNpdGUiICAgICAgID0+ICdodHRwOi8vd3d3LnNhbXBhbnBoaWxseS5jb20vJywKCSJ0d2l0dGVyIiAgICAgICA9PiAnaHR0cDovL3R3aXR0ZXIuY29tL3NhbXBhbnBoaWxseScsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vc2FtcGFucGhpbGx5JywKCSJidXNpbmVzc19ob3VycyI9PiAnWyJNbyAxMzowMC0yMjowMCIsIlR1IDEzOjAwLTIyOjAwIiwiV2UgMTM6MDAtMjI6MDAiLCJUaCAxMzowMC0yMjowMCIsIkZyIDEzOjAwLTIyOjAwIiwiU2EgMTM6MDAtMjM6MDAiLCJTdSAxNTowMC0yMzowMCJdJywKCSJwb3N0X2R1bW15IiAgICA9PiAnMScKKTsKCiRkdW1teV9wb3N0c1tdID0gYXJyYXkoCgkicG9zdF90eXBlIiAgPT4gJHBvc3RfdHlwZSwKCSJwb3N0X3RpdGxlIiAgICA9PiAnTW9yaW1vdG8nLAoJInBvc3RfY29udGVudCIgICAgID0+ICcKCVN0ZXBoZW4gU3RhcnIgY3JlYXRpdmUgSmFwYW5lc2UgcmVzdGF1cmFudCBoYXMgZ2FybmVyZWQgYWxsIGtpbmRzIG9mIG5hdGlvbmFsIGFuZCBpbnRlcm5hdGlvbmFsIGF0dGVudGlvbiBzaW5jZSBvcGVuaW5nIGEgZmV3IHllYXJzIGJhY2suIExvY2F0ZWQgYSBibG9jayBmcm9tIEluZGVwZW5kZW5jZSBIYWxsIG9uIENoZXN0bnV0IFN0cmVldCwgTW9yaW1vdG8gaGFzIGFuIGludGVyaW9yIC0gYXdhc2ggaW4gZ2xhc3MgYW5kIGNvbG9ycyAtIHRoYXQgaXMgYm90aCBzdHJpa2luZyBhbmQgc2VyZW5lIGluIGl0cyBkZXNpZ24uCgkKCVRoZSByZXN0YXVyYW50JmFjdXRlO3MgbmFtZXNha2UgYW5kIGhlYWQgY2hlZiwgTW9yaW1vdG8gKG9mIEZvb2QgTmV0d29yayZhY3V0ZTtzIElyb24gQ2hlZiBmYW1lKSwgaGFzIGNyZWF0ZWQgYSBtZW51IG9mZmVyaW5nIHRoZSB2ZXJ5IGJlc3QgaW4gY29udGVtcG9yYXJ5IEphcGFuZXNlIGN1c2luZS4gV2hpbGUgcmVndWxhcnMgZmxvY2sgaGVyZSBmb3IgdGhlIGV4cXVpc2l0ZWx5IHByZXBhcmVkIHN1c2hpLCBNb3JpbW90byBvZmZlcnMgZGluZXJzIGEgYnJvYWQgc3BlY3RydW0gb2YgZmxhdm9ycyB0aGF0IGRlbHZlIGJleW9uZCBuaWdpcmkgYW5kIHNhc2hpbWkuCgkKCUluIHJlY2VudCB5ZWFycywgdGhlIHJlc3RhdXJhbnQgaGFzIG1hZGUgaXQgb250byBHb3VybWV0IG1hZ2F6aW5lJmFjdXRlO3Mg4oCcQmVzdCBSZXN0YXVyYW50cyBpbiBBbWVyaWNh4oCdIGxpc3QgYW5kIENvbmRlIE5hc3QgVHJhdmVsZXIgbWFnYXppbmUgNTAgSG90IFRhYmxlcyBpbiBBbWVyaWNhLiBUb2RheSBNb3JpbW90byByZW1haW5zIG9uZSBvZiB0aGUgaG90dGVzdCBzcG90cyB0byBkaW5lIGluIENlbnRlciBDaXR5IGFuZCBjb250aW51ZXMgdG8gcmVjZWl2ZSByYXZlIHJldmlld3MgZnJvbSByZWd1bGFycyBhbmQgZmlyc3QtdGltZXJzIGFsaWtlLgoJCglUaGF0IHNhaWQsIGJlIHN1cmUgdG8gY2FsbCBhaGVhZCBmb3IgcmVzZXJ2YXRpb25zLgoJCgk8aDM+SW5zaWRlciBUaXAgPC9oMz4KCQoJVGhlIG1lenphbmluZSBsZXZlbCBsb3VuZ2UgaXMgYSBncmVhdCBzcG90IHRvIGhhdmUgYSBwcmUtbWVhbCBjb2NrdGFpbCB3aGlsZSB3YWl0aW5nIGZvciB5b3VyIHRhYmxlLiBZb3UgY2FuIGVuam95IGEgc2FrZSBvciB0cnkgYSDigJxTYWt1cmHigJ0gLSBhIGNvc21vIG1hZGUgd2l0aCBTYWtlIC0gaW4gdGhlIHNsZWVrIHNwYWNlIHRoYXQgb3Zlcmxvb2tzIHRoZSBicmlsbGlhbnQgcmVzdGF1cmFudCBiZWxvdy4KCScsCgkicG9zdF9pbWFnZXMiICAgPT4gYXJyYXkoCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czE4LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNy5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzOS5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMi5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzNC5qcGciCgkpLAoJInBvc3RfY2F0ZWdvcnkiID0+ICBhcnJheSggJ1Jlc3RhdXJhbnRzJywgJ0Zvb2QgTmlnaHRsaWZlJywgJ0ZlYXR1cmUnICkgLAoJInBvc3RfdGFncyIgICAgID0+IGFycmF5KCAnQW1lcmljYScgKSwKCSJ2aWRlbyIgICAgICAgICA9PiAnJywKCSJwaG9uZSIgICAgICAgPT4gJygwMDApIDExMS0yMjIyJywKCSJlbWFpbCIgICAgICAgICA9PiAnaW5mb0Btb3JpbW90b3Jlc3RhdXJhbnQuY29tJywKCSJ3ZWJzaXRlIiAgICAgICA9PiAnaHR0cDovL3d3dy5tb3JpbW90b3Jlc3RhdXJhbnQuY29tLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9tb3JpbW90b3Jlc3RhdXJhbnQnLAoJImZhY2Vib29rIiAgICAgID0+ICdodHRwOi8vZmFjZWJvb2suY29tL21vcmltb3RvcmVzdGF1cmFudCcsCgkiYnVzaW5lc3NfaG91cnMiPT4gJ1siTW8gMTM6MDAtMjI6MDAiLCJUdSAxMzowMC0yMjowMCIsIldlIDEzOjAwLTIyOjAwIiwiVGggMTM6MDAtMjI6MDAiLCJGciAxMzowMC0yMjowMCIsIlNhIDEzOjAwLTIzOjAwIiwiU3UgMTU6MDAtMjM6MDAiXScsCgkicG9zdF9kdW1teSIgICAgPT4gJzEnCik7CgokZHVtbXlfcG9zdHNbXSA9IGFycmF5KAoJInBvc3RfdHlwZSIgID0+ICRwb3N0X3R5cGUsCgkicG9zdF90aXRsZSIgICAgPT4gJ0J1ZGRha2FuJywKCSJwb3N0X2NvbnRlbnQiICAgICA9PiAnCgk8aDM+VGhlIEV4cGVyaWVuY2UgPC9oMz4KCQoJQSB0b3dlcmluZyBnaWxkZWQgc3RhdHVlIG9mIHRoZSBCdWRkaGEgZ2VuZXJhdGVzIGVsZWdhbnQgY2FsbSBpbiB0aGlzIDE3NS1zZWF0LCBQYW4gQXNpYW4gcmVzdGF1cmFudCB3aXRoIHNsZWVrLCBtb2Rlcm4gZGVjb3IuIEltbWVuc2VseSBwb3B1bGFyLCBCdWRkYWthbiBpcyBhIHJlc3RhdXJhbnQgdGhhdCBpcyBncmVhdCBmb3IgYm90aCBsYXJnZSBwYXJ0aWVzIGFuZCBpbnRpbWF0ZSBkaW5uZXJzLgoJCglMb2NhdGVkIGluIHRoZSBoZWFydCBvZiB0aGUgYnVzdGxpbmcgT2xkIENpdHkgbmVpZ2hib3Job29kLCBCdWRkYWthbiBmZWF0dXJlcyB0d28gZnVsbCBiYXJzIGFzIHdlbGwgYXMgYSBwb3B1bGFyIChhbmQgaGFyZCB0byByZXNlcnZlKSAyMC1wZXJzb24sIGxpdC1mcm9tLXdpdGhpbiwgY29tbXVuaXR5IHRhYmxlIGZvciBzaGFyaW5nIGZvb2QgYW5kIGNvbnZlcnNhdGlvbi4KCQoJVGhlIGZhcmUgaXMgdG9wIG5vdGNoIC0gYXBwZXRpemVycyBpbmNsdWRlIHNlYXJlZCBrb2JlIGJlZWYgY2FycGFjY2lvLCBlbmRhbW1lIHJhdmlvbGksIG1pc28gdHVuYSB0YXJ0YXJlIGFuZCB0ZWEgc21va2VkIHNwYXJlcmlicy4gRm9yIHRoZSBtYWluIGNvdXJzZSwgZGVsdmUgaW50byBkZWxpY2lvdXMgZGlzaGVzIGxpa2UgSmFwYW5lc2UgYmxhY2sgY29kLCB3YXNhYmkgY3J1c3RlZCBmaWxldCBtaWdub24sIHJvYXN0ZWQgcG9uenUgY2hpY2tlbiBhbmQgY29sbG9zYWwgdGVtcHVyYSBzaHJpbXAuIEZvciBkZXNzZXJ0LCB0aGUgY2hvY29sYXRlIGJlbnRvIGJveCB3aWxsIHBsZWFzZSBqdXN0IGFib3V0IGFueW9uZS4KCQoJQmUgc3VyZSB0byBtYWtlIHlvdXIgcmVzZXJ2YXRpb24gYmVmb3JlIGNvbWluZyB0byB0b3duIGFzIEJ1ZGRha2FuIGZpbGxzIHVwIHF1aWNrbHkgZXNwZWNpYWxseSBvbiB3ZWVrZW5kcy4gQmV0dGVyIHlldCwgbWFrZSB5b3VyIHJlc2VydmF0aW9uIHJpZ2h0IG5vdyAuCgknLAoJInBvc3RfaW1hZ2VzIiAgID0+IGFycmF5KAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czE3LmpwZyIsCgkJIiRkdW1teV9pbWFnZV91cmwvcmVzdGF1cmFudHMxOC5qcGciLAoJCSIkZHVtbXlfaW1hZ2VfdXJsL3Jlc3RhdXJhbnRzMTkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czUuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czYuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czcuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czguanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czkuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czIuanBnIiwKCQkiJGR1bW15X2ltYWdlX3VybC9yZXN0YXVyYW50czQuanBnIgoJKSwKCSJwb3N0X2NhdGVnb3J5IiA9PiAgYXJyYXkoICdSZXN0YXVyYW50cycsICdGb29kIE5pZ2h0bGlmZScgKSAsCgkicG9zdF90YWdzIiAgICAgPT4gYXJyYXkoICdBbWVyaWNhJyApLAoJInZpZGVvIiAgICAgICAgID0+ICcnLAoJInBob25lIiAgICAgICA9PiAnKDAwMCkgMTExLTIyMjInLAoJImVtYWlsIiAgICAgICAgID0+ICdpbmZvQGJ1ZGRha2FuLmNvbScsCgkid2Vic2l0ZSIgICAgICAgPT4gJ2h0dHA6Ly93d3cuYnVkZGFrYW4uY29tLycsCgkidHdpdHRlciIgICAgICAgPT4gJ2h0dHA6Ly90d2l0dGVyLmNvbS9idWRkYWthbicsCgkiZmFjZWJvb2siICAgICAgPT4gJ2h0dHA6Ly9mYWNlYm9vay5jb20vYnVkZGFrYW4nLAoJImJ1c2luZXNzX2hvdXJzIj0+ICdbIk1vIDEzOjAwLTIyOjAwIiwiVHUgMTM6MDAtMjI6MDAiLCJXZSAxMzowMC0yMjowMCIsIlRoIDEzOjAwLTIyOjAwIiwiRnIgMTM6MDAtMjI6MDAiLCJTYSAxMzowMC0yMzowMCIsIlN1IDE1OjAwLTIzOjAwIl0nLAoJInBvc3RfZHVtbXkiICAgID0+ICcxJwopOwoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";