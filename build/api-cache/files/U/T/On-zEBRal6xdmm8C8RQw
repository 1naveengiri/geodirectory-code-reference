1683893082
oo20z%2BoyWz%3A95ad3ba38c193eb2ef0550095ebf67d8-cc7953edd6865a3869e3f9e964d4b232
s:62584:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MjM6IkRpc3BsYXkgQWRkIExpc3RpbmcgTWFwIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjQyNzoiVGhpcyB0ZW1wbGF0ZSBjYW4gYmUgb3ZlcnJpZGRlbiBieSBjb3B5aW5nIGl0IHRvIHlvdXJ0aGVtZS9nZW9kaXJlY3RvcnkvbWFwLnBocC4KCkhPV0VWRVIsIG9uIG9jY2FzaW9uIEdlb0RpcmVjdG9yeSB3aWxsIG5lZWQgdG8gdXBkYXRlIHRlbXBsYXRlIGZpbGVzIGFuZCB5b3UKKHRoZSB0aGVtZSBkZXZlbG9wZXIpIHdpbGwgbmVlZCB0byBjb3B5IHRoZSBuZXcgZmlsZXMgdG8geW91ciB0aGVtZSB0bwptYWludGFpbiBjb21wYXRpYmlsaXR5LiBXZSB0cnkgdG8gZG8gdGhpcyBhcyBsaXR0bGUgYXMgcG9zc2libGUsIGJ1dCBpdCBkb2VzCmhhcHBlbi4gV2hlbiB0aGlzIG9jY3VycyB0aGUgdmVyc2lvbiBvZiB0aGUgdGVtcGxhdGUgZmlsZSB3aWxsIGJlIGJ1bXBlZCBhbmQKdGhlIHJlYWRtZSB3aWxsIGxpc3QgYW55IGltcG9ydGFudCBjaGFuZ2VzLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjU6e2k6MDtPOjQyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xTZWUiOjM6e3M6NzoiACoAbmFtZSI7czozOiJzZWUiO3M6OToiACoAcmVmZXJzIjtPOjUyOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xSZWZlcmVuY2VcVXJsIjoxOntzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmVmZXJlbmNlXFVybAB1cmkiO3M6NjY6Imh0dHBzOi8vZG9jcy53cGdlb2RpcmVjdG9yeS5jb20vYXJ0aWNsZS8zNDYtY3VzdG9taXppbmctdGVtcGxhdGVzLyI7fXM6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO31pOjE7Tzo0NjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcR2VuZXJpYyI6Mjp7czo3OiIAKgBuYW1lIjtzOjc6InBhY2thZ2UiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjEyOiJHZW9EaXJlY3RvcnkiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjI7Tzo0NjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcVmVyc2lvbiI6Mzp7czo3OiIAKgBuYW1lIjtzOjc6InZlcnNpb24iO3M6NTU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xWZXJzaW9uAHZlcnNpb24iO3M6NToiMi4yLjYiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fWk6MztPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6NjoiZ2xvYmFsIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czo0MjoiaW50ICRtYXB6b29tIFpvb20gbGV2ZWwgdmFsdWUgZm9yIHRoZSBtYXAuIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aTo0O086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czo2OiJnbG9iYWwiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjQ0OiJib29sICRnZW9kaXJfbWFudWFsX21hcCBDaGVjayBpZiBtYW51YWwgbWFwLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiY2M3OTUzZWRkNjg2NWEzODY5ZTNmOWU5NjRkNGIyMzIiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZSI7czo3OiJtYXAucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MzA6Imdlb2RpcmVjdG9yeS90ZW1wbGF0ZXMvbWFwLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NDI5ODc6Ijw/cGhwCi8qKgogKiBEaXNwbGF5IEFkZCBMaXN0aW5nIE1hcAogKgogKiBUaGlzIHRlbXBsYXRlIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGNvcHlpbmcgaXQgdG8geW91cnRoZW1lL2dlb2RpcmVjdG9yeS9tYXAucGhwLgogKgogKiBIT1dFVkVSLCBvbiBvY2Nhc2lvbiBHZW9EaXJlY3Rvcnkgd2lsbCBuZWVkIHRvIHVwZGF0ZSB0ZW1wbGF0ZSBmaWxlcyBhbmQgeW91CiAqICh0aGUgdGhlbWUgZGV2ZWxvcGVyKSB3aWxsIG5lZWQgdG8gY29weSB0aGUgbmV3IGZpbGVzIHRvIHlvdXIgdGhlbWUgdG8KICogbWFpbnRhaW4gY29tcGF0aWJpbGl0eS4gV2UgdHJ5IHRvIGRvIHRoaXMgYXMgbGl0dGxlIGFzIHBvc3NpYmxlLCBidXQgaXQgZG9lcwogKiBoYXBwZW4uIFdoZW4gdGhpcyBvY2N1cnMgdGhlIHZlcnNpb24gb2YgdGhlIHRlbXBsYXRlIGZpbGUgd2lsbCBiZSBidW1wZWQgYW5kCiAqIHRoZSByZWFkbWUgd2lsbCBsaXN0IGFueSBpbXBvcnRhbnQgY2hhbmdlcy4KICoKICogQHNlZSAgICAgICAgaHR0cHM6Ly9kb2NzLndwZ2VvZGlyZWN0b3J5LmNvbS9hcnRpY2xlLzM0Ni1jdXN0b21pemluZy10ZW1wbGF0ZXMvCiAqIEBwYWNrYWdlICAgIEdlb0RpcmVjdG9yeQogKiBAdmVyc2lvbiAgICAyLjIuNgogKgogKiBAZ2xvYmFsIGludCAkbWFwem9vbSBab29tIGxldmVsIHZhbHVlIGZvciB0aGUgbWFwLgogKiBAZ2xvYmFsIGJvb2wgJGdlb2Rpcl9tYW51YWxfbWFwIENoZWNrIGlmIG1hbnVhbCBtYXAuCiAqLwoKLyoqCiAqIEBnbG9iYWwgaW50ICRtYXB6b29tIFpvb20gbGV2ZWwgdmFsdWUgZm9yIHRoZSBtYXAuCiAqIEBnbG9iYWwgYm9vbCAkZ2VvZGlyX21hbnVhbF9tYXAgQ2hlY2sgaWYgbWFudWFsIG1hcC4KICovCmdsb2JhbCAkbWFwem9vbSwgJGdlb2Rpcl9tYW51YWxfbWFwOwoKLyoqCiAqIEZpbHRlciB0aGUgbWFwIHJlc3RyaWN0aW9uIGZvciBzcGVjaWZpYyBhZGRyZXNzIG9ubHkKICoKICogQHNpbmNlIDEuMC4wCiAqCiAqIEBwYXJhbSBib29sICR2YXIgV2hldGhlciB0byByZXN0cmljdCB0aGUgbWFwIGZvciBzcGVjaWZpYyBhZGRyZXNzIG9ubHkuCiAqLwokaXNfbWFwX3Jlc3RyaWN0ID0gYXBwbHlfZmlsdGVycygnZ2VvZGlyX2FkZF9saXN0aW5nX21hcF9yZXN0cmljdCcsIHRydWUpOwoKLyoqCiAqIEZpbHRlciB0aGUgYXV0byBjaGFuZ2UgYWRkcmVzcyBmaWVsZHMgdmFsdWVzIHdoZW4gbW92aW5nIHRoZSBtYXAgcGluCiAqCiAqIEBzaW5jZSAxLjQuOAogKgogKiBAcGFyYW0gYm9vbCAkdmFyIFdoZXRoZXIgdG8gY2hhbmdlIHRoZSBjb3VudHJ5LCBzdGF0ZSwgY2l0eSB2YWx1ZXMgaW4gZmllbGRzLgogKi8KJGF1dG9fY2hhbmdlX2FkZHJlc3NfZmllbGRzX3Bpbl9tb3ZlID0gYXBwbHlfZmlsdGVycygnZ2VvZGlyX2F1dG9fY2hhbmdlX2FkZHJlc3NfZmllbGRzX3Bpbl9tb3ZlJywgdHJ1ZSk7Cmdsb2JhbCAkZ2VvZGlyZWN0b3J5OwokZGVmYXVsdF9sb2NhdGlvbiA9ICRnZW9kaXJlY3RvcnktPmxvY2F0aW9uLT5nZXRfZGVmYXVsdF9sb2NhdGlvbigpOwokZGVmYXVsdGNpdHkgPSBpc3NldCgkZGVmYXVsdF9sb2NhdGlvbi0+Y2l0eSkgPyAkZGVmYXVsdF9sb2NhdGlvbi0+Y2l0eSA6ICcnOwokbGF0X2xuZ19ibGFuayA9IGZhbHNlOwppZiAoICghaXNzZXQoJGxhdCkgfHwgJGxhdCA9PSAnJyApICYmICghaXNzZXQoJGxhdCkgfHwgJGxuZyA9PSAnJykpIHsKICAgICRsYXRfbG5nX2JsYW5rID0gdHJ1ZTsKICAgICRjaXR5ID0gJGRlZmF1bHRjaXR5OwogICAgJHJlZ2lvbiA9IGlzc2V0KCRkZWZhdWx0X2xvY2F0aW9uLT5yZWdpb24pID8gJGRlZmF1bHRfbG9jYXRpb24tPnJlZ2lvbiA6ICcnOwogICAgJGNvdW50cnkgPSBpc3NldCgkZGVmYXVsdF9sb2NhdGlvbi0+Y291bnRyeSkgPyAkZGVmYXVsdF9sb2NhdGlvbi0+Y291bnRyeSA6ICcnOwogICAgJGxuZyA9IGlzc2V0KCRkZWZhdWx0X2xvY2F0aW9uLT5sb25naXR1ZGUpID8gJGRlZmF1bHRfbG9jYXRpb24tPmxvbmdpdHVkZSA6ICcnOwogICAgJGxhdCA9IGlzc2V0KCRkZWZhdWx0X2xvY2F0aW9uLT5sYXRpdHVkZSkgPyAkZGVmYXVsdF9sb2NhdGlvbi0+bGF0aXR1ZGUgOiAnJzsKfQokZGVmYXVsdF9sbmcgPSBpc3NldCgkZGVmYXVsdF9sb2NhdGlvbi0+bG9uZ2l0dWRlKSA/ICRkZWZhdWx0X2xvY2F0aW9uLT5sb25naXR1ZGUgOiAnJzsKJGRlZmF1bHRfbGF0ID0gaXNzZXQoJGRlZmF1bHRfbG9jYXRpb24tPmxhdGl0dWRlKSA/ICRkZWZhdWx0X2xvY2F0aW9uLT5sYXRpdHVkZSA6ICcnOwppZiAoaXNfYWRtaW4oKSAmJiBpc3NldCgkX1JFUVVFU1RbJ3RhYiddKSAmJiAkbWFwem9vbSA9PSAnJykgewogICAgJG1hcHpvb20gPSA0OwogICAgaWYgKGlzc2V0KCRfUkVRVUVTVFsnYWRkX2hvb2QnXSkpCiAgICAgICAgJG1hcHpvb20gPSAxMDsKfQoKLyoqCiAqIEZpbHRlciB0aGUgYXV0byBjaGFuZ2UgYWRkcmVzcyBmaWVsZHMgdmFsdWVzCiAqCiAqIEBzaW5jZSAxLjAuMAogKgogKiBAcGFyYW0gYm9vbCAkdmFyIFdoZXRoZXIgdG8gYXV0byBmaWxsIGNvdW50cnksIHN0YXRlLCBjaXR5IHZhbHVlcyBpbiBmaWVsZHMuCiAqLwokYXV0b19jaGFuZ2VfbWFwX2ZpZWxkcyA9IGFwcGx5X2ZpbHRlcnMoJ2dlb2Rpcl9hdXRvX2NoYW5nZV9tYXBfZmllbGRzJywgdHJ1ZSk7CiRtYXJrZXJfaWNvbiA9IEdlb0Rpcl9NYXBzOjpkZWZhdWx0X21hcmtlcl9pY29uKCB0cnVlICk7CiRpY29uX3NpemUgPSBHZW9EaXJfTWFwczo6Z2V0X21hcmtlcl9zaXplKCRtYXJrZXJfaWNvbiwgYXJyYXkoJ3cnID0+IDIwLCAnaCcgPT4gMzQpKTsKPz4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgLyogPCFbQ0RBVEFbICovCiAgICA8P3BocCAKCS8qKgoJICogRmlyZXMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhZGQgamF2YXNjcmlwdCBvbiB0aGUgYWRkIGxpc3RpbmdzIG1hcC4KCSAqCgkgKiBAc2luY2UgMS4wLjAKICAgICAqIEBwYXJhbSBzdHJpbmcgJHByZWZpeCBUaGUgcHJlZml4IGZvciBhbGwgZWxlbWVudHMuCgkgKi8KCWRvX2FjdGlvbignZ2VvZGlyX2FkZF9saXN0aW5nX2pzX3N0YXJ0JywgJHByZWZpeCk7Cgk/PgogICAgaWYgKCh3aW5kb3cuZ2RTZXRNYXA9PSdnb29nbGUnIHx8IHdpbmRvdy5nZFNldE1hcD09J2F1dG8nKSAmJiB3aW5kb3cuZ29vZ2xlICYmIHR5cGVvZiBnb29nbGUubWFwcyE9PSd1bmRlZmluZWQnKSB7CiAgICAgICAgZ2RNYXBzID0gJ2dvb2dsZSc7CiAgICB9IGVsc2UgaWYgKCh3aW5kb3cuZ2RTZXRNYXA9PSdvc20nIHx8IHdpbmRvdy5nZFNldE1hcD09J2F1dG8nKSAmJiB0eXBlb2YgTCE9PSd1bmRlZmluZWQnICYmIHR5cGVvZiBMLnZlcnNpb24hPT0ndW5kZWZpbmVkJykgewogICAgICAgIGdkTWFwcyA9ICdvc20nOwogICAgfSBlbHNlIHsKICAgICAgICBnZE1hcHMgPSBudWxsOwogICAgfQogICAgd2luZG93LmdkTWFwcyA9IHdpbmRvdy5nZE1hcHMgfHwgZ2RNYXBzOwogICAgCiAgICB1c2VyX2FkZHJlc3MgPSBmYWxzZTsKICAgIGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nc3RyZWV0Jzs/PicpLm9uKCJrZXlwcmVzcyIsZnVuY3Rpb24gKCkgewogICAgICAgIHVzZXJfYWRkcmVzcyA9IHRydWU7CiAgICB9KTsKCiAgICBiYXNlTWFya2VyID0gJyc7CiAgICBnZW9jb2RlciA9ICcnOwogICAgdmFyIDw/cGhwIGVjaG8gJHByZWZpeDs/PkNJVFlfTUFQX0NFTlRFUl9MQVQgPSA8P3BocCBlY2hvICggJGxhdCA/IGdlb2Rpcl9zYW5pdGl6ZV9mbG9hdCggJGxhdCApIDogJzM5Ljk1MjQ4NCcgKTsgPz47CiAgICB2YXIgPD9waHAgZWNobyAkcHJlZml4Oz8+Q0lUWV9NQVBfQ0VOVEVSX0xORyA9IDw/cGhwIGVjaG8gKCAkbG5nID8gZ2VvZGlyX3Nhbml0aXplX2Zsb2F0KCAkbG5nICkgOiAnLTc1LjE2Mzc4NicgKTsgPz47CiAgICA8P3BocCBpZigkbGF0X2xuZ19ibGFuayl7JGxhdD0nJzskbG5nPScnO30/PgogICAgdmFyIDw/cGhwIGVjaG8gJHByZWZpeDs/PkNJVFlfTUFQX1pPT01JTkdfRkFDVCA9IDw/cGhwIGVjaG8gKCRtYXB6b29tKSA/IGFic2ludCggJG1hcHpvb20gKSA6IDEyOz8+OwogICAgdmFyIG1pblpvb21MZXZlbCA9IDw/cGhwIGVjaG8gKCRpc19tYXBfcmVzdHJpY3QpID8gNSA6IDA7ID8+OwogICAgdmFyIG1hcExhbmcgPSAnPD9waHAgZWNobyBlc2NfanMoIEdlb0Rpcl9NYXBzOjptYXBfbGFuZ3VhZ2UoKSApOyA/Pic7CiAgICB2YXIgb2xkc3RyX2FkZHJlc3M7CiAgICB2YXIgb2xkc3RyX2FkZHJlc3MyOwogICAgdmFyIG9sZHN0cl96aXA7CiAgICB2YXIgc3RyaWN0Qm91bmRzOwogICAgdmFyIGRvaW5nR2VvY29kZSA9IGZhbHNlOwogICAgZnVuY3Rpb24gZ2VvY29kZVBvc2l0aW9uKGxhdExvbiwgYWRkcmVzcykgewogICAgICAgIGNvbnNvbGUubG9nKGFkZHJlc3MpOwogICAgICAgIGlmIChhZGRyZXNzICYmIChhZGRyZXNzLmxvY2FsaXR5IHx8IGFkZHJlc3MucG9zdGFsX3Rvd24pICYmIGFkZHJlc3MuY291bnRyeSE9J1RSJyAmJiBhZGRyZXNzLmNvdW50cnkhPSdTRycgKSB7Ly8gdHVya2V5IHNlbGVjdCBhZGRyZXNzIGRvZXMgbm90IHJldHVybiBlbm91Z2ggaW5mbyBzbyB3ZSBnZXQgaW5mbyBmcm9tIEdQUyBvbmx5LgogICAgICAgICAgICBkb0dlb0NvZGUgPSBhZGRyZXNzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRvR2VvQ29kZSA9IHsKICAgICAgICAgICAgICAgIGxhdExuZzogYmFzZU1hcmtlci5nZXRQb3NpdGlvbigpCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKGRvR2VvQ29kZSwgZnVuY3Rpb24gKHJlc3BvbnNlcykgewogICAgICAgICAgICBnZW9jb2RlUmVzcG9uc2UocmVzcG9uc2VzKTsKICAgICAgICB9KTsKICAgIH0KICAgIAogICAgZnVuY3Rpb24gZ2VvY29kZVJlc3BvbnNlKHJlc3BvbnNlcykgewogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlcyk7Ly9rZWVwIHRoaXMgZm9yIGRlYnVnZ2luZwogICAgICAgIGlmIChyZXNwb25zZXMgJiYgcmVzcG9uc2VzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdmFyIGdldEFkZHJlc3MgPSAnJzsKICAgICAgICAgICAgdmFyIGdldEFkZHJlc3MyID0gJyc7CiAgICAgICAgICAgIHZhciBnZXRaaXAgPSAnJzsKICAgICAgICAgICAgdmFyIGdldENpdHkgPSAnJzsKICAgICAgICAgICAgdmFyIGdldFN0YXRlID0gJyc7CiAgICAgICAgICAgIHZhciBnZXRDb3VudHJ5ID0gJyc7CgogICAgICAgICAgICBnZXRDb3VudHJ5SVNPID0gJyc7CgogICAgICAgICAgICBmb3JtYXR0ZWRfYWRkcmVzcyA9ICcnOwogICAgICAgICAgICBzdHJlZXRfbnVtYmVyID0gJyc7CiAgICAgICAgICAgIHByZW1pc2UgPSAnJzsgLy8gSW4gUnVzc2lhbiA7CiAgICAgICAgICAgIGVzdGFibGlzaG1lbnQgPSAnJzsKICAgICAgICAgICAgcm91dGUgPSAnJzsKICAgICAgICAgICAgYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xID0gJyc7CiAgICAgICAgICAgIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMiA9ICcnOwogICAgICAgICAgICBhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzMgPSAnJzsKICAgICAgICAgICAgc3VibG9jYWxpdHlfbGV2ZWxfMSA9ICcnOwogICAgICAgICAgICBwb3N0YWxfdG93biA9ICcnOwogICAgICAgICAgICBsb2NhbGl0eSA9ICcnOwogICAgICAgICAgICBjb3VudHJ5ID0gJyc7CiAgICAgICAgICAgIHBvc3RhbF9jb2RlID0gJyc7CiAgICAgICAgICAgIHBvc3RhbF9jb2RlX3ByZWZpeCA9ICcnOwogICAgICAgICAgICByciA9ICcnOwogICAgICAgICAgICBoYXNfYWRkcmVzc19iZWVuX3NldCA9IGZhbHNlOwoKICAgICAgICAgICAgLy8gZ2V0IHRoZSBwcm9wZXIgcmVzcG9uc2UgYXMgc29tdGltZXMgdGhlIEdQUyByZXN1bHRzIHdpbGwgcmV0dXJuIG5hbWVzIGluIEVuZ2xpc2ggd2hlbiB0aGV5IHNob3VsZCBub3QuCiAgICAgICAgICAgIHJlc3BvbnNlcy5mb3JFYWNoKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBpZihyZXNwb25zZS50eXBlc1swXSA9PSAibG9jYWxpdHkiKXsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmFkZHJlc3NfY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkciA9IHJlc3BvbnNlLmFkZHJlc3NfY29tcG9uZW50c1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSA9IGFkZHI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMiA9IGFkZHI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMyA9IGFkZHI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ3N1YmxvY2FsaXR5X2xldmVsXzEnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJsb2NhbGl0eV9sZXZlbF8xID0gYWRkcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkci50eXBlc1swXSA9PSAncG9zdGFsX3Rvd24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0YWxfdG93biA9IGFkZHI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ2xvY2FsaXR5JykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxpdHkgPSBhZGRyOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGRyLnR5cGVzWzBdID09ICdwcmVtaXNlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlbWlzZSA9IGFkZHI7YWxlcnQoNCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ2VzdGFibGlzaG1lbnQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2htZW50ID0gYWRkcjthbGVydCg1KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlc1swXS5hZGRyZXNzX2NvbXBvbmVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBhZGRyID0gcmVzcG9uc2VzWzBdLmFkZHJlc3NfY29tcG9uZW50c1tpXTsKICAgICAgICAgICAgICAgIGlmIChhZGRyLnR5cGVzWzBdID09ICdzdHJlZXRfbnVtYmVyJykgewogICAgICAgICAgICAgICAgICAgIHN0cmVldF9udW1iZXIgPSBhZGRyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ3JvdXRlJykgewogICAgICAgICAgICAgICAgICAgIHJvdXRlID0gYWRkcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChhZGRyLnR5cGVzWzBdID09ICdwcmVtaXNlJykgewogICAgICAgICAgICAgICAgICAgIHByZW1pc2UgPSBhZGRyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSA9PSAnJyAmJiBhZGRyLnR5cGVzWzBdID09ICdhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzEnKSB7CiAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xID0gYWRkcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzIgPT0gJycgJiYgYWRkci50eXBlc1swXSA9PSAnYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yJykgewogICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMiA9IGFkZHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8zID09ICcnICYmIGFkZHIudHlwZXNbMF0gPT0gJ2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMycpIHsKICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzMgPSBhZGRyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHN1YmxvY2FsaXR5X2xldmVsXzEgPT0gJycgJiYgYWRkci50eXBlc1swXSA9PSAnc3VibG9jYWxpdHlfbGV2ZWxfMScpIHsKICAgICAgICAgICAgICAgICAgICBzdWJsb2NhbGl0eV9sZXZlbF8xID0gYWRkcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChwb3N0YWxfdG93biA9PSAnJyAmJiBhZGRyLnR5cGVzWzBdID09ICdwb3N0YWxfdG93bicpIHsKICAgICAgICAgICAgICAgICAgICBwb3N0YWxfdG93biA9IGFkZHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAobG9jYWxpdHkgPT0gJycgJiYgYWRkci50eXBlc1swXSA9PSAnbG9jYWxpdHknKSB7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxpdHkgPSBhZGRyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ2NvdW50cnknKSB7CiAgICAgICAgICAgICAgICAgICAgY291bnRyeSA9IGFkZHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYWRkci50eXBlc1swXSA9PSAncG9zdGFsX2NvZGUnKSB7CiAgICAgICAgICAgICAgICAgICAgcG9zdGFsX2NvZGUgPSBhZGRyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFkZHIudHlwZXNbMF0gPT0gJ3Bvc3RhbF9jb2RlX3ByZWZpeCcpIHsKICAgICAgICAgICAgICAgICAgICBwb3N0YWxfY29kZV9wcmVmaXggPSBhZGRyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChhZGRyLnR5cGVzWzBdID09ICdlc3RhYmxpc2htZW50JykgewogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaG1lbnQgPSBhZGRyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChwb3N0YWxfY29kZSA9PSAnJykgewogICAgICAgICAgICAgICAgICAgIHBvc3RhbF9jb2RlID0gcG9zdGFsX2NvZGVfcHJlZml4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlc1swXS5mb3JtYXR0ZWRfYWRkcmVzcyAhPSAnJykgewogICAgICAgICAgICAgICAgICAgIGFkZHJlc3NfYXJyYXkgPSByZXNwb25zZXNbMF0uZm9ybWF0dGVkX2FkZHJlc3Muc3BsaXQoIiwiLCAyKTsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAoYWRkcmVzc19hcnJheS5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZihzdHJlZXRfbnVtYmVyLmxvbmdfbmFtZSkgPT0gJ3VuZGVmaW5lZCcgfHwgc3RyZWV0X251bWJlci5sb25nX25hbWUgPT0gbnVsbCkgJiYgc3RyZWV0X251bWJlci5sb25nX25hbWUudG9Mb3dlckNhc2UoKSA9PSBhZGRyZXNzX2FycmF5WzBdLnRvTG93ZXJDYXNlKCkudHJpbSgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRBZGRyZXNzID0gc3RyZWV0X251bWJlci5sb25nX25hbWUgKyAnLCAnICsgYWRkcmVzc19hcnJheVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEFkZHJlc3MgPT0gJycgJiYgISh0eXBlb2Yoc3RyZWV0X251bWJlci5sb25nX25hbWUpID09ICd1bmRlZmluZWQnIHx8IHN0cmVldF9udW1iZXIubG9uZ19uYW1lID09IG51bGwpICYmIHN0cmVldF9udW1iZXIubG9uZ19uYW1lLnRvTG93ZXJDYXNlKCkgPT0gYWRkcmVzc19hcnJheVsxXS50b0xvd2VyQ2FzZSgpLnRyaW0oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyA9IGFkZHJlc3NfYXJyYXlbMF0gKyAnLCAnICsgc3RyZWV0X251bWJlci5sb25nX25hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRBZGRyZXNzID09ICcnICYmICEodHlwZW9mKHN0cmVldF9udW1iZXIuc2hvcnRfbmFtZSkgPT0gJ3VuZGVmaW5lZCcgfHwgc3RyZWV0X251bWJlci5zaG9ydF9uYW1lID09IG51bGwpICYmIHN0cmVldF9udW1iZXIuc2hvcnRfbmFtZS50b0xvd2VyQ2FzZSgpID09IGFkZHJlc3NfYXJyYXlbMF0udG9Mb3dlckNhc2UoKS50cmltKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEFkZHJlc3MgPSBzdHJlZXRfbnVtYmVyLnNob3J0X25hbWUgKyAnLCAnICsgYWRkcmVzc19hcnJheVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEFkZHJlc3MgPT0gJycgJiYgISh0eXBlb2Yoc3RyZWV0X251bWJlci5zaG9ydF9uYW1lKSA9PSAndW5kZWZpbmVkJyB8fCBzdHJlZXRfbnVtYmVyLnNob3J0X25hbWUgPT0gbnVsbCkgJiYgc3RyZWV0X251bWJlci5zaG9ydF9uYW1lLnRvTG93ZXJDYXNlKCkgPT0gYWRkcmVzc19hcnJheVsxXS50b0xvd2VyQ2FzZSgpLnRyaW0oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyA9IGFkZHJlc3NfYXJyYXlbMF0gKyAnLCAnICsgc3RyZWV0X251bWJlci5zaG9ydF9uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0QWRkcmVzcyA9PSAnJyAmJiAhKHR5cGVvZihwcmVtaXNlLmxvbmdfbmFtZSkgPT0gJ3VuZGVmaW5lZCcgfHwgcHJlbWlzZS5sb25nX25hbWUgPT0gbnVsbCkgJiYgcHJlbWlzZS5sb25nX25hbWUudG9Mb3dlckNhc2UoKSA9PSBhZGRyZXNzX2FycmF5WzBdLnRvTG93ZXJDYXNlKCkudHJpbSgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRBZGRyZXNzID0gcHJlbWlzZS5sb25nX25hbWUgKyAnLCAnICsgYWRkcmVzc19hcnJheVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEFkZHJlc3MgPT0gJycgJiYgISh0eXBlb2YocHJlbWlzZS5sb25nX25hbWUpID09ICd1bmRlZmluZWQnIHx8IHByZW1pc2UubG9uZ19uYW1lID09IG51bGwpICYmIHByZW1pc2UubG9uZ19uYW1lLnRvTG93ZXJDYXNlKCkgPT0gYWRkcmVzc19hcnJheVsxXS50b0xvd2VyQ2FzZSgpLnRyaW0oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyA9IGFkZHJlc3NfYXJyYXlbMF0gKyAnLCAnICsgcHJlbWlzZS5sb25nX25hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRBZGRyZXNzID09ICcnICYmICEodHlwZW9mKHByZW1pc2Uuc2hvcnRfbmFtZSkgPT0gJ3VuZGVmaW5lZCcgfHwgcHJlbWlzZS5zaG9ydF9uYW1lID09IG51bGwpICYmIHByZW1pc2Uuc2hvcnRfbmFtZS50b0xvd2VyQ2FzZSgpID09IGFkZHJlc3NfYXJyYXlbMF0udG9Mb3dlckNhc2UoKS50cmltKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEFkZHJlc3MgPSBwcmVtaXNlLnNob3J0X25hbWUgKyAnLCAnICsgYWRkcmVzc19hcnJheVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEFkZHJlc3MgPT0gJycgJiYgISh0eXBlb2YocHJlbWlzZS5zaG9ydF9uYW1lKSA9PSAndW5kZWZpbmVkJyB8fCBwcmVtaXNlLnNob3J0X25hbWUgPT0gbnVsbCkgJiYgcHJlbWlzZS5zaG9ydF9uYW1lLnRvTG93ZXJDYXNlKCkgPT0gYWRkcmVzc19hcnJheVsxXS50b0xvd2VyQ2FzZSgpLnRyaW0oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyA9IGFkZHJlc3NfYXJyYXlbMF0gKyAnLCAnICsgcHJlbWlzZS5zaG9ydF9uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0QWRkcmVzcyA9PSAnJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyA9ICdub25lJwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpZiBlc3RhYmxpc2htZW50IHRoZW4gZ3JhYiBzZWNvbmQgYXJyCiAgICAgICAgICAgIGlmIChnZXRBZGRyZXNzID09ICdub25lJyAmJiB0eXBlb2YoZXN0YWJsaXNobWVudC5sb25nX25hbWUpICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YoYWRkcmVzc19hcnJheVsxXSkgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICBnZXRBZGRyZXNzID0gYWRkcmVzc19hcnJheVsxXTsKICAgICAgICAgICAgICAgIGdldEFkZHJlc3MyID0gYWRkcmVzc19hcnJheVswXTsKICAgICAgICAgICAgfSBlbHNlIGlmKGdldEFkZHJlc3MgPT0gJ25vbmUnICkgey8qIGFkZGVkIHRvIGZpeCBzdHJlZXQgbnVtYmVyIGZvciBSVSBsb2NhdGlvbnMgKi8KICAgICAgICAgICAgICAgIGdldEFkZHJlc3MgPSBhZGRyZXNzX2FycmF5WzBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBhZGRyZXNzMgogICAgICAgICAgICBpZihwcmVtaXNlLmxvbmdfbmFtZSAmJiBwcmVtaXNlLmxvbmdfbmFtZSAhPSBnZXRBZGRyZXNzKXsKICAgICAgICAgICAgICAgIGdldEFkZHJlc3MyID0gcHJlbWlzZS5sb25nX25hbWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChnZXRBZGRyZXNzID09ICcnKSB7CiAgICAgICAgICAgICAgICBpZiAoc3RyZWV0X251bWJlci5sb25nX25hbWUpCiAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyArPSBzdHJlZXRfbnVtYmVyLmxvbmdfbmFtZSArICcgJzsvL3N0cmVldF9udW1iZXIKICAgICAgICAgICAgICAgIGlmIChyb3V0ZS5sb25nX25hbWUpCiAgICAgICAgICAgICAgICAgICAgZ2V0QWRkcmVzcyArPSByb3V0ZS5sb25nX25hbWU7Ly9yb3V0ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBnZXRaaXAgPSBwb3N0YWxfY29kZS5sb25nX25hbWU7Ly9wb3N0YWxfY29kZQoKICAgICAgICAgICAgLy9nZXRDb3VudHJ5CiAgICAgICAgICAgIGlmIChjb3VudHJ5LmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgZ2V0Q291bnRyeSA9IGNvdW50cnkubG9uZ19uYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjb3VudHJ5LnNob3J0X25hbWUpIHsKICAgICAgICAgICAgICAgIGdldENvdW50cnlJU08gPSBjb3VudHJ5LnNob3J0X25hbWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vZ2V0U3RhdGUKICAgICAgICAgICAgaWYgKGNvdW50cnkuc2hvcnRfbmFtZSkgewogICAgICAgICAgICAgICAgcnIgPSBjb3VudHJ5LnNob3J0X25hbWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vJGNvdW50cnlfYXJyID0gWyJVUyIsICJDQSIsICJJTiIsIkRFIiwiTkwiXTsKICAgICAgICAgICAgLy8gZml4IGZvciByZWdpb25zIGluIEdCCiAgICAgICAgICAgICRjb3VudHJ5X2FyciA9IDw/cGhwCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBGaWx0ZXIgdGhlIHJlZ2lvbnMgYXJyYXkgdGhhdCB1c2VzIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMiBpbnN0ZWFkIG9mIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHNpbmNlIDEuNi4xNgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZWNobyBhcHBseV9maWx0ZXJzKCJnZW9kaXJfZ2VvY29kZV9yZWdpb25fbGV2ZWwiLCdbIkdCIiwiRVMiXScpOz8+OwogICAgICAgICAgICBpZiAoalF1ZXJ5LmluQXJyYXkocnIsICRjb3VudHJ5X2FycikgIT09IC0xKSB7CiAgICAgICAgICAgICAgICBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldFN0YXRlID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMS5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZSA9IGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMS5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldFN0YXRlID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMi5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZSA9IGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMi5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qIEZpeCBzb21lIGNvdW50cmllcyB3aXRob3V0IHJlZ2lvbnMsIElzbGUgb2YgTWFuLCBTaW5nYXBvcmUsIEdyZWVjZS4gKi8KICAgICAgICAgICAgaWYgKGdldENvdW50cnlJU089PSdJTScpewogICAgICAgICAgICAgICAgZ2V0U3RhdGUgPSAiSXNsZSBvZiBNYW4iOwogICAgICAgICAgICB9ZWxzZSBpZihnZXRDb3VudHJ5SVNPPT0nU0cnKXsKICAgICAgICAgICAgICAgIGdldFN0YXRlID0gIlNpbmdhcG9yZSI7CiAgICAgICAgICAgIH0gZWxzZSBpZihnZXRDb3VudHJ5SVNPID09ICdHUicgJiYgIWdldFN0YXRlICYmIGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMy5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgIGdldFN0YXRlID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8zLmxvbmdfbmFtZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogRml4IHJlZ2lvbiBuYW1lIGZvciDigI5CZWxnaXVtICovCiAgICAgICAgICAgIGlmIChnZXRTdGF0ZSA9PSAnQnJ1c3NlbHMgSG9vZmRzdGVkZWxpamsgR2V3ZXN0JykgewogICAgICAgICAgICAgICAgZ2V0U3RhdGUgPSAnQnJ1c3NlbHMnOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvL2dldENpdHkKICAgICAgICAgICAgLy8gZml4IGZvciBjaXRpZXMgaW4gSXJlbGFuZAogICAgICAgICAgICAkY291bnRyeV9hcnIyID0gWyJJRSJdOwogICAgICAgICAgICBpZiAoalF1ZXJ5LmluQXJyYXkocnIsICRjb3VudHJ5X2FycjIpICE9PSAtMSkgewogICAgICAgICAgICAgICAgaWYgKGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMi5sb25nX25hbWUgJiYgYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yLmxvbmdfbmFtZS5pbmRleE9mKCIgQ2l0eSIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxvY2FsaXR5LmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBsb2NhbGl0eS5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3N0YWxfdG93bi5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gcG9zdGFsX3Rvd24ubG9uZ19uYW1lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3VibG9jYWxpdHlfbGV2ZWxfMS5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gc3VibG9jYWxpdHlfbGV2ZWxfMS5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzMubG9uZ19uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgZ2V0Q2l0eSA9IGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMy5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZihycj09IlRSIikgewogICAgICAgICAgICAgICAgaWYgKGxvY2FsaXR5LmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBsb2NhbGl0eS5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9zdGFsX3Rvd24ubG9uZ19uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgZ2V0Q2l0eSA9IHBvc3RhbF90b3duLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN1YmxvY2FsaXR5X2xldmVsXzEubG9uZ19uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgZ2V0Q2l0eSA9IHN1YmxvY2FsaXR5X2xldmVsXzEubG9uZ19uYW1lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8zLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzMubG9uZ19uYW1lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzEubG9uZ19uYW1lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ZWxzZSBpZihycj09IkZSIikgewogICAgICAgICAgICAgICAgaWYgKGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMi5sb25nX25hbWU9PSdQYXJpcycpIHsKICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGl0eS5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Q2l0eSA9IGxvY2FsaXR5LmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZiAocG9zdGFsX3Rvd24ubG9uZ19uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBwb3N0YWxfdG93bi5sb25nX25hbWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN1YmxvY2FsaXR5X2xldmVsXzEubG9uZ19uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBzdWJsb2NhbGl0eV9sZXZlbF8xLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8zLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8zLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgICAgIGlmIChsb2NhbGl0eS5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gbG9jYWxpdHkubG9uZ19uYW1lOwogICAgICAgICAgICAgICAgfWVsc2UgaWYgKHBvc3RhbF90b3duLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBwb3N0YWxfdG93bi5sb25nX25hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdWJsb2NhbGl0eV9sZXZlbF8xLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgICAgIGdldENpdHkgPSBzdWJsb2NhbGl0eV9sZXZlbF8xLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMy5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgICAgICBnZXRDaXR5ID0gYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8zLmxvbmdfbmFtZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9nZXRDb3VudHJ5IAogICAgICAgICAgICBpZiAoY291bnRyeS5sb25nX25hbWUpIHsKICAgICAgICAgICAgICAgIGdldENvdW50cnkgPSBjb3VudHJ5LmxvbmdfbmFtZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL2dldFppcCAKICAgICAgICAgICAgaWYgKHBvc3RhbF9jb2RlLmxvbmdfbmFtZSkgewogICAgICAgICAgICAgICAgZ2V0WmlwID0gcG9zdGFsX2NvZGUubG9uZ19uYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEFkanVzdCBKYXBhbmVzZSBzdHJlZXQgYWRkcmVzcy4KICAgICAgICAgICAgaWYgKGdldENvdW50cnlJU08gPT0gJ0pQJyAmJiBmb3JtYXR0ZWRfYWRkcmVzcyAhPSAnJyAmJiAhZ2V0QWRkcmVzcyAmJiBtYXBMYW5nID09ICdqYScpIHsKICAgICAgICAgICAgICAgIGZvcm1hdHRlZF9hZGRyZXNzID0gZm9ybWF0dGVkX2FkZHJlc3MucmVwbGFjZShnZXRDb3VudHJ5ICsgIuOAgSIsICIiKTsKICAgICAgICAgICAgICAgIGlmIChnZXRaaXApIHsKICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRfYWRkcmVzcyA9IGZvcm1hdHRlZF9hZGRyZXNzLnJlcGxhY2UoZ2V0Q291bnRyeSArICIg44CSIiArIGdldFppcCwgIuOAkiIgKyBnZXRaaXApOwogICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZF9hZGRyZXNzID0gZm9ybWF0dGVkX2FkZHJlc3MucmVwbGFjZSgi44CSIiArIGdldFppcCArICIgIiwgIiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX2Zvcm1hdHRlZF9hZGRyZXNzID0gJyc7CiAgICAgICAgICAgICAgICBpZiAoZ2V0Q2l0eSAmJiBmb3JtYXR0ZWRfYWRkcmVzcy5pbmRleE9mKGdldENpdHkpICE9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIF9mb3JtYXR0ZWRfYWRkcmVzcyA9IGZvcm1hdHRlZF9hZGRyZXNzLnNwbGl0KGdldENpdHkpOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnZXRTdGF0ZSAmJiBmb3JtYXR0ZWRfYWRkcmVzcy5pbmRleE9mKGdldFN0YXRlKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBfZm9ybWF0dGVkX2FkZHJlc3MgPSBmb3JtYXR0ZWRfYWRkcmVzcy5zcGxpdChnZXRTdGF0ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBnZXRBZGRyZXNzID0gX2Zvcm1hdHRlZF9hZGRyZXNzLmxlbmd0aCA+IDEgPyBfZm9ybWF0dGVkX2FkZHJlc3NbKChfZm9ybWF0dGVkX2FkZHJlc3MubGVuZ3RoKS0xKV0gOiBmb3JtYXR0ZWRfYWRkcmVzczsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zb2xlLmxvZyhnZXRBZGRyZXNzKycsICcrZ2V0Q2l0eSsnLCAnK2dldFN0YXRlKycsICcrZ2V0Q291bnRyeSk7CiAgICAgICAgICAgIDw/cGhwIAogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogRmlyZXMgdG8gYWRkIGphdmFzY3JpcHQgdmFyaWFibGUgdG8gdXNlIGluIGdvb2dsZSBtYXAuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEBzaW5jZSAxLjAuMAogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZG9fYWN0aW9uKCdnZW9kaXJfYWRkX2xpc3RpbmdfZ2VvY29kZV9qc192YXJzJyk7CiAgICAgICAgICAgID8+CiAgICAgICAgICAgIDw/cGhwIGlmICgkaXNfbWFwX3Jlc3RyaWN0KSB7ID8+CiAgICAgICAgICAgIGlmIChnZXRDaXR5LnRvTG93ZXJDYXNlKCkgIT0gJzw/cGhwIGVjaG8gZ2VvZGlyX3N0cnRvbG93ZXIoYWRkc2xhc2hlc19ncGMoJGNpdHkpKTs/PicpIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCc8P3BocCBlY2hvIGFkZHNsYXNoZXNfZ3BjKHdwX3NwcmludGYoX18oJ1BsZWFzZSBjaG9vc2UgYW55IGFkZHJlc3Mgb2YgdGhlICglcykgY2l0eSBvbmx5LicsJ2dlb2RpcmVjdG9yeScpLCAkY2l0eSkpOz8+Jyk7CiAgICAgICAgICAgICAgICBqUXVlcnkoIiM8P3BocCBlY2hvICRwcmVmaXguJ21hcCc7Pz4iKS5nb01hcCgpOwogICAgICAgICAgICAgICAgalF1ZXJ5LmdvTWFwLm1hcC5zZXRDZW50ZXIobmV3IGdvb2dsZS5tYXBzLkxhdExuZygnPD9waHAgZWNobyAkZGVmYXVsdF9sYXQ7ID8+JywgJzw/cGhwIGVjaG8gJGRlZmF1bHRfbG5nOyA/PicpKTsKICAgICAgICAgICAgICAgIGJhc2VNYXJrZXIuc2V0UG9zaXRpb24obmV3IGdvb2dsZS5tYXBzLkxhdExuZygnPD9waHAgZWNobyAkZGVmYXVsdF9sYXQ7ID8+JywgJzw/cGhwIGVjaG8gJGRlZmF1bHRfbG5nOyA/PicpKTsKICAgICAgICAgICAgICAgIHVwZGF0ZU1hcmtlclBvc2l0aW9uKGJhc2VNYXJrZXIuZ2V0UG9zaXRpb24oKSk7CiAgICAgICAgICAgICAgICAvL2dlb2NvZGVQb3NpdGlvbihiYXNlTWFya2VyLmdldFBvc2l0aW9uKCkpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe2pRdWVyeSgnI2FkZHJlc3Nfc3RyZWV0LCNhZGRyZXNzX3ppcCcpLnZhbCgnJyk7fSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICA8P3BocCB9ID8+CiAgICAgICAgICAgIHVwZGF0ZU1hcmtlckFkZHJlc3MoZ2V0QWRkcmVzcywgZ2V0WmlwLCBnZXRDaXR5LCBnZXRTdGF0ZSwgZ2V0Q291bnRyeSwgZ2V0QWRkcmVzczIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIDw/cGhwIAogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogRmlyZXMgdG8gYWRkIGphdmFzY3JpcHQgdmFyaWFibGUgdG8gdXNlIGluIGdvb2dsZSBtYXAuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEBzaW5jZSAxLjAuMAogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZG9fYWN0aW9uKCAnZ2VvZGlyX2FkZF9saXN0aW5nX2dlb2NvZGVfcmVzcG9uc2VfZmFpbCcgKTsKICAgICAgICAgICAgPz4KCQkJdXBkYXRlTWFya2VyQWRkcmVzcygnPD9waHAgZWNobyBhZGRzbGFzaGVzX2dwYyhfXygnQ2Fubm90IGRldGVybWluZSBhZGRyZXNzIGF0IHRoaXMgbG9jYXRpb24uJywnZ2VvZGlyZWN0b3J5JykpOz8+Jyk7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gY2VudGVyTWFwKGxhdGxuZykgewogICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwJzs/PiIpLmdvTWFwKCk7CiAgICAgICAgaWYgKHdpbmRvdy5nZE1hcHMgPT0gJ2dvb2dsZScpIHsKICAgICAgICAgICAgalF1ZXJ5LmdvTWFwLm1hcC5wYW5UbyhiYXNlTWFya2VyLmdldFBvc2l0aW9uKCkpOwogICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdkTWFwcyA9PSAnb3NtJykgewogICAgICAgICAgICBsYXRsbmcgPSBsYXRsbmcgPyBsYXRsbmcgOiBiYXNlTWFya2VyLmdldExhdExuZygpOwogICAgICAgICAgICBqUXVlcnkuZ29NYXAubWFwLnBhblRvKGxhdGxuZyk7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gY2VudGVyTWFya2VyKCkgewogICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwJzs/PiIpLmdvTWFwKCk7CiAgICAgICAgdmFyIGNlbnRlciA9IGpRdWVyeS5nb01hcC5tYXAuZ2V0Q2VudGVyKCk7CiAgICAgICAgaWYgKHdpbmRvdy5nZE1hcHMgPT0gJ2dvb2dsZScpIHsKICAgICAgICAgICAgYmFzZU1hcmtlci5zZXRQb3NpdGlvbihjZW50ZXIpOwogICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdkTWFwcyA9PSAnb3NtJykgewogICAgICAgICAgICBiYXNlTWFya2VyLnNldExhdExuZyhjZW50ZXIpOwogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIHVwZGF0ZU1hcFpvb20oem9vbSkgewogICAgICAgIGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwem9vbSc7Pz4nKS52YWwoem9vbSk7CiAgICB9CiAgICBmdW5jdGlvbiB1cGRhdGVNYXJrZXJQb3NpdGlvbihtYXJrZXJsYXRMbmcpIHsKICAgICAgICBqUXVlcnkoIiM8P3BocCBlY2hvICRwcmVmaXguJ21hcCc7Pz4iKS5nb01hcCgpOwogICAgICAgIGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nbGF0aXR1ZGUnOz8+JykudmFsKG1hcmtlcmxhdExuZy5sYXQoKSkudHJpZ2dlcignY2hhbmdlJyk7CiAgICAgICAgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4Lidsb25naXR1ZGUnOz8+JykudmFsKG1hcmtlcmxhdExuZy5sbmcoKSkudHJpZ2dlcignY2hhbmdlJyk7CiAgICB9CiAgICBmdW5jdGlvbiB1cGRhdGVNYXJrZXJQb3NpdGlvbk9TTShtYXJrZXJsYXRMbmcpIHsKICAgICAgICBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ2xhdGl0dWRlJzs/PicpLnZhbChtYXJrZXJsYXRMbmcubGF0KS50cmlnZ2VyKCdjaGFuZ2UnKTsKICAgICAgICBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ2xvbmdpdHVkZSc7Pz4nKS52YWwobWFya2VybGF0TG5nLmxuZykudHJpZ2dlcignY2hhbmdlJyk7CiAgICB9CiAgICBmdW5jdGlvbiB1cGRhdGVNYXJrZXJBZGRyZXNzKGdldEFkZHJlc3MsIGdldFppcCwgZ2V0Q2l0eSwgZ2V0U3RhdGUsIGdldENvdW50cnksIGdldEFkZHJlc3MyKSB7CiAgICAgICAgdmFyIHNldF9tYXBfdmFsX2luX2ZpZWxkcyA9ICc8P3BocCBlY2hvIGFkZHNsYXNoZXNfZ3BjKCRhdXRvX2NoYW5nZV9tYXBfZmllbGRzKTs/Pic7CiAgICAgICAgPD9waHAgb2Jfc3RhcnQoKTs/PgogICAgICAgIHZhciBvbGRfY291bnRyeSA9IGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nY291bnRyeSc7Pz4iKS52YWwoKTsKICAgICAgICB2YXIgb2xkX3JlZ2lvbiA9IGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4ncmVnaW9uJzs/PiIpLnZhbCgpOwogICAgICAgIHZhciBvbGRfY2l0eSA9IGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nY2l0eSc7Pz4iKS52YWwoKTsKICAgICAgICB2YXIgb2xkX3ppcCA9IGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nemlwJzs/PiIpLnZhbCgpOwoKICAgICAgICBpZiAodXNlcl9hZGRyZXNzID09IGZhbHNlIHx8IGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nc3RyZWV0Jzs/PicpLnZhbCgpID09ICcnKSB7CiAgICAgICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nc3RyZWV0Jzs/PiIpLnZhbChnZXRBZGRyZXNzKS50cmlnZ2VyKCJibHVyIik7CiAgICAgICAgfQogICAgICAgIGlmIChnZXRBZGRyZXNzKSB7CiAgICAgICAgICAgIG9sZHN0cl9hZGRyZXNzID0gZ2V0QWRkcmVzczsKICAgICAgICB9CiAgICAgICAgaWYgKGdldEFkZHJlc3MyICYmICh1c2VyX2FkZHJlc3MgPT0gZmFsc2UgfHwgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4LidzdHJlZXQyJzs/PicpLnZhbCgpID09ICcnKSkgewogICAgICAgICAgICBqUXVlcnkoIiM8P3BocCBlY2hvICRwcmVmaXguJ3N0cmVldDInOz8+IikudmFsKGdldEFkZHJlc3MyKTsKICAgICAgICB9CiAgICAgICAgaWYgKGdldEFkZHJlc3MyKSB7CiAgICAgICAgICAgIG9sZHN0cl9hZGRyZXNzMiA9IGdldEFkZHJlc3MyOwogICAgICAgIH0KCiAgICAgICAgdmFyIHVwZGF0ZVppcCA9IHRydWU7CiAgICAgICAgaWYgKCFnZXRaaXAgJiYgb2xkX3ppcCAmJiBvbGRfY2l0eSAmJiBvbGRfY2l0eSA9PSBnZXRDaXR5KSB7CiAgICAgICAgICAgIHVwZGF0ZVppcCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAodXBkYXRlWmlwKSB7CiAgICAgICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nemlwJzs/PiIpLnZhbChnZXRaaXApOwogICAgICAgIH0KICAgICAgICBpZiAoZ2V0WmlwKSB7CiAgICAgICAgICAgIG9sZHN0cl96aXAgPSBnZXRaaXA7CiAgICAgICAgfQogICAgICAgIGlmIChzZXRfbWFwX3ZhbF9pbl9maWVsZHMpIHsKICAgICAgICAgICAgaWYgKGdldENvdW50cnkpIHsKICAgICAgICAgICAgICAgc2V0Q291bnRyeSA9IGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeCAuICdjb3VudHJ5JzsgPz4gb3B0aW9uW2RhdGEtY291bnRyeV9jb2RlPSInICsgZ2V0Q291bnRyeUlTTyArICciXScpLnZhbCgpOwogICAgICAgICAgICAgICBpZiAoIXNldENvdW50cnkpIHsKICAgICAgICAgICAgICAgICAgIHNldENvdW50cnkgPSBnZXRDb3VudHJ5OwogICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgZ2V0Q291bnRyeSA9IHNldENvdW50cnk7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgalF1ZXJ5KCIjPD9waHAgZWNobyAkcHJlZml4IC4gJ2NvdW50cnknOyA/PiIpLnZhbChzZXRDb3VudHJ5KS50cmlnZ2VyKCdjaGFuZ2Uuc2VsZWN0MicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChnZXRTdGF0ZSkgewogICAgICAgICAgICAgICAgaWYgKGpRdWVyeSgiaW5wdXQjPD9waHAgZWNobyAkcHJlZml4IC4gJ3JlZ2lvbic7ID8+IikubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KCIjPD9waHAgZWNobyAkcHJlZml4IC4gJ3JlZ2lvbic7ID8+IikudmFsKGdldFN0YXRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZ2V0Q2l0eSkgewogICAgICAgICAgICAgICAgaWYgKGpRdWVyeSgiaW5wdXQjPD9waHAgZWNobyAkcHJlZml4IC4gJ2NpdHknOyA/PiIpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeCAuICdjaXR5JzsgPz4iKS52YWwoZ2V0Q2l0eSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgPD9waHAKICAgICAgICAvKioKICAgICAgICAgKiBGaXJlcyB3aGVuIG1hcmtlciBhZGRyZXNzIHVwZGF0ZWQgb24gbWFwLgogICAgICAgICAqCiAgICAgICAgICogQHNpbmNlIDEuMC4wCiAgICAgICAgICogQHBhcmFtIHN0cmluZyAkcHJlZml4IElkZW50aWZpZXIgdXNlZCBhcyBhIHByZWZpeCBmb3IgZmllbGQgbmFtZQogICAgICAgICAqLwogICAgICAgIGRvX2FjdGlvbignZ2VvZGlyX3VwZGF0ZV9tYXJrZXJfYWRkcmVzcycsICRwcmVmaXgpOwogICAgICAgIGVjaG8gJHVwZGF0ZU1hcmtlckFkZHJlc3MgPSBvYl9nZXRfY2xlYW4oKTsKICAgICAgICA/PgogICAgfQogICAgZnVuY3Rpb24gZ2VvZGlyX2NvZGVBZGRyZXNzKHNldF9vbl9tYXApIHsKICAgICAgICB2YXIgYWRkcmVzcyA9IGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nc3RyZWV0Jzs/PicpLnZhbCgpOwogICAgICAgIHZhciB6aXAgPSBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ3ppcCc7Pz4nKS52YWwoKTsKICAgICAgICB2YXIgY2l0eSA9IGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nY2l0eSc7Pz4nKS52YWwoKTsKICAgICAgICB2YXIgcmVnaW9uID0galF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4LidyZWdpb24nOz8+JykudmFsKCk7CiAgICAgICAgdmFyIGNvdW50cnkgPSBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ2NvdW50cnknOz8+JykudmFsKCk7CiAgICAgICAgdmFyIGNvdW50cnlfc2VsZWN0ZWQgPSBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ2NvdW50cnknOz8+JykuZmluZCgnb3B0aW9uOnNlbGVjdGVkJyk7CiAgICAgICAgdmFyIElTTzIgPSBjb3VudHJ5X3NlbGVjdGVkLmRhdGEoJ2NvdW50cnlfY29kZScpOwogICAgICAgIGlmICghSVNPMiAmJiBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ2NvdW50cnknOz8+JykuZGF0YSgnY291bnRyeV9jb2RlJykpIHsKICAgICAgICAgICAgSVNPMiA9IGpRdWVyeSgnIzw/cGhwIGVjaG8gJHByZWZpeC4nY291bnRyeSc7Pz4nKS5kYXRhKCdjb3VudHJ5X2NvZGUnKTsKICAgICAgICB9CiAgICAgICAgaWYoIUlTTzIpewogICAgICAgICAgICA8P3BocAogICAgICAgICAgICBpZighZGVmaW5lZCgnR0VPRElSTE9DQVRJT05fVEVYVERPTUFJTicpKXsKICAgICAgICAgICAgICAgIGdsb2JhbCAkd3BkYjsKICAgICAgICAgICAgICAgICRsb2NhdGlvbl9yZXN1bHQgPSAkZ2VvZGlyZWN0b3J5LT5sb2NhdGlvbi0+Z2V0X2RlZmF1bHRfbG9jYXRpb24oKTsKICAgICAgICAgICAgICAgIGlmKCFlbXB0eSgkbG9jYXRpb25fcmVzdWx0KSl7CiAgICAgICAgICAgICAgICAgICAgJElTTzIgPSB3cF9jb3VudHJ5X2RhdGFiYXNlKCktPmdldF9jb3VudHJ5X2lzbzIoJGxvY2F0aW9uX3Jlc3VsdC0+Y291bnRyeSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiSVNPMiA9ICckSVNPMic7IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKCiAgICAgICAgICAgID8+CiAgICAgICAgfQogICAgICAgIGlmIChJU08yID09ICctLScpIHsKICAgICAgICAgICAgSVNPMiA9ICcnOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAodHlwZW9mIHppcCA9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICB6aXAgPSAnJzsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBjaXR5ID09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIGNpdHkgPSAnPD9waHAgZWNobyBhZGRzbGFzaGVzX2dwYygkY2l0eSk7Pz4nOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIHJlZ2lvbiA9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICByZWdpb24gPSAnPD9waHAgZWNobyBhZGRzbGFzaGVzX2dwYygkcmVnaW9uKTs/Pic7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgY291bnRyeSA9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICBjb3VudHJ5ID0gJzw/cGhwIGVjaG8gYWRkc2xhc2hlc19ncGMoJGNvdW50cnkpOz8+JzsKICAgICAgICB9CiAgICAgICAgdmFyIGlzX3Jlc3RyaWN0ID0gJzw/cGhwIGVjaG8gJGlzX21hcF9yZXN0cmljdDsgPz4nOwogICAgICAgIDw/cGhwIG9iX3N0YXJ0KCk7CiAgICAgICAgJGRlZmF1bHRyZWdpb24gPSBpc3NldCgkZGVmYXVsdF9sb2NhdGlvbi0+cmVnaW9uKSA/ICRkZWZhdWx0X2xvY2F0aW9uLT5yZWdpb24gOiAnJzsKICAgICAgICAkZGVmYXVsdGNvdW50cnkgPSBpc3NldCgkZGVmYXVsdF9sb2NhdGlvbi0+Y291bnRyeSkgPyAkZGVmYXVsdF9sb2NhdGlvbi0+Y291bnRyeSA6ICcnOwogICAgICAgID8+CiAgICAgICAgaWYgKHNldF9vbl9tYXAgJiYgaXNfcmVzdHJpY3QpIHsKICAgICAgICAgICAgaWYgKHppcCAhPSAnJyAmJiBhZGRyZXNzICE9ICcnKSB7CiAgICAgICAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcyArICcsJyArIHppcDsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgYWRkcmVzcyA9PT0gJ3VuZGVmaW5lZCcpCiAgICAgICAgICAgICAgICBhZGRyZXNzID0gJyc7CgogICAgICAgICAgICBpZiggYWRkcmVzcyA9PSBjaXR5IHx8IGFkZHJlc3MgPT0gcmVnaW9uIHx8IGFkZHJlc3MgPT0gY291bnRyeSB8fCBhZGRyZXNzID09IHppcCApCiAgICAgICAgICAgICAgICBhZGRyZXNzID0gJyc7CiAgICAgICAgICAgIDw/cGhwCiAgICAgICAgICAgIGlmKGlzX2FkbWluKCkgJiYgaXNzZXQoJF9SRVFVRVNUWyd0YWInXSkpez8+CiAgICAgICAgICAgIGlmIChqUXVlcnkudHJpbShjaXR5KSA9PSAnJyB8fCBqUXVlcnkudHJpbShyZWdpb24pID09ICcnKSB7CiAgICAgICAgICAgICAgICBhZGRyZXNzID0gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPD9waHAKICAgICAgICAgICAgICAgfT8+CgogICAgICAgICAgICBpZiAoSVNPMiA9PSAnR0InKSB7CiAgICAgICAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcyArICcsJyArIGNpdHkgKyAnLCcgKyBjb3VudHJ5OyAvLyBVSyBpcyBmdW5ueSB3aXRoIHJlZ2lvbnMKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzICsgJywnICsgY2l0eSArICcsJyArIHJlZ2lvbiArICcsJyArIGNvdW50cnk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHppcCE9JycpewogICAgICAgICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3MgKyAnLCcgKyB6aXA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGluY2FzZSB0aGVyZSBhcmUgYW55IG51bGwgdmFsdWVzCiAgICAgICAgICAgIGFkZHJlc3MgPSAgYWRkcmVzcy5yZXBsYWNlKCIsbnVsbCwiLCAiLCIpOwogICAgICAgIH0KICAgICAgICBpZiAoYWRkcmVzcykgewogICAgICAgICAgICBhZGRyZXNzID0gIGFkZHJlc3MucmVwbGFjZSgiLG51bGwsIiwgIiwiKTsKICAgICAgICB9CiAgICAgICAgPD9waHAgJGNvZGVBZGRyZXNzID0gb2JfZ2V0X2NsZWFuKCk7CiAgICAgICAgLyoqCiAgICAgICAgICogRmlsdGVyIHRoZSBhZGRyZXNzIHZhcmlhYmxlCiAgICAgICAgICoKICAgICAgICAgKiBAc2luY2UgMS4wLjAKICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSBzdHJpbmcgJGNvZGVBZGRyZXNzIFJvdyBvZiBhZGRyZXNzIHRvIHVzZSBpbiBnb29nbGUgbWFwLgogICAgICAgICAqLwogICAgICAgIGVjaG8gYXBwbHlfZmlsdGVycygnZ2VvZGlyX2NvZGVhZGRyZXNzJywgJGNvZGVBZGRyZXNzKTsKICAgICAgICA/PgogICAgICAgIGlmICghd2luZG93LmdkTWFwcykgeyAvLyBObyBHb29nbGUgTWFwIExvYWRlZAogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChhZGRyZXNzICYmIGFkZHJlc3MgIT0gJycpIHsKICAgICAgICAgICAgLy8gUmVwbGFjZSBvbmUgb3IgbW9yZSBjb21tYXMgaW4gYSByb3cuCiAgICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnJlcGxhY2UoLywrL2csJywnKTsKICAgICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3MucmVwbGFjZSgvKF4sKXwoLCQpL2csICIiKTsKICAgICAgICB9CiAgICAgICAgaWYgKCB3aW5kb3cuZ2RNYXBzID09ICdvc20nICkgewogICAgICAgICAgICBpZiAoYWRkcmVzcyAhPSAnJykgewogICAgICAgICAgICAgICAgaWYgKHppcCAhPSAnJykgewogICAgICAgICAgICAgICAgICAgIHNlYXJjaFppcCA9ICIsIiArIHppcDsKICAgICAgICAgICAgICAgICAgICB2YXIgbkFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCkubGFzdEluZGV4T2Yoc2VhcmNoWmlwLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIG5BZGRyZXNzKSArIGFkZHJlc3Muc2xpY2UobkFkZHJlc3MpLnJlcGxhY2UobmV3IFJlZ0V4cChzZWFyY2haaXAsICdpJyksICIiKTsKICAgICAgICAgICAgICAgIH0KCQkJCTw/cGhwIAoJCQkJLyoqCgkJCQkgKiBGaXJlcyBiZWZvcmUgc2V0IGdlb2NvZGUgcG9zaXRpb24uCgkJCQkgKgoJCQkJICogQHNpbmNlIDEuMC4wCgkJCQkgKi8KCQkJCWRvX2FjdGlvbignZ2VvZGlyX2FkZF9saXN0aW5nX2NvZGVhZGRyZXNzX2JlZm9yZV9nZW9jb2RlJyk7CgkJCQk/PgogICAgICAgICAgICAgICAgZ2VvY29kZVBvc2l0aW9uT1NNKCcnLCBhZGRyZXNzLCBJU08yLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeydhZGRyZXNzJzogYWRkcmVzcywgJ2NvdW50cnknOiBJU08yfSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwJzs/PiIpLmdvTWFwKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzWzBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFzZU1hcmtlci5zZXRQb3NpdGlvbihyZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmdvTWFwLm1hcC5zZXRDZW50ZXIocmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU1hcmtlclBvc2l0aW9uKGJhc2VNYXJrZXIuZ2V0UG9zaXRpb24oKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYoc2V0X29uX21hcCAmJiBpc19yZXN0cmljdCkgewogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCAKICAgICAgICAgICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgICAqIEZpcmVzIGJlZm9yZSBzZXQgZ2VvY29kZSBwb3NpdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgICogQHNpbmNlIDEuMC4wCiAgICAgICAgICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgICAgICAgICBkb19hY3Rpb24oJ2dlb2Rpcl9hZGRfbGlzdGluZ19jb2RlYWRkcmVzc19iZWZvcmVfZ2VvY29kZScpOwogICAgICAgICAgICAgICAgICAgICAgICA/PgogICAgICAgICAgICAgICAgICAgICAgICBnZW9jb2RlUG9zaXRpb24oYmFzZU1hcmtlci5nZXRQb3NpdGlvbigpLCB7J2FkZHJlc3MnOiBhZGRyZXNzLCAnY291bnRyeSc6IElTTzJ9KTsKICAgICAgICAgICAgICAgICAgICAgICAgLy99CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJzw/cGhwIGVjaG8gYWRkc2xhc2hlc19ncGMoX18oJ0dlb2NvZGUgd2FzIG5vdCBzdWNjZXNzZnVsIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbjonLCdnZW9kaXJlY3RvcnknKSk7Pz4gJyArIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gZ2RNYXhNYXAoKSB7CiAgICAgICAgalF1ZXJ5KCIjPD9waHAgZWNobyAkcHJlZml4LidtYXAnOz8+IikuZ29NYXAoKTsKCiAgICAgICAgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4LidtYXAnOz8+JykudG9nZ2xlQ2xhc3MoJ21hcC1mdWxsc2NyZWVuJyk7CiAgICAgICAgalF1ZXJ5KCcubWFwX2NhdGVnb3J5JykudG9nZ2xlQ2xhc3MoJ21hcF9jYXRlZ29yeV9mdWxsc2NyZWVuJyk7CiAgICAgICAgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4Oz8+dHJpZ2dlcicpLnRvZ2dsZUNsYXNzKCdtYXBfY2F0ZWdvcnlfZnVsbHNjcmVlbicpOwogICAgICAgIGpRdWVyeSgnYm9keScpLnRvZ2dsZUNsYXNzKCdib2R5X2Z1bGxzY3JlZW4nKTsKICAgICAgICBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXg7Pz5sb2FkaW5nX2RpdicpLnRvZ2dsZUNsYXNzKCdsb2FkaW5nX2Rpdl9mdWxsc2NyZWVuJyk7CiAgICAgICAgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4Oz8+YWR2bWFwX25vZm91bmQnKS50b2dnbGVDbGFzcygnbm9mb3VuZF9mdWxsc2NyZWVuJyk7CiAgICAgICAgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4Oz8+dHJpZ2dlcm1hcCcpLnRvZ2dsZUNsYXNzKCd0cmlnZ2VybWFwX2Z1bGxzY3JlZW4nKTsKICAgICAgICBqUXVlcnkoJy5Ub3BMZWZ0JykudG9nZ2xlQ2xhc3MoJ1RvcExlZnRfZnVsbHNjcmVlbicpOwogICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHdpbmRvdy5nZE1hcHMgPT0gJ2dvb2dsZScpIHsKICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIoJC5nb01hcCwgJ3Jlc2l6ZScpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZE1hcHMgPT0gJ29zbScpIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5nb01hcC5tYXAuaW52YWxpZGF0ZVNpemUoKTsKICAgICAgICAgICAgICAgIGpRdWVyeS5nb01hcC5tYXAuX29uUmVzaXplKCk7CiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgCiAgICAgICAgfSwgMTAwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZF9nZXRfc3RyZWV0MigkcmVzcG9uc2UpewogICAgICAgIHZhciAkc3RyZWV0MiA9ICcnOwoKICAgICAgICBpZigkcmVzcG9uc2UuYWRkcmVzcy5idWlsZGluZyl7CiAgICAgICAgICAgICRzdHJlZXQyID0gJHJlc3BvbnNlLmFkZHJlc3MuYnVpbGRpbmc7CiAgICAgICAgfWVsc2UgaWYoJHJlc3BvbnNlLmFkZHJlc3MuZGVwYXJ0bWVudF9zdG9yZSl7CiAgICAgICAgICAgICRzdHJlZXQyID0gJHJlc3BvbnNlLmFkZHJlc3MuZGVwYXJ0bWVudF9zdG9yZTsKICAgICAgICB9ZWxzZSBpZigkcmVzcG9uc2UuYWRkcmVzcy5ob3RlbCl7CiAgICAgICAgICAgICRzdHJlZXQyID0gJHJlc3BvbnNlLmFkZHJlc3MuaG90ZWw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHN0cmVldDI7CiAgICB9CiAgICAKICAgIGZ1bmN0aW9uIGdlb2NvZGVSZXNwb25zZU9TTShyZXNwb25zZSwgdXBkYXRlTWFwKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICAgIGlmIChyZXNwb25zZS5kaXNwbGF5X2FkZHJlc3MpIHsKICAgICAgICAgICAgdmFyIGdldEFkZHJlc3MgPSByZXNwb25zZS5kaXNwbGF5X2FkZHJlc3M7CiAgICAgICAgICAgIHZhciBnZXRBZGRyZXNzMiA9IGdkX2dldF9zdHJlZXQyKHJlc3BvbnNlKTsKICAgICAgICAgICAgdmFyIGdldFppcCA9IHJlc3BvbnNlLnBvc3Rjb2RlOwogICAgICAgICAgICB2YXIgZ2V0Q2l0eSA9IHJlc3BvbnNlLmNpdHk7CiAgICAgICAgICAgIHZhciBnZXRTdGF0ZSA9IHJlc3BvbnNlLnN0YXRlOwogICAgICAgICAgICB2YXIgZ2V0Q291bnRyeSA9IHJlc3BvbnNlLmNvdW50cnk7CiAgICAgICAgICAgIGdldENvdW50cnlJU08gPSByZXNwb25zZS5jb3VudHJ5X2NvZGU7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGdldEFkZHJlc3MrJywgJytnZXRDaXR5KycsICcrZ2V0U3RhdGUrJywgJytnZXRDb3VudHJ5KTsKICAgICAgICAgICAgaWYgKHVwZGF0ZU1hcCAmJiByZXNwb25zZS5sYXQgJiYgcmVzcG9uc2UubG9uKSB7CiAgICAgICAgICAgICAgICB2YXIgbmV3TGF0TG5nID0gbmV3IEwubGF0TG5nKHJlc3BvbnNlLmxhdCwgcmVzcG9uc2UubG9uKTsKICAgICAgICAgICAgICAgIGJhc2VNYXJrZXIuc2V0TGF0TG5nKG5ld0xhdExuZyk7CiAgICAgICAgICAgICAgICBjZW50ZXJNYXAobmV3TGF0TG5nKTsKICAgICAgICAgICAgICAgIHVwZGF0ZU1hcmtlclBvc2l0aW9uT1NNKGJhc2VNYXJrZXIuZ2V0TGF0TG5nKCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIDw/cGhwCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBGaXJlcyB0byBhZGQgamF2YXNjcmlwdCB2YXJpYWJsZSB0byB1c2UgaW4gZ29vZ2xlIG1hcC4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHNpbmNlIDEuMC4wCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBkb19hY3Rpb24oJ2dlb2Rpcl9hZGRfbGlzdGluZ19nZW9jb2RlX2pzX3ZhcnMnKTsKICAgICAgICAgICAgPz4KICAgICAgICAgICAgPD9waHAgaWYgKCRpc19tYXBfcmVzdHJpY3QpIHsgPz4KICAgICAgICAgICAgaWYgKGdldENpdHkudG9Mb3dlckNhc2UoKSAhPSAnPD9waHAgZWNobyBnZW9kaXJfc3RydG9sb3dlcihhZGRzbGFzaGVzX2dwYygkY2l0eSkpOz8+JykgewogICAgICAgICAgICAgICAgYWxlcnQoJzw/cGhwIGVjaG8gYWRkc2xhc2hlc19ncGMod3Bfc3ByaW50ZihfXygnUGxlYXNlIGNob29zZSBhbnkgYWRkcmVzcyBvZiB0aGUgKCVzKSBjaXR5IG9ubHkuJywnZ2VvZGlyZWN0b3J5JyksICRjaXR5KSk7Pz4nKTsKICAgICAgICAgICAgICAgIGpRdWVyeSgiIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwJzs/PiIpLmdvTWFwKCk7CiAgICAgICAgICAgICAgICBjZW50ZXJNYXAobmV3IEwubGF0TG5nKCc8P3BocCBlY2hvICRkZWZhdWx0X2xhdDsgPz4nLCAnPD9waHAgZWNobyAkZGVmYXVsdF9sbmc7ID8+JykpOwogICAgICAgICAgICAgICAgYmFzZU1hcmtlci5zZXRMYXRMbmcobmV3IEwubGF0TG5nKCc8P3BocCBlY2hvICRkZWZhdWx0X2xhdDsgPz4nLCAnPD9waHAgZWNobyAkZGVmYXVsdF9sbmc7ID8+JykpOwogICAgICAgICAgICAgICAgdXBkYXRlTWFya2VyUG9zaXRpb25PU00oYmFzZU1hcmtlci5nZXRMYXRMbmcoKSk7CiAgICAgICAgICAgICAgICBnZW9jb2RlUG9zaXRpb25PU00oYmFzZU1hcmtlci5nZXRMYXRMbmcoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgPD9waHAgfSA/PgogICAgICAgICAgICB1cGRhdGVNYXJrZXJBZGRyZXNzKGdldEFkZHJlc3MsIGdldFppcCwgZ2V0Q2l0eSwgZ2V0U3RhdGUsIGdldENvdW50cnksZ2V0QWRkcmVzczIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIDw/cGhwIAogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogRmlyZXMgdG8gYWRkIGphdmFzY3JpcHQgdmFyaWFibGUgdG8gdXNlIGluIGdvb2dsZSBtYXAuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEBzaW5jZSAxLjAuMAogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZG9fYWN0aW9uKCAnZ2VvZGlyX2FkZF9saXN0aW5nX2dlb2NvZGVfcmVzcG9uc2VfZmFpbCcgKTsKICAgICAgICAgICAgPz4KCQkJYWxlcnQoJzw/cGhwIGVjaG8gYWRkc2xhc2hlc19ncGMoX18oJ0Nhbm5vdCBkZXRlcm1pbmUgYWRkcmVzcyBhdCB0aGlzIGxvY2F0aW9uLicsJ2dlb2RpcmVjdG9yeScpKTs/PicpOwogICAgICAgIH0KICAgIH0KCiAgICA8P3BocCAkZ2VvZGlyX21hcF9uYW1lID0gR2VvRGlyX01hcHM6OmFjdGl2ZV9tYXAoKTsKICAgIGlmKCRnZW9kaXJfbWFwX25hbWUhPSdub25lJyl7ID8+CiAgICBqUXVlcnkoZnVuY3Rpb24gKCQpIHsKCQk8P3BocCBpZiAoIGdlb2Rpcl9sYXp5X2xvYWRfbWFwKCkgKSB7ID8+CgkJalF1ZXJ5KCIjPD9waHAgZWNobyAkcHJlZml4LidtYXAnOz8+IikuZ2VvZGlyTG9hZE1hcCh7CgkJbG9hZEpTOiB0cnVlLAoJCWZvcmNlTG9hZDogPD9waHAgZWNobyAoIGlzc2V0KCAkZ2VvZGlyX21hbnVhbF9tYXAgKSAmJiAkZ2VvZGlyX21hbnVhbF9tYXAgPyAndHJ1ZScgOiAnZmFsc2UnICk7ID8+LAoJCWNhbGxiYWNrOiBmdW5jdGlvbigpIHs8P3BocCB9ID8+CiAgICAgICAgdmFyICRhZGRyZXNzTWFwID0gJCgiIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwJzs/PiIpLmdvTWFwKHsKICAgICAgICAgICAgbGF0aXR1ZGU6IDw/cGhwIGVjaG8gJHByZWZpeDs/PkNJVFlfTUFQX0NFTlRFUl9MQVQsCiAgICAgICAgICAgIGxvbmdpdHVkZTogPD9waHAgZWNobyAkcHJlZml4Oz8+Q0lUWV9NQVBfQ0VOVEVSX0xORywKICAgICAgICAgICAgem9vbTogPD9waHAgZWNobyAkcHJlZml4Oz8+Q0lUWV9NQVBfWk9PTUlOR19GQUNULAogICAgICAgICAgICBtYXB0eXBlOiAnUk9BRE1BUCcsIC8vIE1hcCB0eXBlIC0gSFlCUklELCBST0FETUFQLCBTQVRFTExJVEUsIFRFUlJBSU4KICAgICAgICAgICAgc3RyZWV0Vmlld0NvbnRyb2w6IHRydWUsCiAgICAgICAgICAgIDw/cGhwIGlmKGdlb2Rpcl9nZXRfb3B0aW9uKCdnZW9kaXJfYWRkX2xpc3RpbmdfbW91c2Vfc2Nyb2xsJykpIHsgZWNobyAnc2Nyb2xsd2hlZWw6IGZhbHNlLCc7fT8+CgkJCTw/cGhwIGRvX2FjdGlvbiggJ2dlb2Rpcl90ZW1wbGF0ZV9yZW5kZXJfbWFwX2pzX3BhcmFtcycgKTsgPz4KICAgICAgICB9KTsKCiAgICAgICAgaWYgKHdpbmRvdy5nZE1hcHMpIHsKICAgICAgICAgICAgZ2VvY29kZXIgPSB3aW5kb3cuZ2RNYXBzID09ICdnb29nbGUnID8gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCkgOiBbXTsKCiAgICAgICAgICAgIGJhc2VNYXJrZXIgPSAkLmdvTWFwLmNyZWF0ZU1hcmtlcih7CiAgICAgICAgICAgICAgICBsYXRpdHVkZTogPD9waHAgZWNobyAkcHJlZml4Oz8+Q0lUWV9NQVBfQ0VOVEVSX0xBVCwKICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogPD9waHAgZWNobyAkcHJlZml4Oz8+Q0lUWV9NQVBfQ0VOVEVSX0xORywKICAgICAgICAgICAgICAgIGlkOiAnYmFzZU1hcmtlcicsCiAgICAgICAgICAgICAgICBpY29uOiAnPD9waHAgZWNobyAkbWFya2VyX2ljb247Pz4nLAogICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgYWRkVG9NYXA6IHRydWUsIC8vIEZvciBPU00KICAgICAgICAgICAgICAgIHc6IHBhcnNlRmxvYXQoJzw/cGhwIGVjaG8gJGljb25fc2l6ZVsndyddOz8+JyksCiAgICAgICAgICAgICAgICBoOiBwYXJzZUZsb2F0KCc8P3BocCBlY2hvICRpY29uX3NpemVbJ2gnXTs/PicpLAogICAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBqUXVlcnkoJyM8P3BocCBlY2hvICRwcmVmaXguJ2Fkdm1hcF9ub2ZvdW5kJzs/PicpLmhpZGUoKTsKICAgICAgICAgICAgalF1ZXJ5KCcjPD9waHAgZWNobyAkcHJlZml4LidhZHZtYXBfbm90bG9hZGVkJzs/PicpLnNob3coKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJCgiIzw/cGhwIGVjaG8gJHByZWZpeDs/PnNldF9hZGRyZXNzX2J1dHRvbiIpLm9uKCJjbGljayIsZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2V0X29uX21hcCA9IHRydWU7CiAgICAgICAgICAgIGdlb2Rpcl9jb2RlQWRkcmVzcyhzZXRfb25fbWFwKTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICBpZiAod2luZG93LmdkTWFwcyA9PSAnZ29vZ2xlJykgewogICAgICAgICAgICAvLyBBZGQgZHJhZ2dpbmcgZXZlbnQgbGlzdGVuZXJzLgogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihiYXNlTWFya2VyLCAnZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvL3VwZGF0ZU1hcmtlckFkZHJlc3MoJ0RyYWdnaW5nLi4uJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihiYXNlTWFya2VyLCAnZHJhZycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIHVwZGF0ZU1hcmtlclN0YXR1cygnRHJhZ2dpbmcuLi4nKTsKICAgICAgICAgICAgICAgIHVwZGF0ZU1hcmtlclBvc2l0aW9uKGJhc2VNYXJrZXIuZ2V0UG9zaXRpb24oKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihiYXNlTWFya2VyLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIHVwZGF0ZU1hcmtlclN0YXR1cygnRHJhZyBlbmRlZCcpOwogICAgICAgICAgICAgICAgY2VudGVyTWFwKCk7CiAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGF1dG9fY2hhbmdlX2FkZHJlc3NfZmllbGRzX3Bpbl9tb3ZlKSB7ID8+CiAgICAgICAgICAgICAgICBnZW9jb2RlUG9zaXRpb24oYmFzZU1hcmtlci5nZXRQb3NpdGlvbigpKTsKICAgICAgICAgICAgICAgIDw/cGhwIH0gPz4KICAgICAgICAgICAgICAgIHVwZGF0ZU1hcmtlclBvc2l0aW9uKGJhc2VNYXJrZXIuZ2V0UG9zaXRpb24oKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcigkLmdvTWFwLm1hcCwgJ2RyYWdlbmQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvLyB1cGRhdGVNYXJrZXJTdGF0dXMoJ0RyYWcgZW5kZWQnKTsKICAgICAgICAgICAgICAgIGNlbnRlck1hcmtlcigpOwogICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhdXRvX2NoYW5nZV9hZGRyZXNzX2ZpZWxkc19waW5fbW92ZSkgeyA/PgogICAgICAgICAgICAgICAgZ2VvY29kZVBvc2l0aW9uKGJhc2VNYXJrZXIuZ2V0UG9zaXRpb24oKSk7CiAgICAgICAgICAgICAgICA8P3BocCB9ID8+CgogICAgICAgICAgICAgICAgdXBkYXRlTWFya2VyUG9zaXRpb24oYmFzZU1hcmtlci5nZXRQb3NpdGlvbigpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKCQuZ29NYXAubWFwLCAnem9vbV9jaGFuZ2VkJywgZnVuY3Rpb24gKCkgewoJCQkJaWYgKHR5cGVvZiAkLmdvTWFwLm1hcCA9PT0gJ3VuZGVmaW5lZCcpIHsKCQkJCQkkLmdvTWFwLm1hcCA9ICRhZGRyZXNzTWFwOwoJCQkJfQogICAgICAgICAgICAgICAgdXBkYXRlTWFwWm9vbSgkLmdvTWFwLm1hcC56b29tKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgbWF4TWFwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJzw/cGhwIGVjaG8gJHByZWZpeDs/PnRyaWdnZXJtYXAnKTsKICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIobWF4TWFwLCAnY2xpY2snLCBnZE1heE1hcCk7CgogICAgICAgICAgICA8P3BocCBpZiAoJGlzX21hcF9yZXN0cmljdCkgeyA/PgogICAgICAgICAgICB2YXIgQ0lUWV9BRERSRVNTID0gJzw/cGhwIGVjaG8gYWRkc2xhc2hlc19ncGMoJGNpdHkpLicsJy5hZGRzbGFzaGVzX2dwYygkcmVnaW9uKS4nLCcuYWRkc2xhc2hlc19ncGMoJGNvdW50cnkpOz8+JzsKICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7J2FkZHJlc3MnOiBDSVRZX0FERFJFU1N9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICQoIiM8P3BocCBlY2hvICRwcmVmaXguJ21hcCc7Pz4iKS5nb01hcCgpOwogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQm91bmRzIGZvciBOb3J0aCBBbWVyaWNhCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib3VuZF9sYXRfbG5nID0gU3RyaW5nKHJlc3VsdHNbMF0uZ2VvbWV0cnkuYm91bmRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRfbGF0X2xuZyA9IGJvdW5kX2xhdF9sbmcucmVwbGFjZSgvWygpXS9nLCAiIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kX2xhdF9sbmcgPSBib3VuZF9sYXRfbG5nLnNwbGl0KCcsJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmljdEJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGJvdW5kX2xhdF9sbmdbMF0sIGJvdW5kX2xhdF9sbmdbMV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhib3VuZF9sYXRfbG5nWzJdLCBib3VuZF9sYXRfbG5nWzNdKQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCI8P3BocCBfZSgnR2VvY29kZSB3YXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uOicsJ2dlb2RpcmVjdG9yeScpOz8+ICIgKyBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICA8P3BocCB9ID8+CiAgICAgICAgICAgIC8vIExpbWl0IHRoZSB6b29tIGxldmVsCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKCQuZ29NYXAubWFwLCAnem9vbV9jaGFuZ2VkJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJCgiIzw/cGhwIGVjaG8gJHByZWZpeC4nbWFwJzs/PiIpLmdvTWFwKCk7CiAgICAgICAgICAgICAgICBpZiAoJC5nb01hcC5tYXAuZ2V0Wm9vbSgpIDwgbWluWm9vbUxldmVsKSAkLmdvTWFwLm1hcC5zZXRab29tKG1pblpvb21MZXZlbCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAod2luZG93LmdkTWFwcyA9PSAnb3NtJykgewogICAgICAgICAgICAvLyBBZGQgZHJhZ2dpbmcgZXZlbnQgbGlzdGVuZXJzLgogICAgICAgICAgICBiYXNlTWFya2VyLm9uKCdkcmFnJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgdXBkYXRlTWFya2VyUG9zaXRpb25PU00oYmFzZU1hcmtlci5nZXRMYXRMbmcoKSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBiYXNlTWFya2VyLm9uKCdkcmFnZW5kJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgY2VudGVyTWFwKCk7CiAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGF1dG9fY2hhbmdlX2FkZHJlc3NfZmllbGRzX3Bpbl9tb3ZlKSB7ID8+CiAgICAgICAgICAgICAgICBnZW9jb2RlUG9zaXRpb25PU00oYmFzZU1hcmtlci5nZXRMYXRMbmcoKSk7CiAgICAgICAgICAgICAgICA8P3BocCB9ID8+CiAgICAgICAgICAgICAgICB1cGRhdGVNYXJrZXJQb3NpdGlvbk9TTShiYXNlTWFya2VyLmdldExhdExuZygpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQuZ29NYXAubWFwLm9uKCdkcmFnZW5kJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgPD9waHAgaWYgKCRhdXRvX2NoYW5nZV9hZGRyZXNzX2ZpZWxkc19waW5fbW92ZSkgeyA/PgogICAgICAgICAgICAgICAgZ2VvY29kZVBvc2l0aW9uT1NNKGJhc2VNYXJrZXIuZ2V0TGF0TG5nKCkpOwogICAgICAgICAgICAgICAgPD9waHAgfSA/PgogICAgICAgICAgICAgICAgY2VudGVyTWFya2VyKCk7CiAgICAgICAgICAgICAgICB1cGRhdGVNYXJrZXJQb3NpdGlvbk9TTShiYXNlTWFya2VyLmdldExhdExuZygpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQuZ29NYXAubWFwLm9uKCd6b29tJywgZnVuY3Rpb24oZSkgewoJCQkJaWYgKHR5cGVvZiAkLmdvTWFwLm1hcCA9PT0gJ3VuZGVmaW5lZCcpIHsKCQkJCQkkLmdvTWFwLm1hcCA9ICRhZGRyZXNzTWFwOwoJCQkJfQogICAgICAgICAgICAgICAgdXBkYXRlTWFwWm9vbSgkLmdvTWFwLm1hcC5nZXRab29tKCkpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIEwuRG9tRXZlbnQuYWRkTGlzdGVuZXIoJCgnPD9waHAgZWNobyAkcHJlZml4Oz8+dHJpZ2dlcm1hcCcpLCAnY2xpY2snLCBnZE1heE1hcCk7CgogICAgICAgICAgICA8P3BocCBpZiAoJGlzX21hcF9yZXN0cmljdCkgeyA/PgogICAgICAgICAgICB2YXIgQ0lUWV9BRERSRVNTID0gJzw/cGhwIGVjaG8gYWRkc2xhc2hlc19ncGMoJGNpdHkpLicsICcuYWRkc2xhc2hlc19ncGMoJHJlZ2lvbikuJywgJy5hZGRzbGFzaGVzX2dwYygkY291bnRyeSk7Pz4nOwogICAgICAgICAgICA8P3BocCB9ID8+CiAgICAgICAgICAgIC8vIExpbWl0IHRoZSB6b29tIGxldmVsCiAgICAgICAgICAgICQuZ29NYXAubWFwLm9uKCd6b29tJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgaWYgKCQuZ29NYXAubWFwLmdldFpvb20oKSA8IG1pblpvb21MZXZlbCkgewogICAgICAgICAgICAgICAgICAgICQuZ29NYXAubWFwLnNldFpvb20obWluWm9vbUxldmVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTw/cGhwIGlmICggZ2VvZGlyX2xhenlfbG9hZF9tYXAoKSApIHsgPz4KCQl9Cgl9KTs8P3BocCB9ID8+CiAgICB9KTsKICAgIDw/cGhwIH0/PgogICAgLyogXV0+ICovCjwvc2NyaXB0Pgo8P3BocAokc2V0X2J1dHRvbl9jbGFzcyA9ICdnZW9kaXJfYnV0dG9uJzsKaWYgKGlzX2FkbWluKCkpCiAgICAkc2V0X2J1dHRvbl9jbGFzcyA9ICdidG4gYnRuLXByaW1hcnkgY29sbGFwc2UnOwo/Pgo8aW5wdXQgdHlwZT0iYnV0dG9uIiBpZD0iPD9waHAgZWNobyAkcHJlZml4OyA/PnNldF9hZGRyZXNzX2J1dHRvbiIgY2xhc3M9Ijw/cGhwIGVjaG8gJHNldF9idXR0b25fY2xhc3M7ID8+IiB2YWx1ZT0iPD9waHAgZXNjX2F0dHJfZSgkbWFwX3RpdGxlLCAnZ2VvZGlyZWN0b3J5Jyk7ID8+IiBzdHlsZT0iZmxvYXQ6bm9uZTsiLz4KPGRpdiBpZD0iPD9waHAgZWNobyAkcHJlZml4OyA/PmRfbW91c2VDbGljayI+PC9kaXY+CjxkaXYgY2xhc3M9InRvcF9iYW5uZXJfc2VjdGlvbl9pbm4gZ2VvZGlyX21hcF9jb250YWluZXIgY2xlYXJmaXgiIHN0eWxlPSJtYXJnaW4tdG9wOjEwcHg7Ij4KICAgIDxkaXYgY2xhc3M9IlRvcExlZnQiPjxzcGFuIGlkPSI8P3BocCBlY2hvICRwcmVmaXg7ID8+dHJpZ2dlcm1hcCIgc3R5bGU9Im1hcmdpbi10b3A6LTExcHg7bWFyZ2luLWxlZnQ6LTEycHg7Ij48L3NwYW4+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJUb3BSaWdodCI+PC9kaXY+CiAgICA8ZGl2IGlkPSI8P3BocCBlY2hvICRwcmVmaXggLiAnbWFwJzsgPz4iIGNsYXNzPSJnZW9kaXJfbWFwIiBzdHlsZT0iaGVpZ2h0OjMwMHB4Ij4KICAgICAgICA8IS0tIG5ldyBtYXAgc3RhcnQgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iaXByZWxhdGl2ZSI+CiAgICAgICAgICAgIDxkaXYgaWQ9Ijw/cGhwIGVjaG8gJHByZWZpeCAuICdtYXAnOyA/PiIgc3R5bGU9ImZsb2F0OnJpZ2h0O2hlaWdodDozMDBweDtwb3NpdGlvbjpyZWxhdGl2ZTsiIGNsYXNzPSJmb3JtX3JvdyBjbGVhcmZpeCI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9Ijw/cGhwIGVjaG8gJHByZWZpeDsgPz5sb2FkaW5nX2RpdiIgc3R5bGU9ImhlaWdodDozMDBweCI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9Ijw/cGhwIGVjaG8gJHByZWZpeDsgPz5hZHZtYXBfY291bnRlciI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9Ijw/cGhwIGVjaG8gJHByZWZpeDsgPz5hZHZtYXBfbm9mb3VuZCI+PD9waHAgX2UoJzxoMz5ObyBSZWNvcmRzIEZvdW5kPC9oMz48cD5Tb3JyeSwgbm8gcmVjb3JkcyB3ZXJlIGZvdW5kLiBQbGVhc2UgYWRqdXN0IHlvdXIgc2VhcmNoIGNyaXRlcmlhIGFuZCB0cnkgYWdhaW4uPC9wPicsICdnZW9kaXJlY3RvcnknKTsgPz48L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0iPD9waHAgZWNobyAkcHJlZml4Oz8+YWR2bWFwX25vdGxvYWRlZCIgY2xhc3M9ImFkdm1hcF9ub3Rsb2FkZWQiPjw/cGhwIF9lKCc8aDM+TWFwIE5vdCBMb2FkZWQ8L2gzPjxwPlNvcnJ5LCB1bmFibGUgdG8gbG9hZCBNYXBzIEFQSS4nLCAnZ2VvZGlyZWN0b3J5Jyk7ID8+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBuZXcgbWFwIGVuZCAtLT4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iQm90dG9tTGVmdCI+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJCb3R0b21SaWdodCI+PC9kaXY+CjwvZGl2PiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";