1683891912
oo20z%2BoyWz%3Ae1571ff1a9826e287a64856698d7f59c-4875b2c9389b7872d6bb49cb97386f79
s:41064:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MjM6IkFkbWluIGN1c3RvbSBmaWVsZCBmb3JtIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjI6e2k6MDtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xTaW5jZSI6Mzp7czo3OiIAKgBuYW1lIjtzOjU6InNpbmNlIjtzOjUzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcU2luY2UAdmVyc2lvbiI7czo1OiIxLjAuMCI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToxO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czo3OiJwYWNrYWdlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoxMjoiR2VvRGlyZWN0b3J5IjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBoYXNoIjtzOjMyOiI0ODc1YjJjOTM4OWI3ODcyZDZiYjQ5Y2I5NzM4NmY3OSI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjQzOiJodG1sLWFkbWluLXNldHRpbmdzLWNwdC1jZi1zZXR0aW5nLWl0ZW0ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6Nzc6Imdlb2RpcmVjdG9yeS9pbmNsdWRlcy9hZG1pbi92aWV3cy9odG1sLWFkbWluLXNldHRpbmdzLWNwdC1jZi1zZXR0aW5nLWl0ZW0ucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoyODIyNzoiPD9waHAKLyoqCiAqIEFkbWluIGN1c3RvbSBmaWVsZCBmb3JtCiAqCiAqIEBzaW5jZSAxLjAuMAogKgogKiBAcGFja2FnZSBHZW9EaXJlY3RvcnkKICovCgovKioKICogRGlzcGxheXMgdGhlIGN1c3RvbSBmaWVsZCBmb3JtIGNvbnRlbnQuCiAqCiAqIEBzaW5jZSAxLjAuMAogKgogKiBAZ2xvYmFsIHN0cmluZyAkcG9zdF90eXBlIFBvc3QgdHlwZS4KICovCgovL3ByaW50X3IoJGZpZWxkKTtlY2hvICcjIyMnOwovL21qcy1uZXN0ZWRTb3J0YWJsZS1uby1uZXN0aW5nCiR0YWJfY2xhc3MgPSBpc3NldCgkZmllbGQtPmZpZWxkX3R5cGUpICYmICRmaWVsZC0+ZmllbGRfdHlwZT09J2ZpZWxkc2V0JyA/ICcnIDogJ21qcy1uZXN0ZWRTb3J0YWJsZS1uby1uZXN0aW5nJzsKPz4KPGxpIGNsYXNzPSJkZC1pdGVtIDw/cGhwIGVjaG8gJHRhYl9jbGFzczs/PiIgZGF0YS1pZD0iMSIgaWQ9InNldE5hbWVfPD9waHAgZWNobyAkZmllbGQtPmlkOz8+IiBkYXRhLWh0bWx2YXJfbmFtZT0iPD9waHAgZWNobyAoIGlzc2V0KCAkZmllbGQtPmh0bWx2YXJfbmFtZSApID8gZXNjX2F0dHIoICRmaWVsZC0+aHRtbHZhcl9uYW1lICkgOiAnJyApOz8+IiBpZD0ic2V0TmFtZV88P3BocCBlY2hvICRmaWVsZC0+aWQ7Pz4iIGRhdGEtZmllbGRfdHlwZT0iPD9waHAgZWNobyBlc2NfYXR0ciggJGZpZWxkLT5maWVsZF90eXBlICk7ID8+IiBkYXRhLWZpZWxkX3R5cGVfa2V5PSI8P3BocCBlY2hvIGVzY19hdHRyKCAkZmllbGQtPmZpZWxkX3R5cGVfa2V5ICk7ID8+IiBkYXRhLWZpZWxkLW5vbmNlPSI8P3BocCBlY2hvIGVzY19hdHRyKCAkbm9uY2UgKTsgPz4iPgoJPGRpdiBjbGFzcz0iaG92ZXItc2hhZG93IGRkLWZvcm0gZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIHJvdW5kZWQgYy1wb2ludGVyIGxpc3QtZ3JvdXAtaXRlbSBib3JkZXIgcm91bmRlZC1zbXggdGV4dC1sZWZ0IGJnLWxpZ2h0IDw/cGhwIGlmKGVtcHR5KCRmaWVsZC0+aXNfYWN0aXZlKSl7ZWNobyAnYm9yZGVyLXdhcm5pbmcnO30gPz4iIG9uY2xpY2s9ImdkX3RhYnNfaXRlbV9zZXR0aW5ncyh0aGlzKTsiPgoJCTxkaXYgY2xhc3M9IiAgZmxleC1maWxsIGZvbnQtd2VpZ2h0LWJvbGQiPgoJCQk8P3BocCBlY2hvICRmaWVsZF9pY29uOyA/PgoJCQk8P3BocCBlY2hvIGlzc2V0KCAkZmllbGQtPmFkbWluX3RpdGxlICkgPyAkZmllbGQtPmFkbWluX3RpdGxlIDogJyc7Pz4KCQkJPHNwYW4gY2xhc3M9ImZsb2F0LXJpZ2h0IHRleHQtcmlnaHQgc21hbGwiIHRpdGxlPSI8P3BocCBfZSgnT3Blbi9DbG9zZScsJ2dlb2RpcmVjdG9yeScpOz8+Ij48P3BocCBlY2hvICcgKCcuZXNjX2F0dHIoJGZpZWxkLT5maWVsZF90eXBlX25hbWUpLicpJzs/Pjwvc3Bhbj4KCQk8L2Rpdj4KCQk8ZGl2IGNsYXNzPSJkZC1oYW5kbGUiPgoJCQk8P3BocCBkb19hY3Rpb24oICdnZW9kaXJfY2ZhX3RhYl9oZWFkZXJfaWNvbicsICRmaWVsZCwgJGNmICk7ID8+CgkJCTw/cGhwCgkJCWlmKGVtcHR5KCRmaWVsZC0+aXNfYWN0aXZlKSl7CgkJCQk/PgoJCQkJPGkgY2xhc3M9ImZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSB0ZXh0LXdhcm5pbmcgbWwtMiIgdGl0bGU9Ijw/cGhwIF9lKCJJbmFjdGl2ZSIsImdlb2RpcmVjdG9yeSIpOz8+IiBkYXRhLXRvZ2dsZT0idG9vbHRpcCI+PC9pPgoJCQk8P3BocCB9ID8+CgkJCTw/cGhwCgkJCSRjb3JlX2ZpZWxkcyA9IGFycmF5KCdwb3N0X3RpdGxlJywncG9zdF9jb250ZW50JywncG9zdF90YWdzJywncG9zdF9jYXRlZ29yeScsJ2FkZHJlc3MnLCdwb3N0X2ltYWdlcycpOwoJCQlpZiAoICEgKCAhIGVtcHR5KCAkZmllbGQtPmh0bWx2YXJfbmFtZSApICYmIGluX2FycmF5KCAkZmllbGQtPmh0bWx2YXJfbmFtZSwgJGNvcmVfZmllbGRzICkgKSAmJiBhcHBseV9maWx0ZXJzKCAnZ2VvZGlyX2NmYV9jYW5fZGVsZXRlX2ZpZWxkJywgdHJ1ZSwgJGZpZWxkICkgKSB7CgkJCQk/PgoJCQkJPGkgY2xhc3M9ImZhciBmYS10cmFzaC1hbHQgdGV4dC1kYW5nZXIgbWwtMiIgaWQ9ImRlbGV0ZS0xNiIgIG9uY2xpY2s9ImdkX2RlbGV0ZV9jdXN0b21fZmllbGQoJzw/cGhwIGVjaG8gZXNjX2F0dHIoICRmaWVsZC0+aWQgKTsgPz4nLCc8P3BocCBlY2hvICRub25jZTsgPz4nKTtldmVudC5zdG9wUHJvcGFnYXRpb24oKTtyZXR1cm4gZmFsc2U7Ij48L2k+CgkJCTw/cGhwIH0KCQkJPz4KCQkJPGkgY2xhc3M9ImZhcyBmYS1ncmlwLXZlcnRpY2FsIHRleHQtbXV0ZWQgbWwtMiIgc3R5bGU9ImN1cnNvcjogbW92ZSIgYXJpYS1oaWRkZW49InRydWUiID48L2k+CgkJPC9kaXY+CgkJPD9waHAgLy8gc3RvcmUgdGhlIGZvcm0gYXMgYSB0ZW1wbGF0ZS4gVGhpcyBzYXZlcyBhIGxvYWQgb2YgbWVtb3J5IG9uIHBhZ2UgbG9hZC4gPz4KCQk8c2NyaXB0IHR5cGU9InRleHQvdGVtcGxhdGUiIGNsYXNzPSJkZC1zZXR0aW5nIDw/cGhwIGVjaG8gJ2RkLXR5cGUtJy5lc2NfYXR0cigkZmllbGQtPmZpZWxkX3R5cGVfbmFtZSk7Pz4iPgoJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzZWN1cml0eSIgdmFsdWU9Ijw/cGhwIGVjaG8gZXNjX2F0dHIoICRub25jZSApOyA/PiIvPgoJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwb3N0X3R5cGUiIGlkPSJwb3N0X3R5cGUiICB2YWx1ZT0iPD9waHAgZWNobyBlc2NfYXR0ciggJGZpZWxkLT5wb3N0X3R5cGUgKTsgPz4iLz4KCQkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZmllbGRfdHlwZSIgaWQ9ImZpZWxkX3R5cGUiCgkJCSAgICAgICB2YWx1ZT0iPD9waHAgZWNobyBlc2NfYXR0ciggJGZpZWxkLT5maWVsZF90eXBlICk7ID8+Ii8+CgkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImZpZWxkX3R5cGVfa2V5IiBpZD0iZmllbGRfdHlwZV9rZXkiCgkJCSAgICAgICB2YWx1ZT0iPD9waHAgZWNobyBlc2NfYXR0ciggJGZpZWxkLT5maWVsZF90eXBlX2tleSApOyA/PiIvPgoJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJmaWVsZF9pZCIgaWQ9ImZpZWxkX2lkIgoJCQkgICAgICAgdmFsdWU9Ijw/cGhwIGVjaG8gZXNjX2F0dHIoICRmaWVsZC0+aWQgKTsgPz4iLz4KCQkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY2xhYmVscyIgaWQ9ImNsYWJlbHMiIHZhbHVlPSI8P3BocCBpZiAoIGlzc2V0KCAkZmllbGQtPmNsYWJlbHMgKSApIHsKCQkJCWVjaG8gZXNjX2F0dHIoICRmaWVsZC0+Y2xhYmVscyApOwoJCQl9ID8+Ii8+CgkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIHJlYWRvbmx5PSJyZWFkb25seSIgbmFtZT0ic29ydF9vcmRlciIgaWQ9InNvcnRfb3JkZXIiCgkJCSAgICAgICB2YWx1ZT0iPD9waHAgaWYgKCBpc3NldCggJGZpZWxkLT5zb3J0X29yZGVyICkgKSB7CgkJCQkgICAgICAgZWNobyBhYnNpbnQoICRmaWVsZC0+c29ydF9vcmRlciApOwoJCQkgICAgICAgfSA/PiIvPgoJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpc19kZWZhdWx0IiBpZD0iaXNfZGVmYXVsdCIKCQkJICAgICAgIHZhbHVlPSI8P3BocCBlY2hvIGVzY19hdHRyKCAkZmllbGQtPmlzX2RlZmF1bHQgKTsgPz4iLz4KCgkJCTw/cGhwCgkJCS8vIGRhdGFfdHlwZQoJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX2RhdGFfdHlwZV97JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCQllY2hvIGFwcGx5X2ZpbHRlcnMoICJnZW9kaXJfY2ZhX2RhdGFfdHlwZV97JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJfSBlbHNlIHsKCQkJCSR2YWx1ZSA9ICcnOwoJCQkJaWYgKCBpc3NldCggJGZpZWxkLT5kYXRhX3R5cGUgKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5kYXRhX3R5cGUgKTsKCQkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsnZGF0YV90eXBlJ10gKSAmJiAkY2ZbJ2RlZmF1bHRzJ11bJ2RhdGFfdHlwZSddICkgewoJCQkJCSR2YWx1ZSA9ICRjZlsnZGVmYXVsdHMnXVsnZGF0YV90eXBlJ107CgkJCQl9CgkJCQkvLyBTb21lIHNlcnZlcnMgZmFpbCBpZiBhIFBPU1QgdmFsdWUgaXMgVkFSQ0hBUiBzbyB3ZSBjaGFuZ2UgaXQuCgkJCQlpZiAoICR2YWx1ZSA9PSAnVkFSQ0hBUicgKSB7CgkJCQkJJHZhbHVlID0gJ1hWQVJDSEFSJzsKCQkJCX0KCQkJCT8+CgkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkYXRhX3R5cGUiIGlkPSJkYXRhX3R5cGUiIHZhbHVlPSI8P3BocCBlY2hvICR2YWx1ZTsgPz4iLz4KCQkJCTw/cGhwCgkJCX0KCgkJCWRvX2FjdGlvbiggImdlb2Rpcl9jZmFfYmVmb3JlX2Zyb250ZW5kX3RpdGxlX3skZmllbGQtPmZpZWxkX3R5cGV9IiwgJGNmLCAkZmllbGQpOwoKCQkJLy8gZnJvbnRlbmRfdGl0bGUKCQkJaWYgKCBoYXNfZmlsdGVyKCAiZ2VvZGlyX2NmYV9mcm9udGVuZF90aXRsZV97JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCWVjaG8gYXBwbHlfZmlsdGVycyggImdlb2Rpcl9jZmFfZnJvbnRlbmRfdGl0bGVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCgkJCX0gZWxzZSB7CgkJCSR2YWx1ZSA9ICcnOwoJCQlpZiAoIGlzc2V0KCAkZmllbGQtPmZyb250ZW5kX3RpdGxlICkgKSB7CgkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPmZyb250ZW5kX3RpdGxlICk7CgkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsnZnJvbnRlbmRfdGl0bGUnXSApICYmICRjZlsnZGVmYXVsdHMnXVsnZnJvbnRlbmRfdGl0bGUnXSApIHsKCQkJJHZhbHVlID0gJGNmWydkZWZhdWx0cyddWydmcm9udGVuZF90aXRsZSddOwoJCQl9CgkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQlhcnJheSgKCQkJCQkJJ2lkJyAgICAgICAgICAgICAgICA9PiAnZnJvbnRlbmRfdGl0bGUnLAoJCQkJCQknbmFtZScgICAgICAgICAgICAgID0+ICdmcm9udGVuZF90aXRsZScsCgkJCQkJCSdsYWJlbF90eXBlJyAgICAgICAgPT4gJ3RvcCcsCgkJCQkJCSdsYWJlbCcgICAgICAgICAgICAgPT4gX18oJ0xhYmVsJywnZ2VvZGlyZWN0b3J5JykgLiBnZW9kaXJfaGVscF90aXAoIF9fKCAnVGhpcyB3aWxsIGJlIHRoZSBsYWJlbCBmb3IgdGhlIGZpZWxkIGlucHV0IG9uIHRoZSBmcm9udGVuZC4nLCAnZ2VvZGlyZWN0b3J5JyApKSwKCQkJCQkJJ3R5cGUnICAgICAgICAgICAgICA9PiAgICd0ZXh0JywKLy8JCQkJCQknd3JhcF9jbGFzcycgICAgICAgID0+IGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKSwKCQkJCQkJJ3ZhbHVlJyA9PiAkdmFsdWUsCgkJCQkJKQoJCQkJKTsKCgkJCX0KCgkJCS8qKgoJCQkgKiBBY3Rpb24gYmVmb3JlIHRoZSBjdXN0b20gZmllbGQgc2V0dGluZzogZ2VvZGlyX2NmYV9iZWZvcmVfRklFTERfVFlQRQoJCQkgKgoJCQkgKiBAcGFyYW0gb2JqZWN0ICRmaWVsZCBUaGUgZmllbGQgb2JqZWN0IHNldHRpbmdzLgoJCQkgKiBAcGFyYW0gYXJyYXkgJGNmIFRoZSBjdXN0b21zIGZpZWxkIGRlZmF1bHQgc2V0dGluZ3MuCgkJCSAqLwoJCQlkb19hY3Rpb24oICJnZW9kaXJfY2ZhX2JlZm9yZV9hZG1pbl90aXRsZV97JGZpZWxkLT5maWVsZF90eXBlfSIsICRjZiwgJGZpZWxkKTsKCgkJCS8vIGFkbWluX3RpdGxlCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfYWRtaW5fdGl0bGVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9hZG1pbl90aXRsZV97JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJfSBlbHNlIHsKCQkJCSR2YWx1ZSA9ICcnOwoJCQkJaWYgKCBpc3NldCggJGZpZWxkLT5hZG1pbl90aXRsZSApICkgewoJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPmFkbWluX3RpdGxlICk7CgkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ2FkbWluX3RpdGxlJ10gKSAmJiAkY2ZbJ2RlZmF1bHRzJ11bJ2FkbWluX3RpdGxlJ10gKSB7CgkJCQkJJHZhbHVlID0gJGNmWydkZWZhdWx0cyddWydhZG1pbl90aXRsZSddOwoJCQkJfQoKCQkJCWVjaG8gYXVpKCktPmlucHV0KAoJCQkJCWFycmF5KAoJCQkJCQknaWQnICAgICAgICAgICAgICAgID0+ICdnZC1hZG1pbi10aXRsZS0nLiRmaWVsZC0+aWQsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2FkbWluX3RpdGxlJywKCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAndG9wJywKCQkJCQkJJ2xhYmVsJyAgICAgICAgICAgICA9PiBfXygnQWRtaW4gbmFtZScsJ2dlb2RpcmVjdG9yeScpIC4gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ1RoaXMgaXMgdXNlZCBhcyB0aGUgZmllbGQgc2V0dGluZyBuYW1lIGhlcmUgaW4gdGhlIGJhY2tlbmQgb25seS4nLCAnZ2VvZGlyZWN0b3J5JyApKSwKCQkJCQkJJ3R5cGUnICAgICAgICAgICAgICA9PiAgICd0ZXh0JywKCQkJCQkJJ3dyYXBfY2xhc3MnICAgICAgICA9PiBnZW9kaXJfYWR2YW5jZWRfdG9nZ2xlX2NsYXNzKCksCgkJCQkJCSd2YWx1ZScgPT4gJHZhbHVlLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCS8vIGZyb250ZW5kX2Rlc2MKCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9iZWZvcmVfZnJvbnRlbmRfZGVzY197JGZpZWxkLT5maWVsZF90eXBlfSIsICRjZiwgJGZpZWxkKTsKCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfZnJvbnRlbmRfZGVzY197JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCQllY2hvIGFwcGx5X2ZpbHRlcnMoICJnZW9kaXJfY2ZhX2Zyb250ZW5kX2Rlc2NfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCgkJCX0gZWxzZSB7CgkJCQkkdmFsdWUgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+ZnJvbnRlbmRfZGVzYyApICkgewoJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPmZyb250ZW5kX2Rlc2MgKTsKCQkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsnZnJvbnRlbmRfZGVzYyddICkgJiYgJGNmWydkZWZhdWx0cyddWydmcm9udGVuZF9kZXNjJ10gKSB7CgkJCQkJJHZhbHVlID0gJGNmWydkZWZhdWx0cyddWydmcm9udGVuZF9kZXNjJ107CgkJCQl9CgkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQlhcnJheSgKCQkJCQkJJ2lkJyAgICAgICAgICAgICAgICA9PiAnZnJvbnRlbmRfZGVzYycsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2Zyb250ZW5kX2Rlc2MnLAoJCQkJCQknbGFiZWxfdHlwZScgICAgICAgID0+ICd0b3AnLAoJCQkJCQknbGFiZWwnICAgICAgICAgICAgID0+IF9fKCdEZXNjcmlwdGlvbicsJ2dlb2RpcmVjdG9yeScpIC4gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ1RoaXMgd2lsbCBiZSBzaG93biBiZWxvdyB0aGUgZmllbGQgb24gdGhlIGFkZCBsaXN0aW5nIGZvcm0uJywgJ2dlb2RpcmVjdG9yeScgKSksCgkJCQkJCSd0eXBlJyAgICAgICAgICAgICAgPT4gICAndGV4dCcsCi8vCQkJCQkJJ3dyYXBfY2xhc3MnICAgICAgICA9PiBnZW9kaXJfYWR2YW5jZWRfdG9nZ2xlX2NsYXNzKCksCgkJCQkJCSd2YWx1ZScgPT4gJHZhbHVlLAoJCQkJCSkKCQkJCSk7CgoJCQl9CgoJCQkvLyBodG1sdmFyX25hbWUKCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9iZWZvcmVfaHRtbHZhcl9uYW1lX3skZmllbGQtPmZpZWxkX3R5cGV9IiwgJGNmLCAkZmllbGQpOwoJCQkKCQkJaWYgKCBoYXNfZmlsdGVyKCAiZ2VvZGlyX2NmYV9odG1sdmFyX25hbWVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgkJCQoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9odG1sdmFyX25hbWVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCQkJCgkJCX0gZWxzZSB7CgkJCQkkdmFsdWUgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+aHRtbHZhcl9uYW1lICkgKSB7CgkJCQkJJHZhbHVlID0gZXNjX2F0dHIoICRmaWVsZC0+aHRtbHZhcl9uYW1lICk7CgkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ2h0bWx2YXJfbmFtZSddICkgJiYgJGNmWydkZWZhdWx0cyddWydodG1sdmFyX25hbWUnXSApIHsKCQkJCQkkdmFsdWUgPSAkY2ZbJ2RlZmF1bHRzJ11bJ2h0bWx2YXJfbmFtZSddOwoJCQkJfQoKCQkJCSRleHRyYV9hdHRyaWJ1dGVzID0gYXJyYXkoKTsKCQkJCSRyZWFkb25seSA9IGZhbHNlOwoJCQkJaWYoaXNzZXQoJGZpZWxkLT5pZCkgJiYgc3Vic3RyKCAkZmllbGQtPmlkLCAwLCA0ICkgPT09ICJuZXctIiAmJiBlbXB0eSgkZmllbGQtPnNpbmdsZV91c2UpKXt9IC8vIE5ldyBub24gc2luZ2xlIHVzZSBwcmVkZWZpbmVkIGZpZWxkcyBzaG91bGQgaGF2ZSBhYmlsaXR5IHRvIGNoYW5nZSBodG1sX3ZhcgoJCQkJZWxzZWlmICggISBlbXB0eSggJHZhbHVlICkgJiYgJHZhbHVlICE9ICdnZW9kaXJfJyApIHsgJGV4dHJhX2F0dHJpYnV0ZXNbJ3JlYWRvbmx5J10gPSAncmVhZG9ubHknOyB9CgoJCQkJJGV4dHJhX2F0dHJpYnV0ZXNbJ21heGxlbmd0aCddID0gNTA7CgkJCQkkZXh0cmFfYXR0cmlidXRlc1sncGF0dGVybiddID0gIlthLXpBLVowLTldKyI7CgoJCQkJZWNobyBhdWkoKS0+aW5wdXQoCgkJCQkJYXJyYXkoCgkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ2h0bWx2YXJfbmFtZScsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2h0bWx2YXJfbmFtZScsCgkJCQkJCSd0aXRsZScgICAgICAgICAgICAgPT4gX18oICdNdXN0IG5vdCBjb250YWluIHNwYWNlcyBvciBzcGVjaWFsIGNoYXJhY3RlcnMnLCAnZ2VvZGlyZWN0b3J5JyApLAoJCQkJCQknbGFiZWxfdHlwZScgICAgICAgID0+ICd0b3AnLAoJCQkJCQknbGFiZWwnICAgICAgICAgICAgID0+IF9fKCdLZXknLCdnZW9kaXJlY3RvcnknKSAuIGdlb2Rpcl9oZWxwX3RpcCggX18oICdUaGlzIGlzIGEgdW5pcXVlIGlkZW50aWZpZXIgdXNlZCBpbiB0aGUgZGF0YWJhc2UgYW5kIEhUTUwsIGl0IE1VU1QgTk9UIGNvbnRhaW4gc3BhY2VzIG9yIHNwZWNpYWwgY2hhcmFjdGVycy4nLCAnZ2VvZGlyZWN0b3J5JyApKSwKCQkJCQkJJ3R5cGUnICAgICAgICAgICAgICA9PiAgICd0ZXh0JywKCQkJCQkJJ3dyYXBfY2xhc3MnICAgICAgICA9PiBnZW9kaXJfYWR2YW5jZWRfdG9nZ2xlX2NsYXNzKCksCgkJCQkJCSd2YWx1ZScgPT4gJHZhbHVlID8gcHJlZ19yZXBsYWNlKCAnL2dlb2Rpcl8vJywgJycsICR2YWx1ZSwgMSApIDogJycsCgkJCQkJCSdleHRyYV9hdHRyaWJ1dGVzJyA9PiAkZXh0cmFfYXR0cmlidXRlcwoJCQkJCSkKCQkJCSk7CgkJCX0KCgoJCQkvLyBpc19hY3RpdmUKCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9iZWZvcmVfaXNfYWN0aXZlX3skZmllbGQtPmZpZWxkX3R5cGV9IiwgJGNmLCAkZmllbGQpOwoKCQkJaWYgKCBoYXNfZmlsdGVyKCAiZ2VvZGlyX2NmYV9pc19hY3RpdmVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9pc19hY3RpdmVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCgkJCX0gZWxzZSB7CgkJCQkkdmFsdWUgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+aXNfYWN0aXZlICkgKSB7CgkJCQkJJHZhbHVlID0gZXNjX2F0dHIoICRmaWVsZC0+aXNfYWN0aXZlICk7CgkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ2lzX2FjdGl2ZSddICkgJiYgJGNmWydkZWZhdWx0cyddWydpc19hY3RpdmUnXSApIHsKCQkJCQkkdmFsdWUgPSAkY2ZbJ2RlZmF1bHRzJ11bJ2lzX2FjdGl2ZSddOwoJCQkJfQoJCQkJZWNobyBhdWkoKS0+aW5wdXQoCgkJCQkJYXJyYXkoCgkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ2lzX2FjdGl2ZScsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2lzX2FjdGl2ZScsCgkJCQkJCSdsYWJlbF90eXBlJyAgICAgICAgPT4gJ2hvcml6b250YWwnLAoJCQkJCQknbGFiZWxfY29sJyAgICAgICAgPT4gJzQnLAoJCQkJCQknbGFiZWwnICAgICAgICAgICAgICA9PiBfXygnSXMgYWN0aXZlJywnZ2VvZGlyZWN0b3J5JykgLAoJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ2NoZWNrYm94JywKCQkJCQkJJ2NoZWNrZWQnID0+ICR2YWx1ZSwKCQkJCQkJJ3ZhbHVlJyA9PiAnMScsCgkJCQkJCSdzd2l0Y2gnICAgID0+ICdtZCcsCgkJCQkJCSdsYWJlbF9mb3JjZV9sZWZ0JyAgPT4gdHJ1ZSwKCQkJCQkJJ2hlbHBfdGV4dCcgPT4gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ0lmIG5vIGlzIHNlbGVjdGVkIHRoZW4gdGhlIGZpZWxkIHdpbGwgbm90IGJlIGRpc3BsYXllZCBhbnl3aGVyZS4nLCAnZ2VvZGlyZWN0b3J5JyApKQoJCQkJCSkKCQkJCSk7CgoJCQl9CgoKCQkJLy8gZm9yX2FkbWluX3VzZSBvbmx5CgkJCWRvX2FjdGlvbiggImdlb2Rpcl9jZmFfYmVmb3JlX2Zvcl9hZG1pbl91c2VfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAkY2YsICRmaWVsZCk7CgoJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX2Zvcl9hZG1pbl91c2VfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9mb3JfYWRtaW5fdXNlX3skZmllbGQtPmZpZWxkX3R5cGV9IiwgJycsICRmaWVsZC0+aWQsICRjZiwgJGZpZWxkICk7CgoJCQl9IGVsc2UgewoJCQkJJHZhbHVlID0gJyc7CgkJCQlpZiAoIGlzc2V0KCAkZmllbGQtPmZvcl9hZG1pbl91c2UgKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5mb3JfYWRtaW5fdXNlICk7CgkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ2Zvcl9hZG1pbl91c2UnXSApICYmICRjZlsnZGVmYXVsdHMnXVsnZm9yX2FkbWluX3VzZSddICkgewoJCQkJCSR2YWx1ZSA9ICRjZlsnZGVmYXVsdHMnXVsnZm9yX2FkbWluX3VzZSddOwoJCQkJfQoJCQkJZWNobyBhdWkoKS0+aW5wdXQoCgkJCQkJYXJyYXkoCgkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ2Zvcl9hZG1pbl91c2UnLAoJCQkJCQknbmFtZScgICAgICAgICAgICAgID0+ICdmb3JfYWRtaW5fdXNlJywKCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAnaG9yaXpvbnRhbCcsCgkJCQkJCSdsYWJlbF9jb2wnICAgICAgICA9PiAnNCcsCgkJCQkJCSdsYWJlbCcgICAgICAgICAgICAgID0+IF9fKCdBZG1pbiBlZGl0IG9ubHknLCdnZW9kaXJlY3RvcnknKSAsCgkJCQkJCSd0eXBlJyAgICAgICAgICAgICAgPT4gICAnY2hlY2tib3gnLAoJCQkJCQknY2hlY2tlZCcgPT4gJHZhbHVlLAoJCQkJCQkndmFsdWUnID0+ICcxJywKCQkJCQkJJ3N3aXRjaCcgICAgPT4gJ21kJywKCQkJCQkJJ2xhYmVsX2ZvcmNlX2xlZnQnICA9PiB0cnVlLAoJCQkJCQknaGVscF90ZXh0JyA9PiBnZW9kaXJfaGVscF90aXAoIF9fKCAnSWYgeWVzIGlzIHNlbGVjdGVkIHRoZW4gb25seSBzaXRlIGFkbWluIGNhbiBzZWUgYW5kIGVkaXQgdGhpcyBmaWVsZCBvbiB0aGUgYWRkIGxpc3RpbmcgcGFnZS4nLCAnZ2VvZGlyZWN0b3J5JyApKQoJCQkJCSkKCQkJCSk7CgkJCQkKCQkJfQoKCgkJCS8vIGRlZmF1bHRfdmFsdWUKCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9iZWZvcmVfZGVmYXVsdF92YWx1ZV97JGZpZWxkLT5maWVsZF90eXBlfSIsICRjZiwgJGZpZWxkKTsKCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfZGVmYXVsdF92YWx1ZV97JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCQllY2hvIGFwcGx5X2ZpbHRlcnMoICJnZW9kaXJfY2ZhX2RlZmF1bHRfdmFsdWVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCgkJCX0gZWxzZSB7CgkJCQkkdmFsdWUgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+ZGVmYXVsdF92YWx1ZSApICkgewoJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPmRlZmF1bHRfdmFsdWUgKTsKCQkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsnZGVmYXVsdF92YWx1ZSddICkgJiYgJGNmWydkZWZhdWx0cyddWydkZWZhdWx0X3ZhbHVlJ10gKSB7CgkJCQkJJHZhbHVlID0gJGNmWydkZWZhdWx0cyddWydkZWZhdWx0X3ZhbHVlJ107CgkJCQl9CgoJCQkJaWYgKCAkZmllbGQtPmZpZWxkX3R5cGUgPT0gJ2NoZWNrYm94JyApIHsKCQkJCQkkaGVscF90ZXh0ID0gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ1Nob3VsZCB0aGUgY2hlY2tib3ggYmUgY2hlY2tlZCBieSBkZWZhdWx0PycsICdnZW9kaXJlY3RvcnknICkpOwoJCQkJfSBlbHNlIGlmICggJGZpZWxkLT5maWVsZF90eXBlID09ICdlbWFpbCcgKSB7CgkJCQkJJGhlbHBfdGV4dCA9IGdlb2Rpcl9oZWxwX3RpcCggX18oICdBIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBmaWVsZCwgdXN1YWxseSBibGFuay4gRXg6IGluZm9AbXlzaXRlLmNvbScsICdnZW9kaXJlY3RvcnknICkpOwoJCQkJfSBlbHNlIHsKCQkJCQkkaGVscF90ZXh0ID0gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ0EgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGZpZWxkLCB1c3VhbGx5IGJsYW5rLiAoZm9yICJsaW5rIiB0aGlzIHdpbGwgYmUgdXNlZCBhcyB0aGUgbGluayB0ZXh0KScsICdnZW9kaXJlY3RvcnknICkpOwoJCQkJfQoKCQkJCWlmICggJGZpZWxkLT5maWVsZF90eXBlID09ICdjaGVja2JveCcgKSB7CgkJCQkJZWNobyBhdWkoKS0+c2VsZWN0KAoJCQkJCQlhcnJheSgKCQkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ2RlZmF1bHRfdmFsdWUnLAoJCQkJCQkJJ25hbWUnICAgICAgICAgICAgICA9PiAgJ2RlZmF1bHRfdmFsdWUnLAoJCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAndG9wJywKCQkJCQkJCSdtdWx0aXBsZScgICA9PiBmYWxzZSwKCQkJCQkJCSdjbGFzcycgICAgICAgICAgICAgPT4gJyBtdy0xMDAnLAoJCQkJCQkJJ29wdGlvbnMnICAgICAgID0+IGFycmF5KAoJCQkJCQkJCScnICAgPT4gIF9fKCAnVW5jaGVja2VkJywgJ2dlb2RpcmVjdG9yeScgKSwKCQkJCQkJCQknMScgICA9PiAgX18oICdDaGVja2VkJywgJ2dlb2RpcmVjdG9yeScgKSwKCQkJCQkJCSksCgkJCQkJCQknbGFiZWwnICAgICAgICAgICAgICA9PiBfXygnRGVmYXVsdCB2YWx1ZScsJ2dlb2RpcmVjdG9yeScpIC4gJGhlbHBfdGV4dCwKCQkJCQkJCSd2YWx1ZScgICAgICAgICA9PiAkdmFsdWUgLAoJCQkJCQkJJ3dyYXBfY2xhc3MnICAgID0+IGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9ZWxzZXsKCQkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQkJYXJyYXkoCgkJCQkJCQknaWQnICAgICAgICAgICAgICAgID0+ICdkZWZhdWx0X3ZhbHVlJywKCQkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2RlZmF1bHRfdmFsdWUnLAoJCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAndG9wJywKCQkJCQkJCSdsYWJlbCcgICAgICAgICAgICAgPT4gX18oJ0RlZmF1bHQgdmFsdWUnLCdnZW9kaXJlY3RvcnknKSAuICRoZWxwX3RleHQsCgkJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ3RleHQnLAoJCQkJCQkJJ3dyYXBfY2xhc3MnICAgICAgICA9PiBnZW9kaXJfYWR2YW5jZWRfdG9nZ2xlX2NsYXNzKCksCgkJCQkJCQkndmFsdWUnID0+ICR2YWx1ZSwKCQkJCQkJCSdwbGFjZWhvbGRlcicgPT4gICRmaWVsZC0+ZmllbGRfdHlwZSA9PSAnZW1haWwnID8gX18oICdpbmZvQG15c2l0ZS5jb20nLCAnZ2VvZGlyZWN0b3J5JyApIDogJycKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgoJCQl9CgoJCQkvLyBkYl9kZWZhdWx0LCB0aGlzIG9ubHkgc2hvd3Mgb24gZmlyc3QgYWRkCgkJCWlmKGlzc2V0KCRmaWVsZC0+aWQpICYmICFpc19udW1lcmljKCRmaWVsZC0+aWQpKSB7CgkJCQlkb19hY3Rpb24oICJnZW9kaXJfY2ZhX2JlZm9yZV9kYl9kZWZhdWx0X3skZmllbGQtPmZpZWxkX3R5cGV9IiwgJGNmLCAkZmllbGQgKTsKCgkJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX2RiX2RlZmF1bHRfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJCWVjaG8gYXBwbHlfZmlsdGVycyggImdlb2Rpcl9jZmFfZGJfZGVmYXVsdF97JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJCX0gZWxzZSB7CgkJCQkJJHZhbHVlID0gJyc7CgkJCQkJaWYgKCBpc3NldCggJGZpZWxkLT5kYl9kZWZhdWx0ICkgKSB7CgkJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPmRiX2RlZmF1bHQgKTsKCQkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ2RiX2RlZmF1bHQnXSApICYmICRjZlsnZGVmYXVsdHMnXVsnZGJfZGVmYXVsdCddICkgewoJCQkJCQkkdmFsdWUgPSAkY2ZbJ2RlZmF1bHRzJ11bJ2RiX2RlZmF1bHQnXTsKCQkJCQl9CgoJCQkJCWlmICggJGZpZWxkLT5maWVsZF90eXBlID09ICdjaGVja2JveCcgKSB7CgkJCQkJCSRoZWxwX3RleHQgPSBnZW9kaXJfaGVscF90aXAoIF9fKCAnU2hvdWxkIHRoZSB2YWx1ZSBiZSBzZXQgYnkgZGVmYXVsdCBpbiB0aGUgZGF0YWJhc2U/JywgJ2dlb2RpcmVjdG9yeScgKSApOwoJCQkJCX0gZWxzZSBpZiAoICRmaWVsZC0+ZmllbGRfdHlwZSA9PSAnZW1haWwnICkgewoJCQkJCQkkaGVscF90ZXh0ID0gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ0EgZGVmYXVsdCBkYXRhYmFzZSB2YWx1ZSBmb3IgdGhlIGZpZWxkLCB1c3VhbGx5IGJsYW5rLicsICdnZW9kaXJlY3RvcnknICkgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQkkaGVscF90ZXh0ID0gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ0EgZGVmYXVsdCBkYXRhYmFzZSB2YWx1ZSBmb3IgdGhlIGZpZWxkLCB1c3VhbGx5IGJsYW5rLicsICdnZW9kaXJlY3RvcnknICkgKTsKCQkJCQl9CgoJCQkJCWlmICggJGZpZWxkLT5maWVsZF90eXBlID09ICdjaGVja2JveCcgKSB7CgkJCQkJCWVjaG8gYXVpKCktPnNlbGVjdCgKCQkJCQkJCWFycmF5KAoJCQkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ2RiX2RlZmF1bHQnLAoJCQkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gICdkYl9kZWZhdWx0JywKCQkJCQkJCQknbGFiZWxfdHlwZScgICAgICAgID0+ICd0b3AnLAoJCQkJCQkJCSdtdWx0aXBsZScgICA9PiBmYWxzZSwKCQkJCQkJCQknY2xhc3MnICAgICAgICAgICAgID0+ICcgbXctMTAwJywKCQkJCQkJCQknb3B0aW9ucycgICAgICAgPT4gYXJyYXkoCgkJCQkJCQkJCScnICAgPT4gIF9fKCAnVW5jaGVja2VkJywgJ2dlb2RpcmVjdG9yeScgKSwKCQkJCQkJCQkJJzEnICAgPT4gIF9fKCAnQ2hlY2tlZCcsICdnZW9kaXJlY3RvcnknICksCgkJCQkJCQkJKSwKCQkJCQkJCQknbGFiZWwnICAgICAgICAgICAgICA9PiBfXygnRGF0YWJhc2UgRGVmYXVsdCB2YWx1ZScsJ2dlb2RpcmVjdG9yeScpIC4gJGhlbHBfdGV4dCwKCQkJCQkJCQkndmFsdWUnICAgICAgICAgPT4gJHZhbHVlICwKCQkJCQkJCQknd3JhcF9jbGFzcycgICAgPT4gZ2VvZGlyX2FkdmFuY2VkX3RvZ2dsZV9jbGFzcygpLAoJCQkJCQkJKQoJCQkJCQkpOwoJCQkJCX1lbHNlewoJCQkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQkJCWFycmF5KAoJCQkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ2RiX2RlZmF1bHQnLAoJCQkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2RiX2RlZmF1bHQnLAoJCQkJCQkJCSdsYWJlbF90eXBlJyAgICAgICAgPT4gJ3RvcCcsCgkJCQkJCQkJJ2xhYmVsJyAgICAgICAgICAgICA9PiBfXygnRGF0YWJhc2UgRGVmYXVsdCB2YWx1ZScsJ2dlb2RpcmVjdG9yeScpIC4gJGhlbHBfdGV4dCwKCQkJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ3RleHQnLAoJCQkJCQkJCSd3cmFwX2NsYXNzJyAgICAgICAgPT4gZ2VvZGlyX2FkdmFuY2VkX3RvZ2dsZV9jbGFzcygpLAoJCQkJCQkJCSd2YWx1ZScgPT4gJHZhbHVlLAoJCQkJCQkJCSdwbGFjZWhvbGRlcicgPT4gICRmaWVsZC0+ZmllbGRfdHlwZSA9PSAnZW1haWwnID8gX18oICdpbmZvQG15c2l0ZS5jb20nLCAnZ2VvZGlyZWN0b3J5JyApIDogJycKCQkJCQkJCSkKCQkJCQkJKTsKCQkJCQl9CgoJCQkJfQoJCQl9CgoJCQkvLyBwbGFjZWhvbGRlcl92YWx1ZQoJCQlkb19hY3Rpb24oICJnZW9kaXJfY2ZhX2JlZm9yZV9wbGFjZWhvbGRlcl92YWx1ZV97JGZpZWxkLT5maWVsZF90eXBlfSIsICRjZiwgJGZpZWxkKTsKCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfcGxhY2Vob2xkZXJfdmFsdWVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9wbGFjZWhvbGRlcl92YWx1ZV97JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJfSBlbHNlIHsKCQkJCSR2YWx1ZSA9ICcnOwoJCQkJaWYgKCBpc3NldCggJGZpZWxkLT5wbGFjZWhvbGRlcl92YWx1ZSApICkgewoJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPnBsYWNlaG9sZGVyX3ZhbHVlICk7CgkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ3BsYWNlaG9sZGVyX3ZhbHVlJ10gKSAmJiAkY2ZbJ2RlZmF1bHRzJ11bJ3BsYWNlaG9sZGVyX3ZhbHVlJ10gKSB7CgkJCQkJJHZhbHVlID0gJGNmWydkZWZhdWx0cyddWydwbGFjZWhvbGRlcl92YWx1ZSddOwoJCQkJfQoKCQkJCWVjaG8gYXVpKCktPmlucHV0KAoJCQkJCWFycmF5KAoJCQkJCQknaWQnICAgICAgICAgICAgICAgID0+ICdwbGFjZWhvbGRlcl92YWx1ZScsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ3BsYWNlaG9sZGVyX3ZhbHVlJywKCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAndG9wJywKCQkJCQkJJ2xhYmVsJyAgICAgICAgICAgICAgPT4gX18oJ1BsYWNlaG9sZGVyIHZhbHVlJywnZ2VvZGlyZWN0b3J5JykgLiBnZW9kaXJfaGVscF90aXAoIF9fKCAnQSBwbGFjZWhvbGRlciB2YWx1ZSB0byB1c2UgZm9yIHRleHQgaW5wdXQgZmllbGRzLicsICdnZW9kaXJlY3RvcnknICkpLAoJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ3RleHQnLAoJCQkJCQknd3JhcF9jbGFzcycgICAgICAgID0+IGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKSwKCQkJCQkJJ3ZhbHVlJyA9PiAkdmFsdWUsCgkJCQkJKQoJCQkJKTsKCgkJCX0KCgoJCQkvLyBzaG93X2luCgkJCWRvX2FjdGlvbiggImdlb2Rpcl9jZmFfYmVmb3JlX3Nob3dfaW5feyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAkY2YsICRmaWVsZCk7CgoJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX3Nob3dfaW5feyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9zaG93X2luX3skZmllbGQtPmZpZWxkX3R5cGV9IiwgJycsICRmaWVsZC0+aWQsICRjZiwgJGZpZWxkICk7CgoJCQl9IGVsc2UgewoJCQkJJHZhbHVlID0gJyc7CgkJCQlpZiAoIGlzc2V0KCAkZmllbGQtPnNob3dfaW4gKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5zaG93X2luICk7CgkJCQl9IGVsc2VpZiAoIGlzc2V0KCAkY2ZbJ2RlZmF1bHRzJ11bJ3Nob3dfaW4nXSApICYmICRjZlsnZGVmYXVsdHMnXVsnc2hvd19pbiddICkgewoJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkY2ZbJ2RlZmF1bHRzJ11bJ3Nob3dfaW4nXSApOwoJCQkJfQoKCQkJCSRzaG93X2luX2xvY2F0aW9ucyA9IGdlb2Rpcl9zaG93X2luX2xvY2F0aW9ucygkZmllbGQsICRmaWVsZC0+ZmllbGRfdHlwZSApOwoKCQkJCS8vIHJlbW92ZSBzb21lIGxvY2F0aW9ucyBmb3Igc29tZSBmaWVsZCB0eXBlcwoKCQkJCS8vIGRvbid0IHNob3cgbmV3IHRhYiBvcHRpb24gZm9yIHNvbWUgdHlwZXMKCQkJCWlmICggaW5fYXJyYXkoICRmaWVsZC0+ZmllbGRfdHlwZSwgYXJyYXkoCgkJCQkJCSd0ZXh0JywKCQkJCQkJJ2RhdGVwaWNrZXInLAoJCQkJCQkndGV4dGFyZWEnLAoJCQkJCQkndGltZScsCgkJCQkJCSdwaG9uZScsCgkJCQkJCSdlbWFpbCcsCgkJCQkJCSdzZWxlY3QnLAoJCQkJCQknbXVsdGlzZWxlY3QnLAoJCQkJCQkndXJsJywKCQkJCQkJJ2h0bWwnLAoJCQkJCQknZmllbGRzZXQnLAoJCQkJCQkncmFkaW8nLAoJCQkJCQknY2hlY2tib3gnLAoJCQkJCQknZmlsZScsCgkJCQkJCSdhZGRyZXNzJywKCQkJCQkJJ3RheG9ub215JywKCQkJCQkJJ2J1c2luZXNzX2hvdXJzJwoJCQkJCSkgKSB8fCBhcHBseV9maWx0ZXJzKCAnZ2VvZGlyX2VuYWJsZV9maWVsZF90eXBlX2luX293bnRhYicsIGZhbHNlLCAkZmllbGQtPmZpZWxkX3R5cGUsICRmaWVsZCApICkgewoJCQkJfSBlbHNlIHsKCQkJCQl1bnNldCggJHNob3dfaW5fbG9jYXRpb25zWydbb3dudGFiXSddICk7CgkJCQl9CgoJCQkJaWYgKCAhICRkaXNwbGF5X29uX2xpc3RpbmcgKSB7CgkJCQkJdW5zZXQoICRzaG93X2luX2xvY2F0aW9uc1snW2xpc3RpbmdzXSddICk7CgkJCQl9CgoJCQkJJHNob3dfaW5fdmFsdWVzID0gZXhwbG9kZSggJywnLCAkdmFsdWUgKTsKCgkJCQllY2hvIGF1aSgpLT5zZWxlY3QoCgkJCQkJYXJyYXkoCgkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ3Nob3dfaW4nLAoJCQkJCQknbmFtZScgICAgICAgICAgICAgID0+ICAnc2hvd19pbltdJywKCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAndG9wJywKCQkJCQkJJ211bHRpcGxlJyAgID0+IHRydWUsCgkJCQkJCSdzZWxlY3QyJyAgICA9PiB0cnVlLAoJCQkJCQknY2xhc3MnICAgICAgICAgICAgID0+ICcgbXctMTAwJywKCQkJCQkJJ29wdGlvbnMnICAgICAgID0+ICRzaG93X2luX2xvY2F0aW9ucywKCQkJCQkJJ2xhYmVsJyAgICAgICAgICAgICAgPT4gX18oJ1Nob3cgaW4gZXh0cmEgb3V0cHV0IGxvY2F0aW9uJywnZ2VvZGlyZWN0b3J5JykgLiBnZW9kaXJfaGVscF90aXAoIF9fKCAnU2VsZWN0IGluIHdoYXQgbG9jYXRpb25zIHlvdSB3YW50IHRvIGRpc3BsYXkgdGhpcyBmaWVsZC4nLCAnZ2VvZGlyZWN0b3J5JyApKSwKCQkJCQkJJ3ZhbHVlJyAgICAgICAgID0+ICRzaG93X2luX3ZhbHVlcywKCQkJCQkJJ3BsYWNlaG9sZGVyJyA9PiBfXyggJ1NlbGVjdCBsb2NhdGlvbnMnLCAnZ2VvZGlyZWN0b3J5JyApLAovLwkJCQkJCSd3cmFwX2NsYXNzJyAgICA9PiBnZW9kaXJfYWR2YW5jZWRfdG9nZ2xlX2NsYXNzKCksCgkJCQkJKQoJCQkJKTsKCQkJfQoKCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9hZnRlcl9zaG93X2luX2ZpZWxkIiwgJGNmLCAkZmllbGQgKTsKCgkJCS8vIGFkdmFuY2VkX2VkaXRvciBAdG9kbyB0aGlzIHNob3VsZCBiZSBhZGRlZCB2aWEgYWN0aW9uCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfYWR2YW5jZWRfZWRpdG9yX3skZmllbGQtPmZpZWxkX3R5cGV9IiApICkgewoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9hZHZhbmNlZF9lZGl0b3JfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCQkJfQoKCQkJLy8gaXNfcmVxdWlyZWQKCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9iZWZvcmVfaXNfcmVxdWlyZWRfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAkY2YsICRmaWVsZCk7CgoJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX2lzX3JlcXVpcmVkX3skZmllbGQtPmZpZWxkX3R5cGV9IiApICkgewoKCQkJCWVjaG8gYXBwbHlfZmlsdGVycyggImdlb2Rpcl9jZmFfaXNfcmVxdWlyZWRfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCgkJCX0gZWxzZSB7CgkJCQkkdmFsdWUgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+aXNfcmVxdWlyZWQgKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5pc19yZXF1aXJlZCApOwoJCQkJfSBlbHNlaWYgKCBpc3NldCggJGNmWydkZWZhdWx0cyddWydpc19yZXF1aXJlZCddICkgJiYgJGNmWydkZWZhdWx0cyddWydpc19yZXF1aXJlZCddICkgewoJCQkJCSR2YWx1ZSA9ICRjZlsnZGVmYXVsdHMnXVsnaXNfcmVxdWlyZWQnXTsKCQkJCX0KCgkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQlhcnJheSgKCQkJCQkJJ2lkJyAgICAgICAgICAgICAgICA9PiAnaXNfcmVxdWlyZWQnLAoJCQkJCQknbmFtZScgICAgICAgICAgICAgID0+ICdpc19yZXF1aXJlZCcsCgkJCQkJCSdsYWJlbF90eXBlJyAgICAgICAgPT4gJ2hvcml6b250YWwnLAoJCQkJCQknbGFiZWxfY29sJyAgICAgICAgPT4gJzQnLAoJCQkJCQknbGFiZWwnICAgICAgICAgICAgICA9PiBfXygnSXMgcmVxdWlyZWQnLCdnZW9kaXJlY3RvcnknKSAsCgkJCQkJCSd0eXBlJyAgICAgICAgICAgICAgPT4gICAnY2hlY2tib3gnLAoJCQkJCQknY2hlY2tlZCcgPT4gJHZhbHVlLAoJCQkJCQkndmFsdWUnID0+ICcxJywKCQkJCQkJJ3N3aXRjaCcgICAgPT4gJ21kJywKCQkJCQkJJ2xhYmVsX2ZvcmNlX2xlZnQnICA9PiB0cnVlLAoJCQkJCQknaGVscF90ZXh0JyA9PiBnZW9kaXJfaGVscF90aXAoIF9fKCAnU2V0IGZpZWxkIGFzIHJlcXVpcmVkLicsICdnZW9kaXJlY3RvcnknICkpCgkJCQkJKQoJCQkJKTsKCgkJCX0KCgkJCS8vIHJlcXVpcmVkX21zZwoJCQlkb19hY3Rpb24oICJnZW9kaXJfY2ZhX2JlZm9yZV9yZXF1aXJlZF9tc2dfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAkY2YsICRmaWVsZCk7CgoJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX3JlcXVpcmVkX21zZ197JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCQllY2hvIGFwcGx5X2ZpbHRlcnMoICJnZW9kaXJfY2ZhX3JlcXVpcmVkX21zZ197JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJfSBlbHNlIHsKCQkJCSR2YWx1ZSA9ICcnOwoJCQkJaWYgKCBpc3NldCggJGZpZWxkLT5yZXF1aXJlZF9tc2cgKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5yZXF1aXJlZF9tc2cgKTsKCQkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsncmVxdWlyZWRfbXNnJ10gKSAmJiAkY2ZbJ2RlZmF1bHRzJ11bJ3JlcXVpcmVkX21zZyddICkgewoJCQkJCSR2YWx1ZSA9ICRjZlsnZGVmYXVsdHMnXVsncmVxdWlyZWRfbXNnJ107CgkJCQl9CgoJCQkJZWNobyBhdWkoKS0+aW5wdXQoCgkJCQkJYXJyYXkoCgkJCQkJCSdpZCcgICAgICAgICAgICAgICAgPT4gJ3JlcXVpcmVkX21zZycsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ3JlcXVpcmVkX21zZycsCgkJCQkJCSdsYWJlbF90eXBlJyAgICAgICAgPT4gJ3RvcCcsCgkJCQkJCSdsYWJlbCcgICAgICAgICAgICAgID0+IF9fKCdSZXF1aXJlZCBtZXNzYWdlJywnZ2VvZGlyZWN0b3J5JykgLiBnZW9kaXJfaGVscF90aXAoIF9fKCAnRW50ZXIgdGV4dCBmb3IgdGhlIGVycm9yIG1lc3NhZ2UgaWYgdGhlIGZpZWxkIGlzIHJlcXVpcmVkIGFuZCBoYXMgbm90IGZ1bGZpbGxlZCB0aGUgcmVxdWlyZW1lbnRzLicsICdnZW9kaXJlY3RvcnknICkpLAoJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ3RleHQnLAoJCQkJCQkvLy8nd3JhcF9jbGFzcycgICAgPT4gZ2VvZGlyX2FkdmFuY2VkX3RvZ2dsZV9jbGFzcygpLAoJCQkJCQkndmFsdWUnID0+ICR2YWx1ZSwKCQkJCQkJJ2VsZW1lbnRfcmVxdWlyZScgPT4gJ1slaXNfcmVxdWlyZWQlOmNoZWNrZWRdJwoJCQkJCSkKCQkJCSk7CgoJCQl9CgoKCQkJLy8gcmVxdWlyZWRfbXNnCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfdmFsaWRhdGlvbl9wYXR0ZXJuX3skZmllbGQtPmZpZWxkX3R5cGV9IiApICkgewoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV92YWxpZGF0aW9uX3BhdHRlcm5feyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCQkJfQoKCgoJCQkvLyBmaWVsZF9pY29uCgkJCWRvX2FjdGlvbiggImdlb2Rpcl9jZmFfYmVmb3JlX2ZpZWxkX2ljb257JGZpZWxkLT5maWVsZF90eXBlfSIsICRjZiwgJGZpZWxkKTsKCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfZmllbGRfaWNvbl97JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCQllY2hvIGFwcGx5X2ZpbHRlcnMoICJnZW9kaXJfY2ZhX2ZpZWxkX2ljb25feyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCgkJCX0gZWxzZSB7CgkJCQkkdmFsdWUgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+ZmllbGRfaWNvbiApICkgewoJCQkJCSR2YWx1ZSA9IGVzY19hdHRyKCAkZmllbGQtPmZpZWxkX2ljb24gKTsKCQkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsnZmllbGRfaWNvbiddICkgJiYgJGNmWydkZWZhdWx0cyddWydmaWVsZF9pY29uJ10gKSB7CgkJCQkJJHZhbHVlID0gJGNmWydkZWZhdWx0cyddWydmaWVsZF9pY29uJ107CgkJCQl9CgkJCQk/Pgo8IS0tCQkJCTxoMyBjbGFzcz0iaDYgYm9yZGVyLWJvdHRvbSA8P3BocCBlY2hvIGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKTsgPz4iPi0tPjw/cGhwIC8vZWNobyBfXyggJ0N1c3RvbSBjc3MnLCAnZ2VvZGlyZWN0b3J5JyApOyA/PjwhLS08L2gzPi0tPgoJCQkJPD9waHAKCgkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQlhcnJheSgKCQkJCQkJJ2lkJyAgICAgICAgICAgICAgICA9PiAnZmllbGRfaWNvbicsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2ZpZWxkX2ljb24nLAoJCQkJCQknbGFiZWxfdHlwZScgICAgICAgID0+ICd0b3AnLAoJCQkJCQknbGFiZWwnICAgICAgICAgICAgICA9PiBfXygnSWNvbicsJ2dlb2RpcmVjdG9yeScpIC4gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ1VwbG9hZCBpY29uIHVzaW5nIG1lZGlhIGFuZCBlbnRlciBpdHMgdXJsIHBhdGgsIG9yIGVudGVyIGZvbnQgYXdlc29tZSBjbGFzcyBlZzoiZmFzIGZhLWhvbWUiJywgJ2dlb2RpcmVjdG9yeScgKSksCgkJCQkJCSd0eXBlJyAgICAgICAgICAgICAgPT4gICAnaWNvbnBpY2tlcicsCgkJCQkJCSd3cmFwX2NsYXNzJyAgICAgICAgPT4gZ2VvZGlyX2FkdmFuY2VkX3RvZ2dsZV9jbGFzcygpLAoJCQkJCQkndmFsdWUnID0+ICR2YWx1ZSwKCQkJCQkpCgkJCQkpOwoKCQkJfQoKCgkJCS8vIGNzc19jbGFzcwoJCQlkb19hY3Rpb24oICJnZW9kaXJfY2ZhX2JlZm9yZV9jc3NfY2xhc3NfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAkY2YsICRmaWVsZCk7CgoJCQlpZiAoIGhhc19maWx0ZXIoICJnZW9kaXJfY2ZhX2Nzc19jbGFzc197JGZpZWxkLT5maWVsZF90eXBlfSIgKSApIHsKCgkJCQllY2hvIGFwcGx5X2ZpbHRlcnMoICJnZW9kaXJfY2ZhX2Nzc19jbGFzc197JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJfSBlbHNlIHsKCQkJCSR2YWx1ZSA9ICcnOwoJCQkJaWYgKCBpc3NldCggJGZpZWxkLT5jc3NfY2xhc3MgKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5jc3NfY2xhc3MgKTsKCQkJCX0gZWxzZWlmICggaXNzZXQoICRjZlsnZGVmYXVsdHMnXVsnY3NzX2NsYXNzJ10gKSAmJiAkY2ZbJ2RlZmF1bHRzJ11bJ2Nzc19jbGFzcyddICkgewoJCQkJCSR2YWx1ZSA9ICRjZlsnZGVmYXVsdHMnXVsnY3NzX2NsYXNzJ107CgkJCQl9CgoJCQkJJGhlbHBfdGV4dCA9IF9fKCAnRW50ZXIgY3VzdG9tIGNzcyBjbGFzcyBmb3IgZmllbGQgY3VzdG9tIHN0eWxlLicsICdnZW9kaXJlY3RvcnknICk7CgkJCQlpZiAoICRmaWVsZC0+ZmllbGRfdHlwZSA9PSAnbXVsdGlzZWxlY3QnICkgewoJCQkJCSRoZWxwX3RleHQuPSAnICcuX18oICcoRW50ZXIgY2xhc3MgYGdkLWNvbW1hLWxpc3RgIHRvIHNob3cgbGlzdCBhcyBjb21tYSBzZXBhcmF0ZWQpJywgJ2dlb2RpcmVjdG9yeScgKTsKCQkJCX0KCgkJCQllY2hvIGF1aSgpLT5pbnB1dCgKCQkJCQlhcnJheSgKCQkJCQkJJ2lkJyAgICAgICAgICAgICAgICA9PiAnY3NzX2NsYXNzJywKCQkJCQkJJ25hbWUnICAgICAgICAgICAgICA9PiAnY3NzX2NsYXNzJywKCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAndG9wJywKCQkJCQkJJ2xhYmVsJyAgICAgICAgICAgICAgPT4gX18oJ0NzcyBjbGFzcycsJ2dlb2RpcmVjdG9yeScpIC4gZ2VvZGlyX2hlbHBfdGlwKCRoZWxwX3RleHQpLAoJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ3RleHQnLAoJCQkJCQknd3JhcF9jbGFzcycgICAgICAgID0+IGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKSwKCQkJCQkJJ3ZhbHVlJyA9PiBpc3NldCggJGZpZWxkLT5jc3NfY2xhc3MgKSA/IGVzY19hdHRyKCAkZmllbGQtPmNzc19jbGFzcyApIDogJycsCgkJCQkJKQoJCQkJKTsKCgkJCX0KCgoJCQkvLyBjYXRfc29ydAoJCQlkb19hY3Rpb24oICJnZW9kaXJfY2ZhX2JlZm9yZV9jc3Nfc29ydF97JGZpZWxkLT5maWVsZF90eXBlfSIsICRjZiwgJGZpZWxkKTsKCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfY2F0X3NvcnRfeyRmaWVsZC0+ZmllbGRfdHlwZX0iICkgKSB7CgoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9jYXRfc29ydF97JGZpZWxkLT5maWVsZF90eXBlfSIsICcnLCAkZmllbGQtPmlkLCAkY2YsICRmaWVsZCApOwoKCQkJfSBlbHNlIHsKCgkJCQkvLyBAdG9kbyB3ZSBzaG91bGQganVzdCByZW1vdmUgdGhpcyBhbmQgbWFrZSBhbGwgZmllbGRzIGF2YWlsYWJsZSBhcyBzb3J0IG9wdGlvbnMuCgkJCQkkdmFsdWUgICAgICAgICA9ICcnOwoJCQkJJGhpZGVfY2F0X3NvcnQgPSAnJzsKCQkJCWlmICggaXNzZXQoICRmaWVsZC0+Y2F0X3NvcnQgKSApIHsKCQkJCQkkdmFsdWUgPSBlc2NfYXR0ciggJGZpZWxkLT5jYXRfc29ydCApOwoJCQkJfSBlbHNlaWYgKCBpc3NldCggJGNmWydkZWZhdWx0cyddWydjYXRfc29ydCddICkgJiYgJGNmWydkZWZhdWx0cyddWydjYXRfc29ydCddICkgewoJCQkJCSR2YWx1ZSAgICAgICAgID0gJGNmWydkZWZhdWx0cyddWydjYXRfc29ydCddOwoJCQkJCSRoaWRlX2NhdF9zb3J0ID0gKCAkdmFsdWUgPT09IGZhbHNlICkgPyAic3R5bGU9J2Rpc3BsYXk6bm9uZTsnIiA6ICcnOwoJCQkJfQoKCQkJCSRoaWRlX2NhdF9zb3J0ID0gKCBpc3NldCggJGNmWydkZWZhdWx0cyddWydjYXRfc29ydCddICkgJiYgJGNmWydkZWZhdWx0cyddWydjYXRfc29ydCddID09PSBmYWxzZSApID8gInN0eWxlPSdkaXNwbGF5Om5vbmU7JyIgOiAnJzsKCQkJCS8qKgoJCQkJICogRmlsdGVyIHRoZSBzZWN0aW9uIHRpdGxlLgoJCQkJICoKCQkJCSAqIEZpbHRlciB0aGUgc2VjdGlvbiB0aXRsZSBpbiBjdXN0b20gZmllbGQgZm9ybSBpbiBhZG1pbgoJCQkJICogY3VzdG9tIGZpZWxkcyBzZXR0aW5ncy4KCQkJCSAqCgkJCQkgKiBAc2luY2UgMS4wLjAKCQkJCSAqCgkJCQkgKiBAcGFyYW0gc3RyaW5nICR0aXRsZSBUaXRsZSBvZiB0aGUgc2VjdGlvbi4KCQkJCSAqIEBwYXJhbSBzdHJpbmcgJGZpZWxkIC0+ZmllbGRfdHlwZSBDdXJyZW50IGZpZWxkIHR5cGUuCgkJCQkgKi8KCQkJCSRjYXRfc29ydF9oZWFkaW5nX2xhYmVsID0gYXBwbHlfZmlsdGVycyggJ2dlb2Rpcl9hZHZhbmNlX2N1c3RvbV9maWVsZHNfaGVhZGluZycsIF9fKCAnUG9zdHMgc29ydCBvcHRpb25zJywgJ2dlb2RpcmVjdG9yeScgKSwgJGZpZWxkLT5maWVsZF90eXBlICk7CgkJCQk/PgoJCQkJPGgzIGNsYXNzPSJib3JkZXItYm90dG9tIHRleHQtZGFyayBoNCBwdC0zIHBiLTIgbWItMyA8P3BocCBlY2hvIGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKTsgPz4iIGRhdGEtc2V0dGluZz0iY2F0X3NvcnRfaGVhZGluZyI+PD9waHAgZWNobyAkY2F0X3NvcnRfaGVhZGluZ19sYWJlbDsgPz48L2gzPgoJCQkJPD9waHAKCQkJCWVjaG8gYXVpKCktPmlucHV0KAoJCQkJCWFycmF5KAoJCQkJCQknaWQnICAgICAgICAgICAgICAgID0+ICdjYXRfc29ydCcsCgkJCQkJCSduYW1lJyAgICAgICAgICAgICAgPT4gJ2NhdF9zb3J0JywKCQkJCQkJJ2xhYmVsX3R5cGUnICAgICAgICA9PiAnaG9yaXpvbnRhbCcsCgkJCQkJCSdsYWJlbF9jb2wnICAgICAgICA9PiAnNCcsCgkJCQkJCSdsYWJlbCcgICAgICAgICAgICAgID0+IF9fKCdJbmNsdWRlIHRoaXMgZmllbGQgaW4gc29ydGluZyBvcHRpb25zJywnZ2VvZGlyZWN0b3J5JykgLAoJCQkJCQkndHlwZScgICAgICAgICAgICAgID0+ICAgJ2NoZWNrYm94JywKCQkJCQkJJ2NoZWNrZWQnID0+ICR2YWx1ZSwKCQkJCQkJJ3ZhbHVlJyA9PiAnMScsCgkJCQkJCSdzd2l0Y2gnICAgID0+ICdtZCcsCgkJCQkJCSdsYWJlbF9mb3JjZV9sZWZ0JyAgPT4gdHJ1ZSwKCQkJCQkJJ3dyYXBfY2xhc3MnICAgID0+IGdlb2Rpcl9hZHZhbmNlZF90b2dnbGVfY2xhc3MoKSwKCQkJCQkJJ2hlbHBfdGV4dCcgPT4gZ2VvZGlyX2hlbHBfdGlwKCBfXyggJ0xldHMgeW91IHVzZSB0aGlzIGZpZWxkIGFzIGEgc29ydGluZyBvcHRpb24sIHNldCBmcm9tIHNvcnRpbmcgb3B0aW9ucyBhYm92ZS4nLCAnZ2VvZGlyZWN0b3J5JyApKQoJCQkJCSkKCQkJCSk7CgoJCQl9CgoJCQlkb19hY3Rpb24oICdnZW9kaXJfY2ZhX2JlZm9yZV9leHRyYV9maWVsZHMnLCAkY2YsICRmaWVsZCApOwoKCQkJLy8gZXh0cmFfZmllbGRzCgkJCWlmICggaGFzX2ZpbHRlciggImdlb2Rpcl9jZmFfZXh0cmFfZmllbGRzX3skZmllbGQtPmZpZWxkX3R5cGV9IiApICkgewoJCQkJZWNobyBhcHBseV9maWx0ZXJzKCAiZ2VvZGlyX2NmYV9leHRyYV9maWVsZHNfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAnJywgJGZpZWxkLT5pZCwgJGNmLCAkZmllbGQgKTsKCQkJfQoKCgkJCXN3aXRjaCAoICRmaWVsZC0+ZmllbGRfdHlwZSApOgoJCQkJY2FzZSAnaHRtbCc6CgkJCQljYXNlICdmaWxlJzoKCQkJCWNhc2UgJ3VybCc6CgkJCQljYXNlICdmaWVsZHNldCc6CgkJCQkJYnJlYWs7CgkJCQlkZWZhdWx0OgoKCQkJCQkvKioKCQkJCQkgKiBDYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGUgYWR2YW5jZWQgY3VzdG9tIGZpZWxkcyBzZXR0aW5ncyBwYWdlIGxvb3AuCgkJCQkJICoKCQkJCQkgKiBDYW4gYmUgdXNlZCB0byBhZGQgb3IgZGVhbCB3aXRoIGRpZmZlcmVudCBzZXR0aW5ncyB0eXBlcy4KCQkJCQkgKgoJCQkJCSAqIEBzaW5jZSAxLjAuMAoJCQkJCSAqIEBzaW5jZSAxLjYuNiAkY2YgcGFyYW0gYWRkZWQuCgkJCQkJICoKCQkJCQkgKiBAcGFyYW0gb2JqZWN0ICRmaWVsZCBUaGUgY3VycmVudCBmaWVsZHMgaW5mby4KCQkJCQkgKiBAcGFyYW0gYXJyYXkgJGNmIFRoZSBjdXN0b20gZmllbGQgc2V0dGluZ3MKCQkJCQkgKi8KCQkJCQlkb19hY3Rpb24oICdnZW9kaXJfYWR2YW5jZV9jdXN0b21fZmllbGRzJywgJGZpZWxkLCAkY2YgKTsgPz4KCgoJCQkJPD9waHAgZW5kc3dpdGNoOwoKCgkJCS8vIGFjdGlvbiBiZWZvcmUgc2F2ZSBidXR0b24KCQkJZG9fYWN0aW9uKCAiZ2VvZGlyX2NmYV9iZWZvcmVfc2F2ZSIsIHNlbGY6OiRwb3N0X3R5cGUsICRmaWVsZCwgJGNmICk7CgkJCWRvX2FjdGlvbiggImdlb2Rpcl9jZmFfYmVmb3JlX3NhdmVfeyRmaWVsZC0+ZmllbGRfdHlwZX0iLCAkY2YsICRmaWVsZCk7CgoJCQk/PgoKCgkJCTxkaXYgY2xhc3M9ImdkLXRhYi1hY3Rpb25zIG1iLTAiIGRhdGEtc2V0dGluZz0ic2F2ZV9idXR0b24iPgoKCQkJCTxzcGFuIGNsYXNzPSJsZXh0LWxlZnQgZmxvYXQtbGVmdCI+CgkJCQkJPD9waHAgR2VvRGlyX1NldHRpbmdzX1BhZ2U6OnRvZ2dsZV9hZHZhbmNlZF9idXR0b24oJ2J0biBidG4tb3V0bGluZS1wcmltYXJ5IHRleHQtbGVmdCBnZC1hZHZhbmNlZC10b2dnbGUtZmllbGQnLGZhbHNlKTs/PgoJCQkJPC9zcGFuPgoKCgkJCQk8YSBjbGFzcz0iIGJ0biBidG4tbGluayB0ZXh0LW11dGVkIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBvbmNsaWNrPSJnZF90YWJzX2Nsb3NlX3NldHRpbmdzKHRoaXMpOyByZXR1cm4gZmFsc2U7Ij48P3BocCBfZSgiQ2xvc2UiLCJnZW9kaXJlY3RvcnkiKTs/PjwvYT4KCQkJCTxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuYW1lPSJzYXZlIiBpZD0ic2F2ZSIgZGF0YS1zYXZlLXRleHQ9Ijw/cGhwIF9lKCJTYXZlIiwiZ2VvZGlyZWN0b3J5Iik7Pz4iICBvbmNsaWNrPSJnZF9zYXZlX2N1c3RvbV9maWVsZCgnPD9waHAgZWNobyBlc2NfYXR0ciggJGZpZWxkLT5pZCApOyA/PicsZXZlbnQpO2pRdWVyeSh0aGlzKS5odG1sKCc8c3BhbiBjbGFzcz1cJ3NwaW5uZXItYm9yZGVyIHNwaW5uZXItYm9yZGVyLXNtXCcgcm9sZT1cJ3N0YXR1c1wnPjwvc3Bhbj4gPD9waHAgZXNjX2F0dHJfZSggJ1NhdmluZycsICdnZW9kaXJlY3RvcnknICk7ID8+JykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7cmV0dXJuIGZhbHNlOyI+CgkJCQkJPD9waHAgX2UoIlNhdmUiLCJnZW9kaXJlY3RvcnkiKTs/PgoJCQkJPC9idXR0b24+CgkJCTwvZGl2PgoJCTwvc2NyaXB0PgoJPC9kaXY+CjwvbGk+IjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";